<?xml version="1.0" encoding="utf-8" ?><rss xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:rawvoice="http://www.rawvoice.com/rawvoiceRssModule/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://www.rssboard.org/media-rss" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Point-Free Videos (Private feed for harold.martin@gmail.com)</title><link>https://www.pointfree.co/</link><language>en-US</language><description>Point-Free is a video series that explores advanced topics in the Swift programming language. Each episode
covers a topic that may seem complex and academic at first, but turns out to be quite simple. At the end of
each episode we’ll ask “what’s the point?!”, so that we can bring the concepts back down to earth and show
how these ideas can improve the quality of your code today.

---

This is a private feed associated with the Point-Free account harold.martin@gmail.com. Please do not share this link
with anyone else.</description><copyright>Copyright Point-Free, Inc. 2025</copyright><image><url>https://d3rccdn33rt8ze.cloudfront.net/social-assets/pf-avatar-square.jpg</url><title>Point-Free Videos (Private feed for harold.martin@gmail.com)</title><link>https://www.pointfree.co/</link></image><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:block>yes</itunes:block><itunes:subtitle>Functional programming concepts explained simply.</itunes:subtitle><itunes:summary>Point-Free is a video series that explores advanced topics in the Swift programming language. Each episode
covers a topic that may seem complex and academic at first, but turns out to be quite simple. At the end of
each episode we’ll ask “what’s the point?!”, so that we can bring the concepts back down to earth and show
how these ideas can improve the quality of your code today.

---

This is a private feed associated with the Point-Free account harold.martin@gmail.com. Please do not share this link
with anyone else.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:owner><itunes:name>Brandon Williams &amp; Stephen Celis</itunes:name><itunes:email>support@pointfree.co</itunes:email></itunes:owner><itunes:type>episodic</itunes:type><itunes:keywords>programming,development,mobile,ios,functional,swift,apple,developer,software engineering,server,app</itunes:keywords><itunes:image href="https://d3rccdn33rt8ze.cloudfront.net/social-assets/pf-avatar-square.jpg"></itunes:image><itunes:category text="Technology"><itunes:category>Software How-To</itunes:category></itunes:category><itunes:category text="Education"><itunes:category>Training</itunes:category></itunes:category><item><title>Modern Persistence: Reminders Detail, Part 2</title><pubDate>Mon, 02 Jun 2025 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep327-modern-persistence-reminders-detail-part-2</link><guid>https://www.pointfree.co/episodes/ep327-modern-persistence-reminders-detail-part-2</guid><description>How does our SQL-based solution for persistence compare with modern SwiftData? We put things to the test by rebuilding our complex `@FetchAll` query using `@Model` and the `@Query` macro!</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>How does our SQL-based solution for persistence compare with modern SwiftData? We put things to the test by rebuilding our complex `@FetchAll` query using `@Model` and the `@Query` macro!</itunes:subtitle><itunes:summary>How does our SQL-based solution for persistence compare with modern SwiftData? We put things to the test by rebuilding our complex `@FetchAll` query using `@Model` and the `@Query` macro!</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>01:16:11</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0327.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>327</itunes:episode><itunes:title>Modern Persistence: Reminders Detail, Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0327-1080p-ab4483f861cd4fbaa432f810f9eb622d.mp4" length="411500000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0327-1080p-ab4483f861cd4fbaa432f810f9eb622d.mp4" length="411500000" type="video/mp4" medium="video"><media:title>Modern Persistence: Reminders Detail, Part 2</media:title></media:content></item><item><title>Modern Persistence: Reminders Detail, Part 1</title><pubDate>Mon, 26 May 2025 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep326-modern-persistence-reminders-detail-part-1</link><guid>https://www.pointfree.co/episodes/ep326-modern-persistence-reminders-detail-part-1</guid><description>We begin building the "reminders" part of Apple's Reminders app, including listing, creating, updating, and deleting them. We will also add persistent filters and sorts, per list, all powered by a complex, dynamic query.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We begin building the "reminders" part of Apple's Reminders app, including listing, creating, updating, and deleting them. We will also add persistent filters and sorts, per list, all powered by a complex, dynamic query.</itunes:subtitle><itunes:summary>We begin building the "reminders" part of Apple's Reminders app, including listing, creating, updating, and deleting them. We will also add persistent filters and sorts, per list, all powered by a complex, dynamic query.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:51:11</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0326.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>326</itunes:episode><itunes:title>Modern Persistence: Reminders Detail, Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0326-720p-9aa0da11eab34e20924e3c238bbcd849.mp4" length="460900000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0326-720p-9aa0da11eab34e20924e3c238bbcd849.mp4" length="460900000" type="video/mp4" medium="video"><media:title>Modern Persistence: Reminders Detail, Part 1</media:title></media:content></item><item><title>Modern Persistence: Reminders Lists, Part 2</title><pubDate>Mon, 19 May 2025 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep325-modern-persistence-reminders-lists-part-2</link><guid>https://www.pointfree.co/episodes/ep325-modern-persistence-reminders-lists-part-2</guid><description>We flesh out the reminders lists feature using advanced queries that aggregate reminders counts and bundle results up into a custom type _via_ the `@Selection` macro. And we show how "drafts"—a unique feature of StructuredQueries—allow us to create and update values using the same view, all without sacrificing the preciseness of our domain model.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We flesh out the reminders lists feature using advanced queries that aggregate reminders counts and bundle results up into a custom type _via_ the `@Selection` macro. And we show how "drafts"—a unique feature of StructuredQueries—allow us to create and update values using the same view, all without sacrificing the preciseness of our domain model.</itunes:subtitle><itunes:summary>We flesh out the reminders lists feature using advanced queries that aggregate reminders counts and bundle results up into a custom type _via_ the `@Selection` macro. And we show how "drafts"—a unique feature of StructuredQueries—allow us to create and update values using the same view, all without sacrificing the preciseness of our domain model.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:46:56</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0325.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>325</itunes:episode><itunes:title>Modern Persistence: Reminders Lists, Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0325-720p-bfbee08b05744469aa8788b335628481.mp4" length="436000000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0325-720p-bfbee08b05744469aa8788b335628481.mp4" length="436000000" type="video/mp4" medium="video"><media:title>Modern Persistence: Reminders Lists, Part 2</media:title></media:content></item><item><title>Modern Persistence: Reminders Lists, Part 1</title><pubDate>Mon, 12 May 2025 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep324-modern-persistence-reminders-lists-part-1</link><guid>https://www.pointfree.co/episodes/ep324-modern-persistence-reminders-lists-part-1</guid><description>We tackle the first screen in our Reminders app rewrite: the reminders lists view. We will take the `@FetchAll` property wrapper for a spin, which is like SwiftData's `@Query` macro, but unlike `@Query` it can be used from both the view _and_ observable models. And we will even get some end-to-end, snapshot test coverage of our feature in place.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We tackle the first screen in our Reminders app rewrite: the reminders lists view. We will take the `@FetchAll` property wrapper for a spin, which is like SwiftData's `@Query` macro, but unlike `@Query` it can be used from both the view _and_ observable models. And we will even get some end-to-end, snapshot test coverage of our feature in place.</itunes:subtitle><itunes:summary>We tackle the first screen in our Reminders app rewrite: the reminders lists view. We will take the `@FetchAll` property wrapper for a spin, which is like SwiftData's `@Query` macro, but unlike `@Query` it can be used from both the view _and_ observable models. And we will even get some end-to-end, snapshot test coverage of our feature in place.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:44:10</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0324.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>324</itunes:episode><itunes:title>Modern Persistence: Reminders Lists, Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0324-720p-092a6690f76a4860872908d6cf730119.mp4" length="291300000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0324-720p-092a6690f76a4860872908d6cf730119.mp4" length="291300000" type="video/mp4" medium="video"><media:title>Modern Persistence: Reminders Lists, Part 1</media:title></media:content></item><item><title>Modern Persistence: Schemas</title><pubDate>Mon, 05 May 2025 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep323-modern-persistence-schemas</link><guid>https://www.pointfree.co/episodes/ep323-modern-persistence-schemas</guid><description>What are the best, modern practices for persisting your application's state? We explore the topic by rebuilding Apple's Reminders app from scratch using SQLite, the most widely deployed database in all software. We will start by designing the schema that models our domain.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>What are the best, modern practices for persisting your application's state? We explore the topic by rebuilding Apple's Reminders app from scratch using SQLite, the most widely deployed database in all software. We will start by designing the schema that models our domain.</itunes:subtitle><itunes:summary>What are the best, modern practices for persisting your application's state? We explore the topic by rebuilding Apple's Reminders app from scratch using SQLite, the most widely deployed database in all software. We will start by designing the schema that models our domain.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:57:10</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0323.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>323</itunes:episode><itunes:title>Modern Persistence: Schemas</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0323-720p-9fecabc2e6b9415d92c0f494107cd019.mp4" length="587300000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0323-720p-9fecabc2e6b9415d92c0f494107cd019.mp4" length="587300000" type="video/mp4" medium="video"><media:title>Modern Persistence: Schemas</media:title></media:content></item><item><title>SQL Builders: Advanced Joins</title><pubDate>Mon, 21 Apr 2025 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep322-sql-builders-advanced-joins</link><guid>https://www.pointfree.co/episodes/ep322-sql-builders-advanced-joins</guid><description>We close out our series on SQL query building with a library that can generate some seriously complex queries that select, join, group, aggregate, and filter data across tables. And we show how it can all play nicely with SQL strings by introducing a safe interface to SQL _via_ a custom string interpolation.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We close out our series on SQL query building with a library that can generate some seriously complex queries that select, join, group, aggregate, and filter data across tables. And we show how it can all play nicely with SQL strings by introducing a safe interface to SQL _via_ a custom string interpolation.</itunes:subtitle><itunes:summary>We close out our series on SQL query building with a library that can generate some seriously complex queries that select, join, group, aggregate, and filter data across tables. And we show how it can all play nicely with SQL strings by introducing a safe interface to SQL _via_ a custom string interpolation.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:33:04</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0322.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>322</itunes:episode><itunes:title>SQL Builders: Advanced Joins</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0322-720p-044601556f504ab4b122101a6a67f051.mp4" length="361800000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0322-720p-044601556f504ab4b122101a6a67f051.mp4" length="361800000" type="video/mp4" medium="video"><media:title>SQL Builders: Advanced Joins</media:title></media:content></item><item><title>SQL Builders: Joins in Swift</title><pubDate>Mon, 14 Apr 2025 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep321-sql-builders-joins-in-swift</link><guid>https://www.pointfree.co/episodes/ep321-sql-builders-joins-in-swift</guid><description>It’s time to support one of the most complicated parts of SQL in our query building library: joins. We will design an API that is simple to use but leverages some seriously advanced language features, including type-level parameter packs.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>It’s time to support one of the most complicated parts of SQL in our query building library: joins. We will design an API that is simple to use but leverages some seriously advanced language features, including type-level parameter packs.</itunes:subtitle><itunes:summary>It’s time to support one of the most complicated parts of SQL in our query building library: joins. We will design an API that is simple to use but leverages some seriously advanced language features, including type-level parameter packs.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:28:37</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0321.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>321</itunes:episode><itunes:title>SQL Builders: Joins in Swift</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0321-720p-e8834a53777f41f8964ff65528e1f3c6.mp4" length="260700000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0321-720p-e8834a53777f41f8964ff65528e1f3c6.mp4" length="260700000" type="video/mp4" medium="video"><media:title>SQL Builders: Joins in Swift</media:title></media:content></item><item><title>SQL Builders: Joins</title><pubDate>Mon, 07 Apr 2025 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep320-sql-builders-joins</link><guid>https://www.pointfree.co/episodes/ep320-sql-builders-joins</guid><description>We dive into the "relational" part of relational databases by learning how tables can
reference one another, the various ways queries can join these relations together, and even
how to aggregate nuanced data across these relations, all without ever hopping over to Xcode.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We dive into the "relational" part of relational databases by learning how tables can
reference one another, the various ways queries can join these relations together, and even
how to aggregate nuanced data across these relations, all without ever hopping over to Xcode.</itunes:subtitle><itunes:summary>We dive into the "relational" part of relational databases by learning how tables can
reference one another, the various ways queries can join these relations together, and even
how to aggregate nuanced data across these relations, all without ever hopping over to Xcode.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:49:21</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0320.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>320</itunes:episode><itunes:title>SQL Builders: Joins</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0320-720p-b8d02d57d7824500a4cc5dd1b3b6ea9c.mp4" length="404500000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0320-720p-b8d02d57d7824500a4cc5dd1b3b6ea9c.mp4" length="404500000" type="video/mp4" medium="video"><media:title>SQL Builders: Joins</media:title></media:content></item><item><title>SQL Builders: Filtering</title><pubDate>Mon, 31 Mar 2025 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep319-sql-builders-filtering</link><guid>https://www.pointfree.co/episodes/ep319-sql-builders-filtering</guid><description>We tackle one of SQL's most important aspects in our query builder: the `WHERE` clause, which filters the results of a query. And we will do so in a type-safe manner that prevents us from writing nonsensical queries in Swift even when they are syntactically valid in SQL.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We tackle one of SQL's most important aspects in our query builder: the `WHERE` clause, which filters the results of a query. And we will do so in a type-safe manner that prevents us from writing nonsensical queries in Swift even when they are syntactically valid in SQL.</itunes:subtitle><itunes:summary>We tackle one of SQL's most important aspects in our query builder: the `WHERE` clause, which filters the results of a query. And we will do so in a type-safe manner that prevents us from writing nonsensical queries in Swift even when they are syntactically valid in SQL.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:44:17</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0319.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>319</itunes:episode><itunes:title>SQL Builders: Filtering</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0319-720p-79a238cb00bf4f7095d061409a8e76c7.mp4" length="504400000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0319-720p-79a238cb00bf4f7095d061409a8e76c7.mp4" length="504400000" type="video/mp4" medium="video"><media:title>SQL Builders: Filtering</media:title></media:content></item><item><title>SQL Builders: Order</title><pubDate>Mon, 24 Mar 2025 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep318-sql-builders-order</link><guid>https://www.pointfree.co/episodes/ep318-sql-builders-order</guid><description>We add sorting to our SQL builder, which will give us a powerful, succinct syntax for controlling the order of results. We will start small but build up to parameter packs and even a custom result builder to get the most flexibility out of our API.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We add sorting to our SQL builder, which will give us a powerful, succinct syntax for controlling the order of results. We will start small but build up to parameter packs and even a custom result builder to get the most flexibility out of our API.</itunes:subtitle><itunes:summary>We add sorting to our SQL builder, which will give us a powerful, succinct syntax for controlling the order of results. We will start small but build up to parameter packs and even a custom result builder to get the most flexibility out of our API.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:48:28</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0318.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>318</itunes:episode><itunes:title>SQL Builders: Order</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0318-720p-579a25e37946490ebee52debc98fd21c.mp4" length="487400000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0318-720p-579a25e37946490ebee52debc98fd21c.mp4" length="487400000" type="video/mp4" medium="video"><media:title>SQL Builders: Order</media:title></media:content></item><item><title>SQL Builders: Advanced Selects</title><pubDate>Mon, 17 Mar 2025 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep317-sql-builders-advanced-selects</link><guid>https://www.pointfree.co/episodes/ep317-sql-builders-advanced-selects</guid><description>We now have a type-safe syntax for generating `SELECT` statements using key paths to the
columns we want to select, but while this syntax is nice and what many existing
libraries use, we can do better. Let's introduce a more advanced syntax that leverages
variadic generics and supports more complex query expressions.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We now have a type-safe syntax for generating `SELECT` statements using key paths to the
columns we want to select, but while this syntax is nice and what many existing
libraries use, we can do better. Let's introduce a more advanced syntax that leverages
variadic generics and supports more complex query expressions.</itunes:subtitle><itunes:summary>We now have a type-safe syntax for generating `SELECT` statements using key paths to the
columns we want to select, but while this syntax is nice and what many existing
libraries use, we can do better. Let's introduce a more advanced syntax that leverages
variadic generics and supports more complex query expressions.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:28:44</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0317.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>317</itunes:episode><itunes:title>SQL Builders: Advanced Selects</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0317-720p-0a6bfc1b6980467abb053c051701eaec.mp4" length="276800000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0317-720p-0a6bfc1b6980467abb053c051701eaec.mp4" length="276800000" type="video/mp4" medium="video"><media:title>SQL Builders: Advanced Selects</media:title></media:content></item><item><title>SQL Builders: Selects</title><pubDate>Mon, 10 Mar 2025 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep316-sql-builders-selects</link><guid>https://www.pointfree.co/episodes/ep316-sql-builders-selects</guid><description>We begin to build a type-safe SQL query builder from scratch by familiarizing ourselves
with the `SELECT` statement. We will explore the SQLite documentation to understand the
syntax, introduce a type that can generate valid statements, and write powerful inline
snapshot tests for their output.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We begin to build a type-safe SQL query builder from scratch by familiarizing ourselves
with the `SELECT` statement. We will explore the SQLite documentation to understand the
syntax, introduce a type that can generate valid statements, and write powerful inline
snapshot tests for their output.</itunes:subtitle><itunes:summary>We begin to build a type-safe SQL query builder from scratch by familiarizing ourselves
with the `SELECT` statement. We will explore the SQLite documentation to understand the
syntax, introduce a type that can generate valid statements, and write powerful inline
snapshot tests for their output.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:44:49</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0316.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>316</itunes:episode><itunes:title>SQL Builders: Selects</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0316-720p-09a08efe28024d268929cdd76c741e00.mp4" length="333300000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0316-720p-09a08efe28024d268929cdd76c741e00.mp4" length="333300000" type="video/mp4" medium="video"><media:title>SQL Builders: Selects</media:title></media:content></item><item><title>SQL Builders: Sneak Peek, Part 2</title><pubDate>Mon, 03 Mar 2025 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep315-sql-builders-sneak-peek-part-2</link><guid>https://www.pointfree.co/episodes/ep315-sql-builders-sneak-peek-part-2</guid><description>We finish a sneak peek of our upcoming Structured Queries library by showing how queries built
with the library can be reused and composed together, and how we can replace all of the
raw queries in our application with simpler, safer query builders.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We finish a sneak peek of our upcoming Structured Queries library by showing how queries built
with the library can be reused and composed together, and how we can replace all of the
raw queries in our application with simpler, safer query builders.</itunes:subtitle><itunes:summary>We finish a sneak peek of our upcoming Structured Queries library by showing how queries built
with the library can be reused and composed together, and how we can replace all of the
raw queries in our application with simpler, safer query builders.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:42:47</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0315.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>315</itunes:episode><itunes:title>SQL Builders: Sneak Peek, Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0315-720p-7e888c17785e499a9a18bf01aacb1df0.mp4" length="371700000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0315-720p-7e888c17785e499a9a18bf01aacb1df0.mp4" length="371700000" type="video/mp4" medium="video"><media:title>SQL Builders: Sneak Peek, Part 2</media:title></media:content></item><item><title>SQL Builders: Sneak Peek, Part 1</title><pubDate>Mon, 24 Feb 2025 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep314-sql-builders-sneak-peek-part-1</link><guid>https://www.pointfree.co/episodes/ep314-sql-builders-sneak-peek-part-1</guid><description>Last week we released SharingGRDB, an alternative to SwiftData powered by SQLite, but there are a few improvements we could make. Let's take a look at some problems with the current tools before giving a sneak peek at the solution: a powerful new query building library that leverages many advanced Swift features that we will soon build from scratch.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Last week we released SharingGRDB, an alternative to SwiftData powered by SQLite, but there are a few improvements we could make. Let's take a look at some problems with the current tools before giving a sneak peek at the solution: a powerful new query building library that leverages many advanced Swift features that we will soon build from scratch.</itunes:subtitle><itunes:summary>Last week we released SharingGRDB, an alternative to SwiftData powered by SQLite, but there are a few improvements we could make. Let's take a look at some problems with the current tools before giving a sneak peek at the solution: a powerful new query building library that leverages many advanced Swift features that we will soon build from scratch.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:40:14</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0314.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>314</itunes:episode><itunes:title>SQL Builders: Sneak Peek, Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0314-720p-1e1952512b004373965df4304b7d6fd2.mp4" length="397800000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0314-720p-1e1952512b004373965df4304b7d6fd2.mp4" length="397800000" type="video/mp4" medium="video"><media:title>SQL Builders: Sneak Peek, Part 1</media:title></media:content></item><item><title>Point-Free Live: SharingGRDB</title><pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep313-point-free-live-sharinggrdb</link><guid>https://www.pointfree.co/episodes/ep313-point-free-live-sharinggrdb</guid><description>We celebrate 7 years with a live stream! We discuss some recent updates around our popular [Sharing](http://github.com/pointfreeco/swift-sharing) library; open source [SharingGRDB](http://github.com/pointfreeco/sharing-grdb) live, which is a new lightweight alternative to SwiftData that is powered by Sharing and [GRDB](http://github.com/groue/GRDB.swift); and we give a sneak peek of an upcoming series and library.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We celebrate 7 years with a live stream! We discuss some recent updates around our popular [Sharing](http://github.com/pointfreeco/swift-sharing) library; open source [SharingGRDB](http://github.com/pointfreeco/sharing-grdb) live, which is a new lightweight alternative to SwiftData that is powered by Sharing and [GRDB](http://github.com/groue/GRDB.swift); and we give a sneak peek of an upcoming series and library.</itunes:subtitle><itunes:summary>We celebrate 7 years with a live stream! We discuss some recent updates around our popular [Sharing](http://github.com/pointfreeco/swift-sharing) library; open source [SharingGRDB](http://github.com/pointfreeco/sharing-grdb) live, which is a new lightweight alternative to SwiftData that is powered by Sharing and [GRDB](http://github.com/groue/GRDB.swift); and we give a sneak peek of an upcoming series and library.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>02:03:53</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0313.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>313</itunes:episode><itunes:title>Point-Free Live: SharingGRDB</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0313-720p-f752914b27194825afd206449b0a9aec.mp4" length="1300000000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0313-720p-f752914b27194825afd206449b0a9aec.mp4" length="1300000000" type="video/mp4" medium="video"><media:title>Point-Free Live: SharingGRDB</media:title></media:content></item><item><title>Sharing with SQLite: Dynamic Queries</title><pubDate>Mon, 03 Feb 2025 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep312-sharing-with-sqlite-dynamic-queries</link><guid>https://www.pointfree.co/episodes/ep312-sharing-with-sqlite-dynamic-queries</guid><description>We are now driving several features using SQLite using a simple property wrapper that offers the same ergonomics as Swift Data's `@Query` macro, and automatically keeps the view in sync with the database. Let's add one more feature to leverage _dynamic_ queries by allowing the user to change how the data is sorted.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We are now driving several features using SQLite using a simple property wrapper that offers the same ergonomics as Swift Data's `@Query` macro, and automatically keeps the view in sync with the database. Let's add one more feature to leverage _dynamic_ queries by allowing the user to change how the data is sorted.</itunes:subtitle><itunes:summary>We are now driving several features using SQLite using a simple property wrapper that offers the same ergonomics as Swift Data's `@Query` macro, and automatically keeps the view in sync with the database. Let's add one more feature to leverage _dynamic_ queries by allowing the user to change how the data is sorted.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:39:03</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0312.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>312</itunes:episode><itunes:title>Sharing with SQLite: Dynamic Queries</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0312-720p-bd4159d6edc845fabde860cb0a7a1487.mp4" length="482500000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0312-720p-bd4159d6edc845fabde860cb0a7a1487.mp4" length="482500000" type="video/mp4" medium="video"><media:title>Sharing with SQLite: Dynamic Queries</media:title></media:content></item><item><title>Sharing with SQLite: Advanced Queries</title><pubDate>Mon, 27 Jan 2025 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep311-sharing-with-sqlite-advanced-queries</link><guid>https://www.pointfree.co/episodes/ep311-sharing-with-sqlite-advanced-queries</guid><description>Let's leverage our new `@Shared` SQLite strategy by adding a brand new feature: archiving. We will see how easy it is to incorporate queries directly into a SwiftUI view, and we will expand our tools to support even more kinds of queries.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let's leverage our new `@Shared` SQLite strategy by adding a brand new feature: archiving. We will see how easy it is to incorporate queries directly into a SwiftUI view, and we will expand our tools to support even more kinds of queries.</itunes:subtitle><itunes:summary>Let's leverage our new `@Shared` SQLite strategy by adding a brand new feature: archiving. We will see how easy it is to incorporate queries directly into a SwiftUI view, and we will expand our tools to support even more kinds of queries.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:27:55</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0311.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>311</itunes:episode><itunes:title>Sharing with SQLite: Advanced Queries</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0311-720p-9d30dac786864b93a2601d55d9a2932b.mp4" length="312700000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0311-720p-9d30dac786864b93a2601d55d9a2932b.mp4" length="312700000" type="video/mp4" medium="video"><media:title>Sharing with SQLite: Advanced Queries</media:title></media:content></item><item><title>Sharing with SQLite: The Solution</title><pubDate>Mon, 20 Jan 2025 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep310-sharing-with-sqlite-the-solution</link><guid>https://www.pointfree.co/episodes/ep310-sharing-with-sqlite-the-solution</guid><description>SQLite offers a lot of power and flexibility over a simple JSON file, but it also requires a lot of boilerplate to get working. But we can hide away all that boilerplate using the `@Shared` property wrapper and end up with something that is arguably nicer than Swift Data's `@Query` macro!</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>SQLite offers a lot of power and flexibility over a simple JSON file, but it also requires a lot of boilerplate to get working. But we can hide away all that boilerplate using the `@Shared` property wrapper and end up with something that is arguably nicer than Swift Data's `@Query` macro!</itunes:subtitle><itunes:summary>SQLite offers a lot of power and flexibility over a simple JSON file, but it also requires a lot of boilerplate to get working. But we can hide away all that boilerplate using the `@Shared` property wrapper and end up with something that is arguably nicer than Swift Data's `@Query` macro!</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:45:47</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0310.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>310</itunes:episode><itunes:title>Sharing with SQLite: The Solution</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0310-720p-6e2beef622514a5589eba306505fc304.mp4" length="441600000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0310-720p-6e2beef622514a5589eba306505fc304.mp4" length="441600000" type="video/mp4" medium="video"><media:title>Sharing with SQLite: The Solution</media:title></media:content></item><item><title>Sharing with SQLite: The Problems</title><pubDate>Mon, 13 Jan 2025 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep309-sharing-with-sqlite-the-problems</link><guid>https://www.pointfree.co/episodes/ep309-sharing-with-sqlite-the-problems</guid><description>Persisting app state to user defaults or a JSON file is simple and convenient, but it starts to break down when you need to present this data in more complex ways, and this is where SQLite really shines. Let's get a handle on the problem with some state that is currently persisted to a JSON file, and let's see how SQLite fixes it.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Persisting app state to user defaults or a JSON file is simple and convenient, but it starts to break down when you need to present this data in more complex ways, and this is where SQLite really shines. Let's get a handle on the problem with some state that is currently persisted to a JSON file, and let's see how SQLite fixes it.</itunes:subtitle><itunes:summary>Persisting app state to user defaults or a JSON file is simple and convenient, but it starts to break down when you need to present this data in more complex ways, and this is where SQLite really shines. Let's get a handle on the problem with some state that is currently persisted to a JSON file, and let's see how SQLite fixes it.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:45:59</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0309.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>309</itunes:episode><itunes:title>Sharing with SQLite: The Problems</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0309-720p-8221b2e9919547388f598f0a33556c67.mp4" length="406500000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0309-720p-8221b2e9919547388f598f0a33556c67.mp4" length="406500000" type="video/mp4" medium="video"><media:title>Sharing with SQLite: The Problems</media:title></media:content></item><item><title>Tour of Sharing: File Storage: Part 2</title><pubDate>Wed, 18 Dec 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep308-tour-of-sharing-file-storage-part-2</link><guid>https://www.pointfree.co/episodes/ep308-tour-of-sharing-file-storage-part-2</guid><description>We close out our tour of the Sharing library by showing how easy it is to test code that uses
the `@Shared` property wrapper without worrying about values bleeding between tests and the
simulator. And we'll take the "in-memory" shared key for a spin by building one final feature.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We close out our tour of the Sharing library by showing how easy it is to test code that uses
the `@Shared` property wrapper without worrying about values bleeding between tests and the
simulator. And we'll take the "in-memory" shared key for a spin by building one final feature.</itunes:subtitle><itunes:summary>We close out our tour of the Sharing library by showing how easy it is to test code that uses
the `@Shared` property wrapper without worrying about values bleeding between tests and the
simulator. And we'll take the "in-memory" shared key for a spin by building one final feature.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:28:37</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0308.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>308</itunes:episode><itunes:title>Tour of Sharing: File Storage: Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0308-720p-3a279b4e2b1b42db871584d41ffae659.mp4" length="354400000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0308-720p-3a279b4e2b1b42db871584d41ffae659.mp4" length="354400000" type="video/mp4" medium="video"><media:title>Tour of Sharing: File Storage: Part 2</media:title></media:content></item><item><title>Tour of Sharing: File Storage: Part 1</title><pubDate>Mon, 16 Dec 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep307-tour-of-sharing-file-storage-part-1</link><guid>https://www.pointfree.co/episodes/ep307-tour-of-sharing-file-storage-part-1</guid><description>`@Shared` is far more than a glorified version of `@AppStorage`: it can be customized with additional persistence strategies, including the file storage strategy that comes with the library, which persists far more complex data than user defaults. We will create a complex, new feature that is powered by the file system.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>`@Shared` is far more than a glorified version of `@AppStorage`: it can be customized with additional persistence strategies, including the file storage strategy that comes with the library, which persists far more complex data than user defaults. We will create a complex, new feature that is powered by the file system.</itunes:subtitle><itunes:summary>`@Shared` is far more than a glorified version of `@AppStorage`: it can be customized with additional persistence strategies, including the file storage strategy that comes with the library, which persists far more complex data than user defaults. We will create a complex, new feature that is powered by the file system.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:39:46</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0307.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>307</itunes:episode><itunes:title>Tour of Sharing: File Storage: Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0307-720p-2cfa6f8fe0b444b2bbc3392c303f59a8.mp4" length="326000000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0307-720p-2cfa6f8fe0b444b2bbc3392c303f59a8.mp4" length="326000000" type="video/mp4" medium="video"><media:title>Tour of Sharing: File Storage: Part 1</media:title></media:content></item><item><title>Tour of Sharing: App Storage, Part 2</title><pubDate>Mon, 09 Dec 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep306-tour-of-sharing-app-storage-part-2</link><guid>https://www.pointfree.co/episodes/ep306-tour-of-sharing-app-storage-part-2</guid><description>We show how the `@Shared` property wrapper, unlike `@AppStorage`, can be used _anywhere_, not just SwiftUI views. And we show how `@Shared` has some extra bells and whistles that make it easier to write maintainable Xcode previews and avoid potential bugs around "string-ly" typed keys and default values.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We show how the `@Shared` property wrapper, unlike `@AppStorage`, can be used _anywhere_, not just SwiftUI views. And we show how `@Shared` has some extra bells and whistles that make it easier to write maintainable Xcode previews and avoid potential bugs around "string-ly" typed keys and default values.</itunes:subtitle><itunes:summary>We show how the `@Shared` property wrapper, unlike `@AppStorage`, can be used _anywhere_, not just SwiftUI views. And we show how `@Shared` has some extra bells and whistles that make it easier to write maintainable Xcode previews and avoid potential bugs around "string-ly" typed keys and default values.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:26:34</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0306.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>306</itunes:episode><itunes:title>Tour of Sharing: App Storage, Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0306-720p-1e939c4957b94df595b0e39455ff749f.mp4" length="280900000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0306-720p-1e939c4957b94df595b0e39455ff749f.mp4" length="280900000" type="video/mp4" medium="video"><media:title>Tour of Sharing: App Storage, Part 2</media:title></media:content></item><item><title>Tour of Sharing: App Storage, Part 1</title><pubDate>Mon, 02 Dec 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep305-tour-of-sharing-app-storage-part-1</link><guid>https://www.pointfree.co/episodes/ep305-tour-of-sharing-app-storage-part-1</guid><description>"Sharing" is a brand new library for sharing state throughout your application and to external systems like user defaults, the file system, and more. We start our tour of the library by comparing it to a tool that inspired its design: SwiftUI's `@AppStorage`.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>"Sharing" is a brand new library for sharing state throughout your application and to external systems like user defaults, the file system, and more. We start our tour of the library by comparing it to a tool that inspired its design: SwiftUI's `@AppStorage`.</itunes:subtitle><itunes:summary>"Sharing" is a brand new library for sharing state throughout your application and to external systems like user defaults, the file system, and more. We start our tour of the library by comparing it to a tool that inspired its design: SwiftUI's `@AppStorage`.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:38:03</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0305.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>305</itunes:episode><itunes:title>Tour of Sharing: App Storage, Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0305-720p-6725d40fc71f4609a376152eefb289e4.mp4" length="401600000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0305-720p-6725d40fc71f4609a376152eefb289e4.mp4" length="401600000" type="video/mp4" medium="video"><media:title>Tour of Sharing: App Storage, Part 1</media:title></media:content></item><item><title>SQLite: Observation</title><pubDate>Mon, 25 Nov 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep304-sqlite-observation</link><guid>https://www.pointfree.co/episodes/ep304-sqlite-observation</guid><description>We conclude our introductory series on SQLite by showing how to live update SwiftUI views
powered by database using GRDB's "value observation." Along the way we will tackle quite a few
Swift 6 concurrency issues, and we will tie things in a bow by showing how the SwiftUI
environment can vastly simplify how our application is powered by SQLite.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We conclude our introductory series on SQLite by showing how to live update SwiftUI views
powered by database using GRDB's "value observation." Along the way we will tackle quite a few
Swift 6 concurrency issues, and we will tie things in a bow by showing how the SwiftUI
environment can vastly simplify how our application is powered by SQLite.</itunes:subtitle><itunes:summary>We conclude our introductory series on SQLite by showing how to live update SwiftUI views
powered by database using GRDB's "value observation." Along the way we will tackle quite a few
Swift 6 concurrency issues, and we will tie things in a bow by showing how the SwiftUI
environment can vastly simplify how our application is powered by SQLite.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:36:13</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0304.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>304</itunes:episode><itunes:title>SQLite: Observation</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0304-720p-dcf581d423754711bb7abe074fa7dc9e.mp4" length="273200000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0304-720p-dcf581d423754711bb7abe074fa7dc9e.mp4" length="273200000" type="video/mp4" medium="video"><media:title>SQLite: Observation</media:title></media:content></item><item><title>SQLite: SwiftUI</title><pubDate>Mon, 18 Nov 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep303-sqlite-swiftui</link><guid>https://www.pointfree.co/episodes/ep303-sqlite-swiftui</guid><description>Let’s see how to integrate a SQLite database into a SwiftUI view. We will explore the tools
GRDB provides to query the database so that we can display its data in our UI, as well as
build and enforce table relations to protect the integrity of our app's state. And we will
show how everything can be exercised in Xcode previews.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let’s see how to integrate a SQLite database into a SwiftUI view. We will explore the tools
GRDB provides to query the database so that we can display its data in our UI, as well as
build and enforce table relations to protect the integrity of our app's state. And we will
show how everything can be exercised in Xcode previews.</itunes:subtitle><itunes:summary>Let’s see how to integrate a SQLite database into a SwiftUI view. We will explore the tools
GRDB provides to query the database so that we can display its data in our UI, as well as
build and enforce table relations to protect the integrity of our app's state. And we will
show how everything can be exercised in Xcode previews.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:36:13</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0303.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>303</itunes:episode><itunes:title>SQLite: SwiftUI</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0303-720p-9925de337d8d4d69a0da19af7b5b85c9.mp4" length="361600000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0303-720p-9925de337d8d4d69a0da19af7b5b85c9.mp4" length="361600000" type="video/mp4" medium="video"><media:title>SQLite: SwiftUI</media:title></media:content></item><item><title>SQLite: GRDB</title><pubDate>Mon, 11 Nov 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep302-sqlite-grdb</link><guid>https://www.pointfree.co/episodes/ep302-sqlite-grdb</guid><description>Interfacing with SQLite's C library from Swift is possible, but clunky. Luckily there are
friendlier, "Swiftier" interfaces the community has built, so let's take a look at the most
popular: GRDB. We'll explore how it can help us avoid pitfalls and boilerplate required to use
the C library, and how its typed SQL helpers can even help us avoid runtime issues at compile
time.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Interfacing with SQLite's C library from Swift is possible, but clunky. Luckily there are
friendlier, "Swiftier" interfaces the community has built, so let's take a look at the most
popular: GRDB. We'll explore how it can help us avoid pitfalls and boilerplate required to use
the C library, and how its typed SQL helpers can even help us avoid runtime issues at compile
time.</itunes:subtitle><itunes:summary>Interfacing with SQLite's C library from Swift is possible, but clunky. Luckily there are
friendlier, "Swiftier" interfaces the community has built, so let's take a look at the most
popular: GRDB. We'll explore how it can help us avoid pitfalls and boilerplate required to use
the C library, and how its typed SQL helpers can even help us avoid runtime issues at compile
time.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:35:23</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0302.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>302</itunes:episode><itunes:title>SQLite: GRDB</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0302-720p-4a7f337cfc2c4470803d5ceb589ecd90.mp4" length="297800000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0302-720p-4a7f337cfc2c4470803d5ceb589ecd90.mp4" length="297800000" type="video/mp4" medium="video"><media:title>SQLite: GRDB</media:title></media:content></item><item><title>SQLite: The C Library</title><pubDate>Mon, 04 Nov 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep301-sqlite-the-c-library</link><guid>https://www.pointfree.co/episodes/ep301-sqlite-the-c-library</guid><description>SQLite is one of the most well-crafted, battle-tested, widely-deployed pieces of software in history, and it's a great fit for apps with more complex persistence needs than user defaults or a JSON file. Let's get familiar with the library, starting with a crash course in interacting with C code from Swift.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>SQLite is one of the most well-crafted, battle-tested, widely-deployed pieces of software in history, and it's a great fit for apps with more complex persistence needs than user defaults or a JSON file. Let's get familiar with the library, starting with a crash course in interacting with C code from Swift.</itunes:subtitle><itunes:summary>SQLite is one of the most well-crafted, battle-tested, widely-deployed pieces of software in history, and it's a great fit for apps with more complex persistence needs than user defaults or a JSON file. Let's get familiar with the library, starting with a crash course in interacting with C code from Swift.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:36:13</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0301.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>301</itunes:episode><itunes:title>SQLite: The C Library</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0301-720p-ca712e2b911c4c77b2e199dfb8b03fff.mp4" length="357900000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0301-720p-ca712e2b911c4c77b2e199dfb8b03fff.mp4" length="357900000" type="video/mp4" medium="video"><media:title>SQLite: The C Library</media:title></media:content></item><item><title>Back to Basics: Advanced Hashable</title><pubDate>Mon, 28 Oct 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep300-back-to-basics-advanced-hashable</link><guid>https://www.pointfree.co/episodes/ep300-back-to-basics-advanced-hashable</guid><description>We zoom out a bit to get a greater appreciation for how `Equatable` and `Hashable` are used throughout the greater language and ecosystem, including actors, standard library types, SwiftUI, and more.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We zoom out a bit to get a greater appreciation for how `Equatable` and `Hashable` are used throughout the greater language and ecosystem, including actors, standard library types, SwiftUI, and more.</itunes:subtitle><itunes:summary>We zoom out a bit to get a greater appreciation for how `Equatable` and `Hashable` are used throughout the greater language and ecosystem, including actors, standard library types, SwiftUI, and more.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:40:53</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0300.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>300</itunes:episode><itunes:title>Back to Basics: Advanced Hashable</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0300-720p-838ab70fa87c42b59a824733b3856906.mp4" length="360400000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0300-720p-838ab70fa87c42b59a824733b3856906.mp4" length="360400000" type="video/mp4" medium="video"><media:title>Back to Basics: Advanced Hashable</media:title></media:content></item><item><title>Back to Basics: Hashable References</title><pubDate>Mon, 21 Oct 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep299-back-to-basics-hashable-references</link><guid>https://www.pointfree.co/episodes/ep299-back-to-basics-hashable-references</guid><description>We've studied `Equatable` and `Hashable`, their laws, and saw how value types as simple bags of data easily conform via "structural" equality. What about reference types? Reference types are an amalgamation of data _and_ behavior, and that data can be mutated in place at any time, so how can they reasonably conform to these protocols?</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We've studied `Equatable` and `Hashable`, their laws, and saw how value types as simple bags of data easily conform via "structural" equality. What about reference types? Reference types are an amalgamation of data _and_ behavior, and that data can be mutated in place at any time, so how can they reasonably conform to these protocols?</itunes:subtitle><itunes:summary>We've studied `Equatable` and `Hashable`, their laws, and saw how value types as simple bags of data easily conform via "structural" equality. What about reference types? Reference types are an amalgamation of data _and_ behavior, and that data can be mutated in place at any time, so how can they reasonably conform to these protocols?</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:32:42</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0299.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>299</itunes:episode><itunes:title>Back to Basics: Hashable References</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0299-720p-2d4d244f65284247b9915585fbd2475d.mp4" length="315000000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0299-720p-2d4d244f65284247b9915585fbd2475d.mp4" length="315000000" type="video/mp4" medium="video"><media:title>Back to Basics: Hashable References</media:title></media:content></item><item><title>Back to Basics: Hashable</title><pubDate>Mon, 14 Oct 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep298-back-to-basics-hashable</link><guid>https://www.pointfree.co/episodes/ep298-back-to-basics-hashable</guid><description>While the documentation for `Equatable` discusses the notions of "equivalence relation" _and_ "substitutability", there are conformances in the Standard Library that run afoul, but for pragmatic reasons. Let’s explore them and then dive deeper into a related protocol: `Hashable`.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>While the documentation for `Equatable` discusses the notions of "equivalence relation" _and_ "substitutability", there are conformances in the Standard Library that run afoul, but for pragmatic reasons. Let’s explore them and then dive deeper into a related protocol: `Hashable`.</itunes:subtitle><itunes:summary>While the documentation for `Equatable` discusses the notions of "equivalence relation" _and_ "substitutability", there are conformances in the Standard Library that run afoul, but for pragmatic reasons. Let’s explore them and then dive deeper into a related protocol: `Hashable`.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:39:49</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0298.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>298</itunes:episode><itunes:title>Back to Basics: Hashable</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0298-720p-6c435115dd6f4c9a815288a4ac67e2d9.mp4" length="415900000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0298-720p-6c435115dd6f4c9a815288a4ac67e2d9.mp4" length="415900000" type="video/mp4" medium="video"><media:title>Back to Basics: Hashable</media:title></media:content></item><item><title>Back to Basics: Equatable</title><pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep297-back-to-basics-equatable</link><guid>https://www.pointfree.co/episodes/ep297-back-to-basics-equatable</guid><description>In this series we go back to basics with a deep dive into the subject of `Equatable` types. Equatability is a deceptively simple topic. It is a surprisingly tricky protocol that has some very specific semantics that must be upheld baked into it, and there are many misconceptions on how one can or should conform types to this protocol.     </description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>In this series we go back to basics with a deep dive into the subject of `Equatable` types. Equatability is a deceptively simple topic. It is a surprisingly tricky protocol that has some very specific semantics that must be upheld baked into it, and there are many misconceptions on how one can or should conform types to this protocol.     </itunes:subtitle><itunes:summary>In this series we go back to basics with a deep dive into the subject of `Equatable` types. Equatability is a deceptively simple topic. It is a surprisingly tricky protocol that has some very specific semantics that must be upheld baked into it, and there are many misconceptions on how one can or should conform types to this protocol.     </itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:29:23</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0297.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>297</itunes:episode><itunes:title>Back to Basics: Equatable</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0297-720p-1f53bee7306a4645a1745da8c598fd8c.mp4" length="280400000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0297-720p-1f53bee7306a4645a1745da8c598fd8c.mp4" length="280400000" type="video/mp4" medium="video"><media:title>Back to Basics: Equatable</media:title></media:content></item><item><title>Cross-Platform Swift: Persistence</title><pubDate>Mon, 23 Sep 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep296-cross-platform-swift-persistence</link><guid>https://www.pointfree.co/episodes/ep296-cross-platform-swift-persistence</guid><description>We round out our series with one more feature: the ability for our users to manage a list of their favorite facts. It will allow us to explore a complex side effect, persistence, and show how the same Swift code can save and load data across iOS app launches _and_ web page refreshes.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We round out our series with one more feature: the ability for our users to manage a list of their favorite facts. It will allow us to explore a complex side effect, persistence, and show how the same Swift code can save and load data across iOS app launches _and_ web page refreshes.</itunes:subtitle><itunes:summary>We round out our series with one more feature: the ability for our users to manage a list of their favorite facts. It will allow us to explore a complex side effect, persistence, and show how the same Swift code can save and load data across iOS app launches _and_ web page refreshes.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:53:01</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0296.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>296</itunes:episode><itunes:title>Cross-Platform Swift: Persistence</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0296-720p-2ce22049276a4f848ab7b13ca1e29313.mp4" length="528700000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0296-720p-2ce22049276a4f848ab7b13ca1e29313.mp4" length="528700000" type="video/mp4" medium="video"><media:title>Cross-Platform Swift: Persistence</media:title></media:content></item><item><title>Cross-Platform Swift: New Features</title><pubDate>Mon, 16 Sep 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep295-cross-platform-swift-new-features</link><guid>https://www.pointfree.co/episodes/ep295-cross-platform-swift-new-features</guid><description>We've already covered a lot of ground and could have ended the series last week, but let's do a few more things to show just how powerful cross-platform domain modeling can be by adding a _new_ feature to our cross-platform application and see just how easy it is to integrate with SwiftUI, UIKit, _and_ WebAssembly.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We've already covered a lot of ground and could have ended the series last week, but let's do a few more things to show just how powerful cross-platform domain modeling can be by adding a _new_ feature to our cross-platform application and see just how easy it is to integrate with SwiftUI, UIKit, _and_ WebAssembly.</itunes:subtitle><itunes:summary>We've already covered a lot of ground and could have ended the series last week, but let's do a few more things to show just how powerful cross-platform domain modeling can be by adding a _new_ feature to our cross-platform application and see just how easy it is to integrate with SwiftUI, UIKit, _and_ WebAssembly.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:27:03</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0295.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>295</itunes:episode><itunes:title>Cross-Platform Swift: New Features</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0295-720p-9673f2d7870d444c9fc517cabfcd537d.mp4" length="292700000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0295-720p-9673f2d7870d444c9fc517cabfcd537d.mp4" length="292700000" type="video/mp4" medium="video"><media:title>Cross-Platform Swift: New Features</media:title></media:content></item><item><title>Cross-Platform Swift: UI Controls</title><pubDate>Mon, 09 Sep 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep294-cross-platform-swift-ui-controls</link><guid>https://www.pointfree.co/episodes/ep294-cross-platform-swift-ui-controls</guid><description>We will introduce UI controls and focus logic to our SwiftWasm application by leveraging a
binding type inspired by SwiftUI, and we will see how similar even our view logic can look
across many platforms.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We will introduce UI controls and focus logic to our SwiftWasm application by leveraging a
binding type inspired by SwiftUI, and we will see how similar even our view logic can look
across many platforms.</itunes:subtitle><itunes:summary>We will introduce UI controls and focus logic to our SwiftWasm application by leveraging a
binding type inspired by SwiftUI, and we will see how similar even our view logic can look
across many platforms.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:36:16</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0294.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>294</itunes:episode><itunes:title>Cross-Platform Swift: UI Controls</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0294-720p-2869c53c61c84893ab7dff95310eabb0.mp4" length="319000000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0294-720p-2869c53c61c84893ab7dff95310eabb0.mp4" length="319000000" type="video/mp4" medium="video"><media:title>Cross-Platform Swift: UI Controls</media:title></media:content></item><item><title>Cross-Platform Swift: Navigation</title><pubDate>Mon, 02 Sep 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep293-cross-platform-swift-navigation</link><guid>https://www.pointfree.co/episodes/ep293-cross-platform-swift-navigation</guid><description>We will introduce navigation APIs to our Wasm application, starting simply with an alert before ramping things up with a `dialog` tag that can be fully configurable from a value type that represents its state and actions.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We will introduce navigation APIs to our Wasm application, starting simply with an alert before ramping things up with a `dialog` tag that can be fully configurable from a value type that represents its state and actions.</itunes:subtitle><itunes:summary>We will introduce navigation APIs to our Wasm application, starting simply with an alert before ramping things up with a `dialog` tag that can be fully configurable from a value type that represents its state and actions.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:40:36</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0293.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>293</itunes:episode><itunes:title>Cross-Platform Swift: Navigation</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0293-720p-9d03fdc572fc48d0bdf80ff25f3707f6.mp4" length="377000000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0293-720p-9d03fdc572fc48d0bdf80ff25f3707f6.mp4" length="377000000" type="video/mp4" medium="video"><media:title>Cross-Platform Swift: Navigation</media:title></media:content></item><item><title>Cross-Platform Swift: Networking</title><pubDate>Mon, 26 Aug 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep292-cross-platform-swift-networking</link><guid>https://www.pointfree.co/episodes/ep292-cross-platform-swift-networking</guid><description>Let's dial up the complexity of our Wasm application! We'll introduce some async logic in the form of a network request. We'll take steps to not only control this dependency, but we'll do so across both Apple and Wasm platforms, and we'll isolate its interface from its live implementation to speed up our builds and reduce our app's size.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let's dial up the complexity of our Wasm application! We'll introduce some async logic in the form of a network request. We'll take steps to not only control this dependency, but we'll do so across both Apple and Wasm platforms, and we'll isolate its interface from its live implementation to speed up our builds and reduce our app's size.</itunes:subtitle><itunes:summary>Let's dial up the complexity of our Wasm application! We'll introduce some async logic in the form of a network request. We'll take steps to not only control this dependency, but we'll do so across both Apple and Wasm platforms, and we'll isolate its interface from its live implementation to speed up our builds and reduce our app's size.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:42:17</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0292.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>292</itunes:episode><itunes:title>Cross-Platform Swift: Networking</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0292-720p-829bf38e13ae4e68a547e45cae2f04e8.mp4" length="394200000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0292-720p-829bf38e13ae4e68a547e45cae2f04e8.mp4" length="394200000" type="video/mp4" medium="video"><media:title>Cross-Platform Swift: Networking</media:title></media:content></item><item><title>Cross-Platform Swift: WebAssembly</title><pubDate>Mon, 19 Aug 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep291-cross-platform-swift-webassembly</link><guid>https://www.pointfree.co/episodes/ep291-cross-platform-swift-webassembly</guid><description>We are going to take a Swift feature _into the browser_. We will set up a WebAssembly application from scratch, show how to run and debug it, and even set up some basic UI. And then we will integrate our existing model into it, all powered by the magic of Swift's Observation framework.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We are going to take a Swift feature _into the browser_. We will set up a WebAssembly application from scratch, show how to run and debug it, and even set up some basic UI. And then we will integrate our existing model into it, all powered by the magic of Swift's Observation framework.</itunes:subtitle><itunes:summary>We are going to take a Swift feature _into the browser_. We will set up a WebAssembly application from scratch, show how to run and debug it, and even set up some basic UI. And then we will integrate our existing model into it, all powered by the magic of Swift's Observation framework.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:32:15</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0291.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>291</itunes:episode><itunes:title>Cross-Platform Swift: WebAssembly</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0291-720p-e0ef656e0d1c432ca57d12cf6191ae66.mp4" length="287800000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0291-720p-e0ef656e0d1c432ca57d12cf6191ae66.mp4" length="287800000" type="video/mp4" medium="video"><media:title>Cross-Platform Swift: WebAssembly</media:title></media:content></item><item><title>Cross-Platform Swift: View Paradigms</title><pubDate>Mon, 12 Aug 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep290-cross-platform-swift-view-paradigms</link><guid>https://www.pointfree.co/episodes/ep290-cross-platform-swift-view-paradigms</guid><description>It's time to go cross-platform! We will take a feature written in Swift and use it in vastly different situations, including not only SwiftUI and UIKit, but beyond Apple's frameworks and ecosystems. We will start with a baby step and introduce our feature to a third party view paradigm, Airbnb's Epoxy.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>It's time to go cross-platform! We will take a feature written in Swift and use it in vastly different situations, including not only SwiftUI and UIKit, but beyond Apple's frameworks and ecosystems. We will start with a baby step and introduce our feature to a third party view paradigm, Airbnb's Epoxy.</itunes:subtitle><itunes:summary>It's time to go cross-platform! We will take a feature written in Swift and use it in vastly different situations, including not only SwiftUI and UIKit, but beyond Apple's frameworks and ecosystems. We will start with a baby step and introduce our feature to a third party view paradigm, Airbnb's Epoxy.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:33:48</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0290.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>290</itunes:episode><itunes:title>Cross-Platform Swift: View Paradigms</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0290-720p-2a3894508f434f6c92411b09dc8c905c.mp4" length="478400000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0290-720p-2a3894508f434f6c92411b09dc8c905c.mp4" length="478400000" type="video/mp4" medium="video"><media:title>Cross-Platform Swift: View Paradigms</media:title></media:content></item><item><title>Modern UIKit: UIControl Bindings</title><pubDate>Mon, 29 Jul 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep289-modern-uikit-uicontrol-bindings</link><guid>https://www.pointfree.co/episodes/ep289-modern-uikit-uicontrol-bindings</guid><description>While we rebuilt SwiftUI bindings in UIKit to power state-driven navigation, that's not all SwiftUI uses them for! Let's see what it takes to power `UIControl`s from model bindings. And finally, let's ask "what’s the point?” by comparing the tools we’ve built over many episodes with the alternative.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>While we rebuilt SwiftUI bindings in UIKit to power state-driven navigation, that's not all SwiftUI uses them for! Let's see what it takes to power `UIControl`s from model bindings. And finally, let's ask "what’s the point?” by comparing the tools we’ve built over many episodes with the alternative.</itunes:subtitle><itunes:summary>While we rebuilt SwiftUI bindings in UIKit to power state-driven navigation, that's not all SwiftUI uses them for! Let's see what it takes to power `UIControl`s from model bindings. And finally, let's ask "what’s the point?” by comparing the tools we’ve built over many episodes with the alternative.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:55:09</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0289.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>289</itunes:episode><itunes:title>Modern UIKit: UIControl Bindings</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0289-720p-b3b6d7527d8e40749836b4562b4983aa.mp4" length="561000000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0289-720p-b3b6d7527d8e40749836b4562b4983aa.mp4" length="561000000" type="video/mp4" medium="video"><media:title>Modern UIKit: UIControl Bindings</media:title></media:content></item><item><title>Modern UIKit: Stack Navigation, Part 2</title><pubDate>Mon, 22 Jul 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep288-modern-uikit-stack-navigation-part-2</link><guid>https://www.pointfree.co/episodes/ep288-modern-uikit-stack-navigation-part-2</guid><description>We round out our stack navigation tools with support for an `@Environment`-like feature for holding onto the stack's path, a `NavigationLink`-like feature for pushing features onto the stack from anywhere, and we'll handle every corner case from deep-linking to user dismissal.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We round out our stack navigation tools with support for an `@Environment`-like feature for holding onto the stack's path, a `NavigationLink`-like feature for pushing features onto the stack from anywhere, and we'll handle every corner case from deep-linking to user dismissal.</itunes:subtitle><itunes:summary>We round out our stack navigation tools with support for an `@Environment`-like feature for holding onto the stack's path, a `NavigationLink`-like feature for pushing features onto the stack from anywhere, and we'll handle every corner case from deep-linking to user dismissal.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:28:30</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0288.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>288</itunes:episode><itunes:title>Modern UIKit: Stack Navigation, Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0288-720p-df811a2d70db4542ae149f6469dc8ff3.mp4" length="267000000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0288-720p-df811a2d70db4542ae149f6469dc8ff3.mp4" length="267000000" type="video/mp4" medium="video"><media:title>Modern UIKit: Stack Navigation, Part 2</media:title></media:content></item><item><title>Modern UIKit: Stack Navigation, Part 1</title><pubDate>Mon, 15 Jul 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep287-modern-uikit-stack-navigation-part-1</link><guid>https://www.pointfree.co/episodes/ep287-modern-uikit-stack-navigation-part-1</guid><description>We have now implemented tree-based navigation in UIKit, driven by the Observation framework, but there is another form of navigation to think about: stack-based navigation, where you drive your navigation from a flat collection of states rather than a heavily-nested type. Let's leverage Observation to build a really nice tool for stack-based navigation.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We have now implemented tree-based navigation in UIKit, driven by the Observation framework, but there is another form of navigation to think about: stack-based navigation, where you drive your navigation from a flat collection of states rather than a heavily-nested type. Let's leverage Observation to build a really nice tool for stack-based navigation.</itunes:subtitle><itunes:summary>We have now implemented tree-based navigation in UIKit, driven by the Observation framework, but there is another form of navigation to think about: stack-based navigation, where you drive your navigation from a flat collection of states rather than a heavily-nested type. Let's leverage Observation to build a really nice tool for stack-based navigation.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:28:26</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0287.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>287</itunes:episode><itunes:title>Modern UIKit: Stack Navigation, Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0287-720p-9b02d4cb4a9d44889fd136a16c8733f5.mp4" length="288100000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0287-720p-9b02d4cb4a9d44889fd136a16c8733f5.mp4" length="288100000" type="video/mp4" medium="video"><media:title>Modern UIKit: Stack Navigation, Part 1</media:title></media:content></item><item><title>Modern UIKit: Tree-based Navigation</title><pubDate>Mon, 08 Jul 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep286-modern-uikit-tree-based-navigation</link><guid>https://www.pointfree.co/episodes/ep286-modern-uikit-tree-based-navigation</guid><description>While SwiftUI bindings were almost the perfect tool for UIKit navigation, they unfortunately hide some crucial information that we need to build out our tools. But never fear, we can rebuild them from scratch! Let's build `@Binding` and `@Bindable` from scratch to see how they work, and we will use them to drive concise, tree-based navigation using enums.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>While SwiftUI bindings were almost the perfect tool for UIKit navigation, they unfortunately hide some crucial information that we need to build out our tools. But never fear, we can rebuild them from scratch! Let's build `@Binding` and `@Bindable` from scratch to see how they work, and we will use them to drive concise, tree-based navigation using enums.</itunes:subtitle><itunes:summary>While SwiftUI bindings were almost the perfect tool for UIKit navigation, they unfortunately hide some crucial information that we need to build out our tools. But never fear, we can rebuild them from scratch! Let's build `@Binding` and `@Bindable` from scratch to see how they work, and we will use them to drive concise, tree-based navigation using enums.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:31:23</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0286.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>286</itunes:episode><itunes:title>Modern UIKit: Tree-based Navigation</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0286-720p-84711dc93fb34417b03ab8c281ceeb7d.mp4" length="367100000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0286-720p-84711dc93fb34417b03ab8c281ceeb7d.mp4" length="367100000" type="video/mp4" medium="video"><media:title>Modern UIKit: Tree-based Navigation</media:title></media:content></item><item><title>Modern UIKit: Unified Navigation</title><pubDate>Mon, 01 Jul 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep285-modern-uikit-unified-navigation</link><guid>https://www.pointfree.co/episodes/ep285-modern-uikit-unified-navigation</guid><description>We have built the foundation of powerful new UIKit navigation tools, but they're not quite finished. Let's improve these APIs to handle dismissal by leveraging another SwiftUI tool: bindings. We will see how SwiftUI bindings are (almost) the perfect tool for UIKit navigation, and we will see where they fall short.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We have built the foundation of powerful new UIKit navigation tools, but they're not quite finished. Let's improve these APIs to handle dismissal by leveraging another SwiftUI tool: bindings. We will see how SwiftUI bindings are (almost) the perfect tool for UIKit navigation, and we will see where they fall short.</itunes:subtitle><itunes:summary>We have built the foundation of powerful new UIKit navigation tools, but they're not quite finished. Let's improve these APIs to handle dismissal by leveraging another SwiftUI tool: bindings. We will see how SwiftUI bindings are (almost) the perfect tool for UIKit navigation, and we will see where they fall short.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:35:25</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0285.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>285</itunes:episode><itunes:title>Modern UIKit: Unified Navigation</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0285-720p-f2b3d396c09b4fa4a72155680b74c0db.mp4" length="350000000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0285-720p-f2b3d396c09b4fa4a72155680b74c0db.mp4" length="350000000" type="video/mp4" medium="video"><media:title>Modern UIKit: Unified Navigation</media:title></media:content></item><item><title>Modern UIKit: Basics of Navigation</title><pubDate>Mon, 24 Jun 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep284-modern-uikit-basics-of-navigation</link><guid>https://www.pointfree.co/episodes/ep284-modern-uikit-basics-of-navigation</guid><description>Now that we have a tool that brings the power of the Observation framework to UIKit, let's put it through the paces. We will use it to build state-driven navigation tools that can drive alerts, sheets, popovers, drill-downs, and more, and they will look a lot like SwiftUI's navigation tools.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Now that we have a tool that brings the power of the Observation framework to UIKit, let's put it through the paces. We will use it to build state-driven navigation tools that can drive alerts, sheets, popovers, drill-downs, and more, and they will look a lot like SwiftUI's navigation tools.</itunes:subtitle><itunes:summary>Now that we have a tool that brings the power of the Observation framework to UIKit, let's put it through the paces. We will use it to build state-driven navigation tools that can drive alerts, sheets, popovers, drill-downs, and more, and they will look a lot like SwiftUI's navigation tools.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:37:50</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0284.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>284</itunes:episode><itunes:title>Modern UIKit: Basics of Navigation</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0284-720p-dc15fbe3322649e7a8c32290bd65809a.mp4" length="394300000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0284-720p-dc15fbe3322649e7a8c32290bd65809a.mp4" length="394300000" type="video/mp4" medium="video"><media:title>Modern UIKit: Basics of Navigation</media:title></media:content></item><item><title>Modern UIKit: Observation</title><pubDate>Mon, 17 Jun 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep283-modern-uikit-observation</link><guid>https://www.pointfree.co/episodes/ep283-modern-uikit-observation</guid><description>It's time to build modern tools for UIKit from scratch, heavily inspired by SwiftUI and using
the Observation framework. Surprisingly, Swift 5.9's observation tools _can_ be used in UIKit,
and in fact they work _great_, despite being specifically tuned for SwiftUI.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>It's time to build modern tools for UIKit from scratch, heavily inspired by SwiftUI and using
the Observation framework. Surprisingly, Swift 5.9's observation tools _can_ be used in UIKit,
and in fact they work _great_, despite being specifically tuned for SwiftUI.</itunes:subtitle><itunes:summary>It's time to build modern tools for UIKit from scratch, heavily inspired by SwiftUI and using
the Observation framework. Surprisingly, Swift 5.9's observation tools _can_ be used in UIKit,
and in fact they work _great_, despite being specifically tuned for SwiftUI.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:41:13</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0283.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>283</itunes:episode><itunes:title>Modern UIKit: Observation</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0283-720p-28e26ebc7f4344bfa444b5f4fb9d9954.mp4" length="449400000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0283-720p-28e26ebc7f4344bfa444b5f4fb9d9954.mp4" length="449400000" type="video/mp4" medium="video"><media:title>Modern UIKit: Observation</media:title></media:content></item><item><title>Modern UIKit: Sneak Peek, Part 2</title><pubDate>Mon, 03 Jun 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep282-modern-uikit-sneak-peek-part-2</link><guid>https://www.pointfree.co/episodes/ep282-modern-uikit-sneak-peek-part-2</guid><description>We finish building a modern UIKit application with brand new state-driven tools, including a
complex collection view that can navigate to two child features. And we will see that, thanks
to our back-port of Swift's observation tools, we will be able to deploy our app all the way
back to iOS 13.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We finish building a modern UIKit application with brand new state-driven tools, including a
complex collection view that can navigate to two child features. And we will see that, thanks
to our back-port of Swift's observation tools, we will be able to deploy our app all the way
back to iOS 13.</itunes:subtitle><itunes:summary>We finish building a modern UIKit application with brand new state-driven tools, including a
complex collection view that can navigate to two child features. And we will see that, thanks
to our back-port of Swift's observation tools, we will be able to deploy our app all the way
back to iOS 13.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:31:10</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0282.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>282</itunes:episode><itunes:title>Modern UIKit: Sneak Peek, Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0282-720p-1cb4ad1e25ad489991c84a9894b2d358.mp4" length="528800000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0282-720p-1cb4ad1e25ad489991c84a9894b2d358.mp4" length="528800000" type="video/mp4" medium="video"><media:title>Modern UIKit: Sneak Peek, Part 2</media:title></media:content></item><item><title>Modern UIKit: Sneak Peek, Part 1</title><pubDate>Mon, 27 May 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep281-modern-uikit-sneak-peek-part-1</link><guid>https://www.pointfree.co/episodes/ep281-modern-uikit-sneak-peek-part-1</guid><description>As we approach WWDC24 and 5 years of SwiftUI, let's talk about… UIKit! 😜 We love SwiftUI,
but there will still be times you must drop down to UIKit, and so we want to show what modern
UIKit development can look like if you put in a little bit of effort to build tools that allow
you to model your domains as concisely as possible.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>As we approach WWDC24 and 5 years of SwiftUI, let's talk about… UIKit! 😜 We love SwiftUI,
but there will still be times you must drop down to UIKit, and so we want to show what modern
UIKit development can look like if you put in a little bit of effort to build tools that allow
you to model your domains as concisely as possible.</itunes:subtitle><itunes:summary>As we approach WWDC24 and 5 years of SwiftUI, let's talk about… UIKit! 😜 We love SwiftUI,
but there will still be times you must drop down to UIKit, and so we want to show what modern
UIKit development can look like if you put in a little bit of effort to build tools that allow
you to model your domains as concisely as possible.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:39:13</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0281.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>281</itunes:episode><itunes:title>Modern UIKit: Sneak Peek, Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0281-720p-bacb2873afa44061b177d345babeddbb.mp4" length="528800000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0281-720p-bacb2873afa44061b177d345babeddbb.mp4" length="528800000" type="video/mp4" medium="video"><media:title>Modern UIKit: Sneak Peek, Part 1</media:title></media:content></item><item><title>Shared State in Practice: isowords, Part 2</title><pubDate>Mon, 20 May 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep280-shared-state-in-practice-isowords-part-2</link><guid>https://www.pointfree.co/episodes/ep280-shared-state-in-practice-isowords-part-2</guid><description>We conclude the series by stretching our use of the `@Shared` property wrapper in isowords to two more features: saved games and user defaults. In the process we'll eliminate hundreds of lines of boilerplate and some truly gnarly code.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We conclude the series by stretching our use of the `@Shared` property wrapper in isowords to two more features: saved games and user defaults. In the process we'll eliminate hundreds of lines of boilerplate and some truly gnarly code.</itunes:subtitle><itunes:summary>We conclude the series by stretching our use of the `@Shared` property wrapper in isowords to two more features: saved games and user defaults. In the process we'll eliminate hundreds of lines of boilerplate and some truly gnarly code.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:33:59</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0280.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>280</itunes:episode><itunes:title>Shared State in Practice: isowords, Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0280-720p-ce035264be52495c90b69c33be2b362d.mp4" length="301200000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0280-720p-ce035264be52495c90b69c33be2b362d.mp4" length="301200000" type="video/mp4" medium="video"><media:title>Shared State in Practice: isowords, Part 2</media:title></media:content></item><item><title>Shared State in Practice: isowords, Part 1</title><pubDate>Mon, 13 May 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep279-shared-state-in-practice-isowords-part-1</link><guid>https://www.pointfree.co/episodes/ep279-shared-state-in-practice-isowords-part-1</guid><description>Let's apply the Composable Architecture's new state sharing tools to something even more real world: our open source word game, isowords. It currently models its user settings as a cumbersome dependency that requires a lot of code to keep features in sync when settings change. We should be able to greatly simplify things with the `@Shared` property wrapper.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let's apply the Composable Architecture's new state sharing tools to something even more real world: our open source word game, isowords. It currently models its user settings as a cumbersome dependency that requires a lot of code to keep features in sync when settings change. We should be able to greatly simplify things with the `@Shared` property wrapper.</itunes:subtitle><itunes:summary>Let's apply the Composable Architecture's new state sharing tools to something even more real world: our open source word game, isowords. It currently models its user settings as a cumbersome dependency that requires a lot of code to keep features in sync when settings change. We should be able to greatly simplify things with the `@Shared` property wrapper.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:25:39</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0279.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>279</itunes:episode><itunes:title>Shared State in Practice: isowords, Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0279-720p-2aad8720936c4345a2e1a2c2d63c1186.mp4" length="565200000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0279-720p-2aad8720936c4345a2e1a2c2d63c1186.mp4" length="565200000" type="video/mp4" medium="video"><media:title>Shared State in Practice: isowords, Part 1</media:title></media:content></item><item><title>Shared State in Practice: SyncUps: Part 2</title><pubDate>Mon, 06 May 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep278-shared-state-in-practice-syncups-part-2</link><guid>https://www.pointfree.co/episodes/ep278-shared-state-in-practice-syncups-part-2</guid><description>We finish refactoring the SyncUps application to use the Composable Architecture's all new state sharing tools. We will see that we can delete hundreds of lines of boilerplate of coordination between parent and child features, _and_ we won't have to sacrifice any testability, including the _exhaustive_ testability provided by the library.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We finish refactoring the SyncUps application to use the Composable Architecture's all new state sharing tools. We will see that we can delete hundreds of lines of boilerplate of coordination between parent and child features, _and_ we won't have to sacrifice any testability, including the _exhaustive_ testability provided by the library.</itunes:subtitle><itunes:summary>We finish refactoring the SyncUps application to use the Composable Architecture's all new state sharing tools. We will see that we can delete hundreds of lines of boilerplate of coordination between parent and child features, _and_ we won't have to sacrifice any testability, including the _exhaustive_ testability provided by the library.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:35:59</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0278.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>278</itunes:episode><itunes:title>Shared State in Practice: SyncUps: Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0278-720p-f62b9fc2bac14fbebe9e44dc73c91c16.mp4" length="43360000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0278-720p-f62b9fc2bac14fbebe9e44dc73c91c16.mp4" length="43360000" type="video/mp4" medium="video"><media:title>Shared State in Practice: SyncUps: Part 2</media:title></media:content></item><item><title>Shared State in Practice: SyncUps, Part 1</title><pubDate>Mon, 29 Apr 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep277-shared-state-in-practice-syncups-part-1</link><guid>https://www.pointfree.co/episodes/ep277-shared-state-in-practice-syncups-part-1</guid><description>In our last series we developed a wonderful way to share state between features in the Composable Architecture, and even persist it, all without sacrificing testability, but we also didn't get to show the (just now released) tools being used in real world applications, so let's do just that, starting with SyncUps.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>In our last series we developed a wonderful way to share state between features in the Composable Architecture, and even persist it, all without sacrificing testability, but we also didn't get to show the (just now released) tools being used in real world applications, so let's do just that, starting with SyncUps.</itunes:subtitle><itunes:summary>In our last series we developed a wonderful way to share state between features in the Composable Architecture, and even persist it, all without sacrificing testability, but we also didn't get to show the (just now released) tools being used in real world applications, so let's do just that, starting with SyncUps.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:44:47</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0277.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>277</itunes:episode><itunes:title>Shared State in Practice: SyncUps, Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0277-720p-4931e836b8ff4c70965182bc452fb917.mp4" length="412800000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0277-720p-4931e836b8ff4c70965182bc452fb917.mp4" length="412800000" type="video/mp4" medium="video"><media:title>Shared State in Practice: SyncUps, Part 1</media:title></media:content></item><item><title>Shared State: File Storage, Part 2</title><pubDate>Mon, 22 Apr 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep276-shared-state-file-storage-part-2</link><guid>https://www.pointfree.co/episodes/ep276-shared-state-file-storage-part-2</guid><description>It's incredible how easy `@Shared` makes it to persist complex data types to the file system, but currently it completely ruins our ability to test features that use it. Let's fix that, and we will also explore what it means to derive a small piece of shared state from a bigger piece of shared state.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>It's incredible how easy `@Shared` makes it to persist complex data types to the file system, but currently it completely ruins our ability to test features that use it. Let's fix that, and we will also explore what it means to derive a small piece of shared state from a bigger piece of shared state.</itunes:subtitle><itunes:summary>It's incredible how easy `@Shared` makes it to persist complex data types to the file system, but currently it completely ruins our ability to test features that use it. Let's fix that, and we will also explore what it means to derive a small piece of shared state from a bigger piece of shared state.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:34:59</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0276.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>276</itunes:episode><itunes:title>Shared State: File Storage, Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0276-720p-c4e934d9e8cf421b9ca65f7e85b2f154.mp4" length="353000000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0276-720p-c4e934d9e8cf421b9ca65f7e85b2f154.mp4" length="353000000" type="video/mp4" medium="video"><media:title>Shared State: File Storage, Part 2</media:title></media:content></item><item><title>Shared State: File Storage, Part 1</title><pubDate>Mon, 15 Apr 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep275-shared-state-file-storage-part-1</link><guid>https://www.pointfree.co/episodes/ep275-shared-state-file-storage-part-1</guid><description>While user defaults is convenient for persisting simple bits of state, more complex data types should be saved to the file system. This can be tricky to get right, and so we take the time to properly handle all of the edge cases.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>While user defaults is convenient for persisting simple bits of state, more complex data types should be saved to the file system. This can be tricky to get right, and so we take the time to properly handle all of the edge cases.</itunes:subtitle><itunes:summary>While user defaults is convenient for persisting simple bits of state, more complex data types should be saved to the file system. This can be tricky to get right, and so we take the time to properly handle all of the edge cases.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:30:59</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0275.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>275</itunes:episode><itunes:title>Shared State: File Storage, Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0275-720p-b369eea11abd4342a7a2c8dce7175495.mp4" length="328600000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0275-720p-b369eea11abd4342a7a2c8dce7175495.mp4" length="328600000" type="video/mp4" medium="video"><media:title>Shared State: File Storage, Part 1</media:title></media:content></item><item><title>Shared State: User Defaults, Part 2</title><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep274-shared-state-user-defaults-part-2</link><guid>https://www.pointfree.co/episodes/ep274-shared-state-user-defaults-part-2</guid><description>We can now persist simple bits of state to user defaults using the `@Shared` property wrapper, but there is more work to be done. We need to observe changes to user defaults in order to play those changes back to `@Shared`, and we need to put in a bit of extra work to make everything testable.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We can now persist simple bits of state to user defaults using the `@Shared` property wrapper, but there is more work to be done. We need to observe changes to user defaults in order to play those changes back to `@Shared`, and we need to put in a bit of extra work to make everything testable.</itunes:subtitle><itunes:summary>We can now persist simple bits of state to user defaults using the `@Shared` property wrapper, but there is more work to be done. We need to observe changes to user defaults in order to play those changes back to `@Shared`, and we need to put in a bit of extra work to make everything testable.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:26:32</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0274.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>274</itunes:episode><itunes:title>Shared State: User Defaults, Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0274-720p-367c88e8b214473983db5629c11fc1fd.mp4" length="281600000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0274-720p-367c88e8b214473983db5629c11fc1fd.mp4" length="281600000" type="video/mp4" medium="video"><media:title>Shared State: User Defaults, Part 2</media:title></media:content></item><item><title>Shared State: User Defaults, Part 1</title><pubDate>Mon, 01 Apr 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep273-shared-state-ubiquity-persistence</link><guid>https://www.pointfree.co/episodes/ep273-shared-state-ubiquity-persistence</guid><description>Let's enhance the `@Shared` property wrapper with the concept of persistence. We will begin with user defaults, which is the simplest form of persistence on Apple's platforms, and that will set the stage for more complex forms of persistence in the future.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let's enhance the `@Shared` property wrapper with the concept of persistence. We will begin with user defaults, which is the simplest form of persistence on Apple's platforms, and that will set the stage for more complex forms of persistence in the future.</itunes:subtitle><itunes:summary>Let's enhance the `@Shared` property wrapper with the concept of persistence. We will begin with user defaults, which is the simplest form of persistence on Apple's platforms, and that will set the stage for more complex forms of persistence in the future.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:41:10</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0273.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>273</itunes:episode><itunes:title>Shared State: User Defaults, Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0273-720p-def8a50a82364a0a98860ba2d5b810d0.mp4" length="418700000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0273-720p-def8a50a82364a0a98860ba2d5b810d0.mp4" length="418700000" type="video/mp4" medium="video"><media:title>Shared State: User Defaults, Part 1</media:title></media:content></item><item><title>Shared State: Testing, Part 2</title><pubDate>Mon, 25 Mar 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep272-shared-state-testing-part-2</link><guid>https://www.pointfree.co/episodes/ep272-shared-state-testing-part-2</guid><description>We will employ `@Shared`'s new testing capabilities in a complex scenario: a sign up flow. We
will see how a deeply nested integration of features all sharing the same state can be tested
simply, and we will see how we can leverage the same tricks employed by the test store to add
debug tools to reducers using shared state.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We will employ `@Shared`'s new testing capabilities in a complex scenario: a sign up flow. We
will see how a deeply nested integration of features all sharing the same state can be tested
simply, and we will see how we can leverage the same tricks employed by the test store to add
debug tools to reducers using shared state.</itunes:subtitle><itunes:summary>We will employ `@Shared`'s new testing capabilities in a complex scenario: a sign up flow. We
will see how a deeply nested integration of features all sharing the same state can be tested
simply, and we will see how we can leverage the same tricks employed by the test store to add
debug tools to reducers using shared state.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:32:22</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0272.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>272</itunes:episode><itunes:title>Shared State: Testing, Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0272-720p-7ebe37609e14405a8e47bc21aa961910.mp4" length="294300000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0272-720p-7ebe37609e14405a8e47bc21aa961910.mp4" length="294300000" type="video/mp4" medium="video"><media:title>Shared State: Testing, Part 2</media:title></media:content></item><item><title>Shared State: Testing, Part 1</title><pubDate>Mon, 18 Mar 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep271-shared-state-testing-part-1</link><guid>https://www.pointfree.co/episodes/ep271-shared-state-testing-part-1</guid><description>The `@Shared` property wrapper can effortlessly share state among features to build complex
flows quickly, but because it is powered by a reference type, it is not compatible with the
Composable Architecture's value-oriented testing tools. Let's address these shortcomings and
recover all of the library's testing niceties.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>The `@Shared` property wrapper can effortlessly share state among features to build complex
flows quickly, but because it is powered by a reference type, it is not compatible with the
Composable Architecture's value-oriented testing tools. Let's address these shortcomings and
recover all of the library's testing niceties.</itunes:subtitle><itunes:summary>The `@Shared` property wrapper can effortlessly share state among features to build complex
flows quickly, but because it is powered by a reference type, it is not compatible with the
Composable Architecture's value-oriented testing tools. Let's address these shortcomings and
recover all of the library's testing niceties.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:31:38</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0271.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>271</itunes:episode><itunes:title>Shared State: Testing, Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0271-720p-41a898ce1ad540a99f5e9a9f1f239b4c.mp4" length="281900000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0271-720p-41a898ce1ad540a99f5e9a9f1f239b4c.mp4" length="281900000" type="video/mp4" medium="video"><media:title>Shared State: Testing, Part 1</media:title></media:content></item><item><title>Shared State: The Solution, Part 2</title><pubDate>Mon, 11 Mar 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep270-shared-state-the-solution-part-2</link><guid>https://www.pointfree.co/episodes/ep270-shared-state-the-solution-part-2</guid><description>We finish building a complex, flow-based case study that leverages the new `@Shared` property
wrapper. Along the way we will flex recently added superpowers of the library, and we will
experience firsthand how simple this new model of shared state can be.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We finish building a complex, flow-based case study that leverages the new `@Shared` property
wrapper. Along the way we will flex recently added superpowers of the library, and we will
experience firsthand how simple this new model of shared state can be.</itunes:subtitle><itunes:summary>We finish building a complex, flow-based case study that leverages the new `@Shared` property
wrapper. Along the way we will flex recently added superpowers of the library, and we will
experience firsthand how simple this new model of shared state can be.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:41:50</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0270.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>270</itunes:episode><itunes:title>Shared State: The Solution, Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0270-720p-ff782994080f49b3a2511544ed0109bd.mp4" length="346700000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0270-720p-ff782994080f49b3a2511544ed0109bd.mp4" length="346700000" type="video/mp4" medium="video"><media:title>Shared State: The Solution, Part 2</media:title></media:content></item><item><title>Shared State: The Solution, Part 1</title><pubDate>Mon, 04 Mar 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep269-shared-state-the-solution-part-1</link><guid>https://www.pointfree.co/episodes/ep269-shared-state-the-solution-part-1</guid><description>The various approaches of sharing state in the Composable Architecture are mixed bag of trade
offs and problems. Is there a better way? We’ll take a controversial approach: we will
introduce a reference type into our state, typically a value type, and see what happens, and
take it for a spin in an all new, flow-based case study.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>The various approaches of sharing state in the Composable Architecture are mixed bag of trade
offs and problems. Is there a better way? We’ll take a controversial approach: we will
introduce a reference type into our state, typically a value type, and see what happens, and
take it for a spin in an all new, flow-based case study.</itunes:subtitle><itunes:summary>The various approaches of sharing state in the Composable Architecture are mixed bag of trade
offs and problems. Is there a better way? We’ll take a controversial approach: we will
introduce a reference type into our state, typically a value type, and see what happens, and
take it for a spin in an all new, flow-based case study.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:39:41</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0269.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>269</itunes:episode><itunes:title>Shared State: The Solution, Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0269-720p-2001b181a9494cfdb398a98818a662d0.mp4" length="455500000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0269-720p-2001b181a9494cfdb398a98818a662d0.mp4" length="455500000" type="video/mp4" medium="video"><media:title>Shared State: The Solution, Part 1</media:title></media:content></item><item><title>Shared State: The Problem</title><pubDate>Mon, 26 Feb 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep268-shared-state-the-problem</link><guid>https://www.pointfree.co/episodes/ep268-shared-state-the-problem</guid><description>We tackle one of the biggest problems when it comes to "single source of truth" applications,
and that is: how do you share state? Let's begin by analyzing the problem, and truly
understanding what vague mantras like "single source of truth" even mean, and then we will
be in a good position to provide a wonderful solution.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We tackle one of the biggest problems when it comes to "single source of truth" applications,
and that is: how do you share state? Let's begin by analyzing the problem, and truly
understanding what vague mantras like "single source of truth" even mean, and then we will
be in a good position to provide a wonderful solution.</itunes:subtitle><itunes:summary>We tackle one of the biggest problems when it comes to "single source of truth" applications,
and that is: how do you share state? Let's begin by analyzing the problem, and truly
understanding what vague mantras like "single source of truth" even mean, and then we will
be in a good position to provide a wonderful solution.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:48:32</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0268.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>268</itunes:episode><itunes:title>Shared State: The Problem</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0268-720p-06333af9e49b40e3828246161a58d7b5.mp4" length="560260000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0268-720p-06333af9e49b40e3828246161a58d7b5.mp4" length="560260000" type="video/mp4" medium="video"><media:title>Shared State: The Problem</media:title></media:content></item><item><title>Point-Free Live: Observation in Practice</title><pubDate>Mon, 19 Feb 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep267-point-free-live-observation-in-practice</link><guid>https://www.pointfree.co/episodes/ep267-point-free-live-observation-in-practice</guid><description>To celebrate our 6th anniversary we had another livestream! We updated an app from the most
recent Composable Architecture tour to the latest observation tools, showed how these tools
can improve UIKit-based apps, showed off some recent enhancements to the `@Reducer` macro,
gave a sneak peek of a _highly anticipated topic_, and answered your questions along the way.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>To celebrate our 6th anniversary we had another livestream! We updated an app from the most
recent Composable Architecture tour to the latest observation tools, showed how these tools
can improve UIKit-based apps, showed off some recent enhancements to the `@Reducer` macro,
gave a sneak peek of a _highly anticipated topic_, and answered your questions along the way.</itunes:subtitle><itunes:summary>To celebrate our 6th anniversary we had another livestream! We updated an app from the most
recent Composable Architecture tour to the latest observation tools, showed how these tools
can improve UIKit-based apps, showed off some recent enhancements to the `@Reducer` macro,
gave a sneak peek of a _highly anticipated topic_, and answered your questions along the way.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>01:54:34</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0267.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>267</itunes:episode><itunes:title>Point-Free Live: Observation in Practice</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0267-720p-3a57abad7e0342c19b94f2b525a200ea.mp4" length="1380000000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0267-720p-3a57abad7e0342c19b94f2b525a200ea.mp4" length="1380000000" type="video/mp4" medium="video"><media:title>Point-Free Live: Observation in Practice</media:title></media:content></item><item><title>Observable Architecture: The Point</title><pubDate>Mon, 29 Jan 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep266-observable-architecture-the-point</link><guid>https://www.pointfree.co/episodes/ep266-observable-architecture-the-point</guid><description>So what's the point of observation in the Composable Architecture? While we have seemingly
simplified nearly every inch of the library as it interfaces with SwiftUI, let's zoom out a
bit, explore how some integration tests that benchmark certain aspects of the library have
changed, and migrate the Todos application we built in the very first tour of this library to
the new tools.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>So what's the point of observation in the Composable Architecture? While we have seemingly
simplified nearly every inch of the library as it interfaces with SwiftUI, let's zoom out a
bit, explore how some integration tests that benchmark certain aspects of the library have
changed, and migrate the Todos application we built in the very first tour of this library to
the new tools.</itunes:subtitle><itunes:summary>So what's the point of observation in the Composable Architecture? While we have seemingly
simplified nearly every inch of the library as it interfaces with SwiftUI, let's zoom out a
bit, explore how some integration tests that benchmark certain aspects of the library have
changed, and migrate the Todos application we built in the very first tour of this library to
the new tools.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:27:30</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0266.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>266</itunes:episode><itunes:title>Observable Architecture: The Point</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0266-720p-92f697b3d35241ce9fec7acc46bf0097.mp4" length="353500000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0266-720p-92f697b3d35241ce9fec7acc46bf0097.mp4" length="353500000" type="video/mp4" medium="video"><media:title>Observable Architecture: The Point</media:title></media:content></item><item><title>Observable Architecture: Observing Bindings</title><pubDate>Mon, 22 Jan 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep265-observable-architecture-observing-bindings</link><guid>https://www.pointfree.co/episodes/ep265-observable-architecture-observing-bindings</guid><description>We have iterated on how bindings work in the Composable Architecture many times, but have
never been fully happy with the results. With Observation, that all changes. By eliminating
view stores and observing store state directly, we are free to totally reimagine bindings in
the Composable Architecture, and get rid of even more concepts in the process.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We have iterated on how bindings work in the Composable Architecture many times, but have
never been fully happy with the results. With Observation, that all changes. By eliminating
view stores and observing store state directly, we are free to totally reimagine bindings in
the Composable Architecture, and get rid of even more concepts in the process.</itunes:subtitle><itunes:summary>We have iterated on how bindings work in the Composable Architecture many times, but have
never been fully happy with the results. With Observation, that all changes. By eliminating
view stores and observing store state directly, we are free to totally reimagine bindings in
the Composable Architecture, and get rid of even more concepts in the process.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:19:07</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0265.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>265</itunes:episode><itunes:title>Observable Architecture: Observing Bindings</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0265-720p-001beaa752694208b00f654e46ad4383.mp4" length="212800000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0265-720p-001beaa752694208b00f654e46ad4383.mp4" length="212800000" type="video/mp4" medium="video"><media:title>Observable Architecture: Observing Bindings</media:title></media:content></item><item><title>Observable Architecture: Observing Navigation</title><pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep264-observable-architecture-observing-navigation</link><guid>https://www.pointfree.co/episodes/ep264-observable-architecture-observing-navigation</guid><description>Observation has allowed us to get rid of a number of view wrappers the Composable Architecture
used to require in favor of vanilla SwiftUI views, instead, but we still depend on a zoo of
view modifiers to drive navigation. Let's rethink all of these helpers and see if we can trade
them out for simpler, vanilla SwiftUI view modifiers, instead.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Observation has allowed us to get rid of a number of view wrappers the Composable Architecture
used to require in favor of vanilla SwiftUI views, instead, but we still depend on a zoo of
view modifiers to drive navigation. Let's rethink all of these helpers and see if we can trade
them out for simpler, vanilla SwiftUI view modifiers, instead.</itunes:subtitle><itunes:summary>Observation has allowed us to get rid of a number of view wrappers the Composable Architecture
used to require in favor of vanilla SwiftUI views, instead, but we still depend on a zoo of
view modifiers to drive navigation. Let's rethink all of these helpers and see if we can trade
them out for simpler, vanilla SwiftUI view modifiers, instead.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:22:08</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0264.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>264</itunes:episode><itunes:title>Observable Architecture: Observing Navigation</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0264-720p-cdbb991e0de14dab9c628c7d5d10ad1a.mp4" length="224300000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0264-720p-cdbb991e0de14dab9c628c7d5d10ad1a.mp4" length="224300000" type="video/mp4" medium="video"><media:title>Observable Architecture: Observing Navigation</media:title></media:content></item><item><title>Observable Architecture: Observing Collections</title><pubDate>Mon, 08 Jan 2024 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep263-observable-architecture-observing-collections</link><guid>https://www.pointfree.co/episodes/ep263-observable-architecture-observing-collections</guid><description>We can now observe struct, optional, and enum state in the Composable Architecture, but what
about collections? Let's explore what it takes to get rid of the `ForEachStore` wrapper view
for a vanilla `ForEach` view instead, while still observing updates to collection state in the
most minimal way possible.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We can now observe struct, optional, and enum state in the Composable Architecture, but what
about collections? Let's explore what it takes to get rid of the `ForEachStore` wrapper view
for a vanilla `ForEach` view instead, while still observing updates to collection state in the
most minimal way possible.</itunes:subtitle><itunes:summary>We can now observe struct, optional, and enum state in the Composable Architecture, but what
about collections? Let's explore what it takes to get rid of the `ForEachStore` wrapper view
for a vanilla `ForEach` view instead, while still observing updates to collection state in the
most minimal way possible.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:53:28</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0263.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>263</itunes:episode><itunes:title>Observable Architecture: Observing Collections</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0263-720p-adddc0625a6e4badba4e16bb362bebf0.mp4" length="461600000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0263-720p-adddc0625a6e4badba4e16bb362bebf0.mp4" length="461600000" type="video/mp4" medium="video"><media:title>Observable Architecture: Observing Collections</media:title></media:content></item><item><title>Observable Architecture: Observing Enums</title><pubDate>Mon, 18 Dec 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep262-observable-architecture-observing-enums</link><guid>https://www.pointfree.co/episodes/ep262-observable-architecture-observing-enums</guid><description>We've made structs and optionals observable in the Composable Architecture, eliminating the
need for `ViewStore`s and `IfLetStore`s, so what about enums? If we can make enums observable,
we could further eliminate the concept of the `SwitchStore`, greatly improving the ergonomics
of working with enums in the library.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We've made structs and optionals observable in the Composable Architecture, eliminating the
need for `ViewStore`s and `IfLetStore`s, so what about enums? If we can make enums observable,
we could further eliminate the concept of the `SwitchStore`, greatly improving the ergonomics
of working with enums in the library.</itunes:subtitle><itunes:summary>We've made structs and optionals observable in the Composable Architecture, eliminating the
need for `ViewStore`s and `IfLetStore`s, so what about enums? If we can make enums observable,
we could further eliminate the concept of the `SwitchStore`, greatly improving the ergonomics
of working with enums in the library.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:43:57</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0262.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>262</itunes:episode><itunes:title>Observable Architecture: Observing Enums</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0262-720p-0df6a8f6181d4b0b8c5540fb91efabfd.mp4" length="399300000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0262-720p-0df6a8f6181d4b0b8c5540fb91efabfd.mp4" length="399300000" type="video/mp4" medium="video"><media:title>Observable Architecture: Observing Enums</media:title></media:content></item><item><title>Observable Architecture: Observing Optionals</title><pubDate>Mon, 11 Dec 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep261-observable-architecture-observing-optionals</link><guid>https://www.pointfree.co/episodes/ep261-observable-architecture-observing-optionals</guid><description>The Composable Architecture can now observe _struct_ state, but it requires a lot of boilerplate. Let's fix this by leveraging the `@Observable` macro from the Swift open source repository. And let's explore what it means to observe _optional_ state and eliminate the library's `IfLetStore` view for a simple `if let` statement.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>The Composable Architecture can now observe _struct_ state, but it requires a lot of boilerplate. Let's fix this by leveraging the `@Observable` macro from the Swift open source repository. And let's explore what it means to observe _optional_ state and eliminate the library's `IfLetStore` view for a simple `if let` statement.</itunes:subtitle><itunes:summary>The Composable Architecture can now observe _struct_ state, but it requires a lot of boilerplate. Let's fix this by leveraging the `@Observable` macro from the Swift open source repository. And let's explore what it means to observe _optional_ state and eliminate the library's `IfLetStore` view for a simple `if let` statement.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:40:37</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0261.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>261</itunes:episode><itunes:title>Observable Architecture: Observing Optionals</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0261-720p-5b37383bdd474417bcb4bc7e848df48c.mp4" length="389000000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0261-720p-5b37383bdd474417bcb4bc7e848df48c.mp4" length="389000000" type="video/mp4" medium="video"><media:title>Observable Architecture: Observing Optionals</media:title></media:content></item><item><title>Observable Architecture: Structural Identity</title><pubDate>Mon, 04 Dec 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep260-observable-architecture-structural-identity</link><guid>https://www.pointfree.co/episodes/ep260-observable-architecture-structural-identity</guid><description>One of the core tenets of the Composable Architecture is that you should be able to model your
application's state using simple value types, like structs and enums. However, the
`@Observable` macro does not work with value types at all, and so in order to enhance the
Composable Architecture with Observation we will need to contend with this issue and explore
what it means for a struct to be observable.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>One of the core tenets of the Composable Architecture is that you should be able to model your
application's state using simple value types, like structs and enums. However, the
`@Observable` macro does not work with value types at all, and so in order to enhance the
Composable Architecture with Observation we will need to contend with this issue and explore
what it means for a struct to be observable.</itunes:subtitle><itunes:summary>One of the core tenets of the Composable Architecture is that you should be able to model your
application's state using simple value types, like structs and enums. However, the
`@Observable` macro does not work with value types at all, and so in order to enhance the
Composable Architecture with Observation we will need to contend with this issue and explore
what it means for a struct to be observable.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:43:03</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0260.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>260</itunes:episode><itunes:title>Observable Architecture: Structural Identity</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0260-720p-92478e6f7aac40588d90e85292e78dec.mp4" length="381800000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0260-720p-92478e6f7aac40588d90e85292e78dec.mp4" length="381800000" type="video/mp4" medium="video"><media:title>Observable Architecture: Structural Identity</media:title></media:content></item><item><title>Observable Architecture: Sneak Peek</title><pubDate>Mon, 27 Nov 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep259-observable-architecture-sneak-peek</link><guid>https://www.pointfree.co/episodes/ep259-observable-architecture-sneak-peek</guid><description>We're about to completely revolutionize the Composable Architecture with Swift's new
Observation framework! But first, a sneak peek: we'll take the public beta (available today!)
for a spin to see how the concept of a "view store" completely vanishes when using the new
tools.

Oh, and did we mention that the new observation tools in the library have been backported
all the way back to iOS 13? This means you can use the tools _immediately_. 🤯</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We're about to completely revolutionize the Composable Architecture with Swift's new
Observation framework! But first, a sneak peek: we'll take the public beta (available today!)
for a spin to see how the concept of a "view store" completely vanishes when using the new
tools.

Oh, and did we mention that the new observation tools in the library have been backported
all the way back to iOS 13? This means you can use the tools _immediately_. 🤯</itunes:subtitle><itunes:summary>We're about to completely revolutionize the Composable Architecture with Swift's new
Observation framework! But first, a sneak peek: we'll take the public beta (available today!)
for a spin to see how the concept of a "view store" completely vanishes when using the new
tools.

Oh, and did we mention that the new observation tools in the library have been backported
all the way back to iOS 13? This means you can use the tools _immediately_. 🤯</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:22:09</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0259.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>259</itunes:episode><itunes:title>Observable Architecture: Sneak Peek</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0259-720p-8af305accd3644aca89ff94e0cc6fe17.mp4" length="304900000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0259-720p-8af305accd3644aca89ff94e0cc6fe17.mp4" length="304900000" type="video/mp4" medium="video"><media:title>Observable Architecture: Sneak Peek</media:title></media:content></item><item><title>Macro Case Paths: Part 2</title><pubDate>Mon, 20 Nov 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep258-macro-case-paths-part-2</link><guid>https://www.pointfree.co/episodes/ep258-macro-case-paths-part-2</guid><description>We have now totally reimagined the design of our case paths library to create actual key paths
for enum cases, but there is some boilerplate involved. Let’s create a macro that eliminates
all of it and explore a few of the possibilities it unlocks.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We have now totally reimagined the design of our case paths library to create actual key paths
for enum cases, but there is some boilerplate involved. Let’s create a macro that eliminates
all of it and explore a few of the possibilities it unlocks.</itunes:subtitle><itunes:summary>We have now totally reimagined the design of our case paths library to create actual key paths
for enum cases, but there is some boilerplate involved. Let’s create a macro that eliminates
all of it and explore a few of the possibilities it unlocks.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:55:17</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0258.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>258</itunes:episode><itunes:title>Macro Case Paths: Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0258-720p-72e17baa14374935bef89d17ef12d4c4.mp4" length="494800000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0258-720p-72e17baa14374935bef89d17ef12d4c4.mp4" length="494800000" type="video/mp4" medium="video"><media:title>Macro Case Paths: Part 2</media:title></media:content></item><item><title>Macro Case Paths: Part 1</title><pubDate>Mon, 13 Nov 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep257-macro-case-paths-part-1</link><guid>https://www.pointfree.co/episodes/ep257-macro-case-paths-part-1</guid><description>“Case paths” grant key path-like functionality to enum cases. They solve many problems in
navigation, parsing, and architecture, but fall short of native key paths…till now. Let’s
close this gap using macros that generate actual key paths to enum cases.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>“Case paths” grant key path-like functionality to enum cases. They solve many problems in
navigation, parsing, and architecture, but fall short of native key paths…till now. Let’s
close this gap using macros that generate actual key paths to enum cases.</itunes:subtitle><itunes:summary>“Case paths” grant key path-like functionality to enum cases. They solve many problems in
navigation, parsing, and architecture, but fall short of native key paths…till now. Let’s
close this gap using macros that generate actual key paths to enum cases.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:59:01</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0257.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>257</itunes:episode><itunes:title>Macro Case Paths: Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0257-720p-b4d8a2ab9aa840809832b1d6ad41ec57.mp4" length="583200000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0257-720p-b4d8a2ab9aa840809832b1d6ad41ec57.mp4" length="583200000" type="video/mp4" medium="video"><media:title>Macro Case Paths: Part 1</media:title></media:content></item><item><title>Observation in Practice</title><pubDate>Mon, 06 Nov 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep256-observation-in-practice</link><guid>https://www.pointfree.co/episodes/ep256-observation-in-practice</guid><description>We take all we've learned about the Observation framework and apply it to a larger, more real
world application: our rewrite of Apple's Scrumdinger demo. We'll see what changes are easy to
make, what changes are a bit trickier, and encounter a bug that you'll want to know about.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We take all we've learned about the Observation framework and apply it to a larger, more real
world application: our rewrite of Apple's Scrumdinger demo. We'll see what changes are easy to
make, what changes are a bit trickier, and encounter a bug that you'll want to know about.</itunes:subtitle><itunes:summary>We take all we've learned about the Observation framework and apply it to a larger, more real
world application: our rewrite of Apple's Scrumdinger demo. We'll see what changes are easy to
make, what changes are a bit trickier, and encounter a bug that you'll want to know about.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>01:01:09</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0256.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>256</itunes:episode><itunes:title>Observation in Practice</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0256-720p-0dcb3b4bef91477b8d858771ac989560.mp4" length="647900000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0256-720p-0dcb3b4bef91477b8d858771ac989560.mp4" length="647900000" type="video/mp4" medium="video"><media:title>Observation in Practice</media:title></media:content></item><item><title>Observation: The Future</title><pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep255-observation-the-future</link><guid>https://www.pointfree.co/episodes/ep255-observation-the-future</guid><description>We've explored the present state of observation in Swift, so what's the future have in store? Currently, observation is restricted to classes, while one of Swift's most celebrated features, value types, is left out in the cold. Let's explore a future in which observation is extended to value types.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We've explored the present state of observation in Swift, so what's the future have in store? Currently, observation is restricted to classes, while one of Swift's most celebrated features, value types, is left out in the cold. Let's explore a future in which observation is extended to value types.</itunes:subtitle><itunes:summary>We've explored the present state of observation in Swift, so what's the future have in store? Currently, observation is restricted to classes, while one of Swift's most celebrated features, value types, is left out in the cold. Let's explore a future in which observation is extended to value types.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:30:33</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0255.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>255</itunes:episode><itunes:title>Observation: The Future</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0255-720p-459d441587704a54b2da16eff4ba4402.mp4" length="379400000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0255-720p-459d441587704a54b2da16eff4ba4402.mp4" length="379400000" type="video/mp4" medium="video"><media:title>Observation: The Future</media:title></media:content></item><item><title>Observation: The Gotchas</title><pubDate>Mon, 23 Oct 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep254-observation-the-gotchas</link><guid>https://www.pointfree.co/episodes/ep254-observation-the-gotchas</guid><description>While the `@Observable` macro improves upon nearly every aspect of the `@State` and `@ObservedObject` property wrappers, it is not without its pitfalls. We will explore several gotchas that you should be aware of when adopting observation in your applications.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>While the `@Observable` macro improves upon nearly every aspect of the `@State` and `@ObservedObject` property wrappers, it is not without its pitfalls. We will explore several gotchas that you should be aware of when adopting observation in your applications.</itunes:subtitle><itunes:summary>While the `@Observable` macro improves upon nearly every aspect of the `@State` and `@ObservedObject` property wrappers, it is not without its pitfalls. We will explore several gotchas that you should be aware of when adopting observation in your applications.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:49:44</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0254.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>254</itunes:episode><itunes:title>Observation: The Gotchas</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0254-720p-5aa96388b0484a6a9d0beddf3c649c50.mp4" length="523100000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0254-720p-5aa96388b0484a6a9d0beddf3c649c50.mp4" length="523100000" type="video/mp4" medium="video"><media:title>Observation: The Gotchas</media:title></media:content></item><item><title>Observation: The Present</title><pubDate>Mon, 16 Oct 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep253-observation-the-present</link><guid>https://www.pointfree.co/episodes/ep253-observation-the-present</guid><description>The `@Observable` macro is here and we will see how it improves on nearly every aspect of the old tools in SwiftUI. We will also take a peek behind the curtain to not only get comfortable with the code the macro expands to, but also the actual open source code that powers the framework.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>The `@Observable` macro is here and we will see how it improves on nearly every aspect of the old tools in SwiftUI. We will also take a peek behind the curtain to not only get comfortable with the code the macro expands to, but also the actual open source code that powers the framework.</itunes:subtitle><itunes:summary>The `@Observable` macro is here and we will see how it improves on nearly every aspect of the old tools in SwiftUI. We will also take a peek behind the curtain to not only get comfortable with the code the macro expands to, but also the actual open source code that powers the framework.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:52:37</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0253.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>253</itunes:episode><itunes:title>Observation: The Present</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0253-720p-922708133a8749f3812bf371dfcefb8a.mp4" length="443500000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0253-720p-922708133a8749f3812bf371dfcefb8a.mp4" length="443500000" type="video/mp4" medium="video"><media:title>Observation: The Present</media:title></media:content></item><item><title>Observation: The Past</title><pubDate>Mon, 09 Oct 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep252-observation-the-past</link><guid>https://www.pointfree.co/episodes/ep252-observation-the-past</guid><description>It's time to dive deep into Swift's new observation tools. But to start we will take a look at the tools SwiftUI historically provided, including the `@State` and `@ObservedObject` property wrappers, how they behave and where they fall short, so that we can compare them to the new `@Observable` macro.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>It's time to dive deep into Swift's new observation tools. But to start we will take a look at the tools SwiftUI historically provided, including the `@State` and `@ObservedObject` property wrappers, how they behave and where they fall short, so that we can compare them to the new `@Observable` macro.</itunes:subtitle><itunes:summary>It's time to dive deep into Swift's new observation tools. But to start we will take a look at the tools SwiftUI historically provided, including the `@State` and `@ObservedObject` property wrappers, how they behave and where they fall short, so that we can compare them to the new `@Observable` macro.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:42:05</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0252.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>252</itunes:episode><itunes:title>Observation: The Past</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0252-720p-f4a9bce6ecd945d693b9ebe50a0d9626.mp4" length="572000000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0252-720p-f4a9bce6ecd945d693b9ebe50a0d9626.mp4" length="572000000" type="video/mp4" medium="video"><media:title>Observation: The Past</media:title></media:content></item><item><title>Testing &amp; Debugging Macros: Part 2</title><pubDate>Mon, 25 Sep 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep251-testing-debugging-macros-part-2</link><guid>https://www.pointfree.co/episodes/ep251-testing-debugging-macros-part-2</guid><description>Let's take our MacroTesting library for a spin with some more advanced macros, including those
that Apple has gathered since the feature's introduction, as well as a well-tested library in
the community: Ian Keen's MacroKit.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let's take our MacroTesting library for a spin with some more advanced macros, including those
that Apple has gathered since the feature's introduction, as well as a well-tested library in
the community: Ian Keen's MacroKit.</itunes:subtitle><itunes:summary>Let's take our MacroTesting library for a spin with some more advanced macros, including those
that Apple has gathered since the feature's introduction, as well as a well-tested library in
the community: Ian Keen's MacroKit.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:43:41</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0251.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>251</itunes:episode><itunes:title>Testing &amp; Debugging Macros: Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0251-720p-ffb1339e68fd40fd9278693f6a75c990.mp4" length="367600000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0251-720p-ffb1339e68fd40fd9278693f6a75c990.mp4" length="367600000" type="video/mp4" medium="video"><media:title>Testing &amp; Debugging Macros: Part 2</media:title></media:content></item><item><title>Testing &amp; Debugging Macros: Part 1</title><pubDate>Mon, 18 Sep 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep250-testing-debugging-macros-part-1</link><guid>https://www.pointfree.co/episodes/ep250-testing-debugging-macros-part-1</guid><description>Macros are here! To celebrate, we are releasing a brand new tool to aid in writing tests for them. First, let's explore testing macros using the tools that Apple provides, evaluate their shortcomings, and see how we can address them.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Macros are here! To celebrate, we are releasing a brand new tool to aid in writing tests for them. First, let's explore testing macros using the tools that Apple provides, evaluate their shortcomings, and see how we can address them.</itunes:subtitle><itunes:summary>Macros are here! To celebrate, we are releasing a brand new tool to aid in writing tests for them. First, let's explore testing macros using the tools that Apple provides, evaluate their shortcomings, and see how we can address them.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:46:05</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0250.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>250</itunes:episode><itunes:title>Testing &amp; Debugging Macros: Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0250-720p-926261855d154578b92e11638c900dec.mp4" length="430800000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0250-720p-926261855d154578b92e11638c900dec.mp4" length="430800000" type="video/mp4" medium="video"><media:title>Testing &amp; Debugging Macros: Part 1</media:title></media:content></item><item><title>Tour of the Composable Architecture: Persistence</title><pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep249-tour-of-the-composable-architecture-1-0-persistence</link><guid>https://www.pointfree.co/episodes/ep249-tour-of-the-composable-architecture-1-0-persistence</guid><description>We conclude the series by adding the final bit of functionality to our application: persistence. We'll see how adding a dependency on persistence can wreak havoc on previews and tests, and all the benefits of controlling it.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We conclude the series by adding the final bit of functionality to our application: persistence. We'll see how adding a dependency on persistence can wreak havoc on previews and tests, and all the benefits of controlling it.</itunes:subtitle><itunes:summary>We conclude the series by adding the final bit of functionality to our application: persistence. We'll see how adding a dependency on persistence can wreak havoc on previews and tests, and all the benefits of controlling it.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:51:28</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0249.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>249</itunes:episode><itunes:title>Tour of the Composable Architecture: Persistence</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0249-720p-6f3ae36852814b339cbd2a2584a925e6.mp4" length="440300000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0249-720p-6f3ae36852814b339cbd2a2584a925e6.mp4" length="440300000" type="video/mp4" medium="video"><media:title>Tour of the Composable Architecture: Persistence</media:title></media:content></item><item><title>Tour of the Composable Architecture: Dependencies</title><pubDate>Mon, 04 Sep 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep248-tour-of-the-composable-architecture-1-0-dependencies</link><guid>https://www.pointfree.co/episodes/ep248-tour-of-the-composable-architecture-1-0-dependencies</guid><description>We introduce a complex dependency to the record meeting screen: speech recognition. We will begin to integrate this dependency into our app's logic, and show how to control it for Xcode previews and tests</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We introduce a complex dependency to the record meeting screen: speech recognition. We will begin to integrate this dependency into our app's logic, and show how to control it for Xcode previews and tests</itunes:subtitle><itunes:summary>We introduce a complex dependency to the record meeting screen: speech recognition. We will begin to integrate this dependency into our app's logic, and show how to control it for Xcode previews and tests</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:51:28</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0248.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>248</itunes:episode><itunes:title>Tour of the Composable Architecture: Dependencies</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0248-720p-901924fe2a754010ae548c03c352c13c.mp4" length="444500000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0248-720p-901924fe2a754010ae548c03c352c13c.mp4" length="444500000" type="video/mp4" medium="video"><media:title>Tour of the Composable Architecture: Dependencies</media:title></media:content></item><item><title>Tour of the Composable Architecture: Domain Modeling</title><pubDate>Mon, 28 Aug 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep247-tour-of-the-composable-architecture-1-0-correctness</link><guid>https://www.pointfree.co/episodes/ep247-tour-of-the-composable-architecture-1-0-correctness</guid><description>We'll learn how to precisely model navigation in the Composable Architecture using an enum to eliminate impossible runtime states at compile time. And we'll begin to implement the app's most complex screen and most complex dependency: the record meeting view and the speech client.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We'll learn how to precisely model navigation in the Composable Architecture using an enum to eliminate impossible runtime states at compile time. And we'll begin to implement the app's most complex screen and most complex dependency: the record meeting view and the speech client.</itunes:subtitle><itunes:summary>We'll learn how to precisely model navigation in the Composable Architecture using an enum to eliminate impossible runtime states at compile time. And we'll begin to implement the app's most complex screen and most complex dependency: the record meeting view and the speech client.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:36:00</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0247.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>247</itunes:episode><itunes:title>Tour of the Composable Architecture: Domain Modeling</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0247-720p-0027d375d7a54ec5a0c7e02ac35e7080.mp4" length="325800000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0247-720p-0027d375d7a54ec5a0c7e02ac35e7080.mp4" length="325800000" type="video/mp4" medium="video"><media:title>Tour of the Composable Architecture: Domain Modeling</media:title></media:content></item><item><title>Tour of the Composable Architecture: Stacks</title><pubDate>Mon, 21 Aug 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep246-tour-of-the-composable-architecture-1-0-stacks</link><guid>https://www.pointfree.co/episodes/ep246-tour-of-the-composable-architecture-1-0-stacks</guid><description>We show how to add stack-based navigation to a Composable Architecture application, how to
support many different kinds of screens, how to deep link into a navigation stack, and how to
write deep tests for how navigation is integrated into the application.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We show how to add stack-based navigation to a Composable Architecture application, how to
support many different kinds of screens, how to deep link into a navigation stack, and how to
write deep tests for how navigation is integrated into the application.</itunes:subtitle><itunes:summary>We show how to add stack-based navigation to a Composable Architecture application, how to
support many different kinds of screens, how to deep link into a navigation stack, and how to
write deep tests for how navigation is integrated into the application.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>01:02:42</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0246.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>246</itunes:episode><itunes:title>Tour of the Composable Architecture: Stacks</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0246-720p-c0b27dbfcbc84812b8801b2b031aca60.mp4" length="508400000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0246-720p-c0b27dbfcbc84812b8801b2b031aca60.mp4" length="508400000" type="video/mp4" medium="video"><media:title>Tour of the Composable Architecture: Stacks</media:title></media:content></item><item><title>Tour of the Composable Architecture: Navigation</title><pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep245-tour-of-the-composable-architecture-1-0-navigation</link><guid>https://www.pointfree.co/episodes/ep245-tour-of-the-composable-architecture-1-0-navigation</guid><description>With the standups list and standup form features ready, it's time to integrate them together using the Composable Architecture's navigation tools. We will make it so you can add and edit standups via a sheet, and write comprehensive unit tests for this integration.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>With the standups list and standup form features ready, it's time to integrate them together using the Composable Architecture's navigation tools. We will make it so you can add and edit standups via a sheet, and write comprehensive unit tests for this integration.</itunes:subtitle><itunes:summary>With the standups list and standup form features ready, it's time to integrate them together using the Composable Architecture's navigation tools. We will make it so you can add and edit standups via a sheet, and write comprehensive unit tests for this integration.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:50:19</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0245.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>245</itunes:episode><itunes:title>Tour of the Composable Architecture: Navigation</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0245-720p-7b54184cdf8f4518b3658976de57d322.mp4" length="444400000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0245-720p-7b54184cdf8f4518b3658976de57d322.mp4" length="444400000" type="video/mp4" medium="video"><media:title>Tour of the Composable Architecture: Navigation</media:title></media:content></item><item><title>Tour of the Composable Architecture: Introducing Standups</title><pubDate>Mon, 07 Aug 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep244-tour-of-the-composable-architecture-1-0-standups-part-1</link><guid>https://www.pointfree.co/episodes/ep244-tour-of-the-composable-architecture-1-0-standups-part-1</guid><description>We continue our tour of the Composable Architecture 1.0 by rebuilding one of Apple's most
complex sample projects: [Scrumdinger](https://developer.apple.com/tutorials/app-dev-training/getting-started-with-scrumdinger).
We will create our own "Standups" app using the tools of the Composable Architecture.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We continue our tour of the Composable Architecture 1.0 by rebuilding one of Apple's most
complex sample projects: [Scrumdinger](https://developer.apple.com/tutorials/app-dev-training/getting-started-with-scrumdinger).
We will create our own "Standups" app using the tools of the Composable Architecture.</itunes:subtitle><itunes:summary>We continue our tour of the Composable Architecture 1.0 by rebuilding one of Apple's most
complex sample projects: [Scrumdinger](https://developer.apple.com/tutorials/app-dev-training/getting-started-with-scrumdinger).
We will create our own "Standups" app using the tools of the Composable Architecture.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:50:30</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0244.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>244</itunes:episode><itunes:title>Tour of the Composable Architecture: Introducing Standups</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0244-720p-b0f2e419439446049b607841f3dffcce.mp4" length="433300000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0244-720p-b0f2e419439446049b607841f3dffcce.mp4" length="433300000" type="video/mp4" medium="video"><media:title>Tour of the Composable Architecture: Introducing Standups</media:title></media:content></item><item><title>Tour of the Composable Architecture: The Basics</title><pubDate>Mon, 31 Jul 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep243-tour-of-the-composable-architecture-1-0-the-basics</link><guid>https://www.pointfree.co/episodes/ep243-tour-of-the-composable-architecture-1-0-the-basics</guid><description>The Composable Architecture has reached a major milestone: version 1.0. To celebrate this release we are doing a fresh tour of the library so that folks can become comfortable building applications with it in its most modern form. We will start with a simple, but substantial application that shows off the basics, before we recreate Apple's most complex sample project.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>The Composable Architecture has reached a major milestone: version 1.0. To celebrate this release we are doing a fresh tour of the library so that folks can become comfortable building applications with it in its most modern form. We will start with a simple, but substantial application that shows off the basics, before we recreate Apple's most complex sample project.</itunes:subtitle><itunes:summary>The Composable Architecture has reached a major milestone: version 1.0. To celebrate this release we are doing a fresh tour of the library so that folks can become comfortable building applications with it in its most modern form. We will start with a simple, but substantial application that shows off the basics, before we recreate Apple's most complex sample project.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:57:10</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0243.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>243</itunes:episode><itunes:title>Tour of the Composable Architecture: The Basics</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0243-720p-e49ed573eadd451fa6aab24b0d1c6c4f.mp4" length="545900000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0243-720p-e49ed573eadd451fa6aab24b0d1c6c4f.mp4" length="545900000" type="video/mp4" medium="video"><media:title>Tour of the Composable Architecture: The Basics</media:title></media:content></item><item><title>Reliable Async Tests: The Point</title><pubDate>Mon, 17 Jul 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep242-reliable-async-tests-the-point</link><guid>https://www.pointfree.co/episodes/ep242-reliable-async-tests-the-point</guid><description>What's the point of the work we did to make async testing reliable and deterministic, and are
we even testing reality anymore? We conclude our series by rewriting our feature and tests
using Combine instead of async-await, and comparing both approaches.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>What's the point of the work we did to make async testing reliable and deterministic, and are
we even testing reality anymore? We conclude our series by rewriting our feature and tests
using Combine instead of async-await, and comparing both approaches.</itunes:subtitle><itunes:summary>What's the point of the work we did to make async testing reliable and deterministic, and are
we even testing reality anymore? We conclude our series by rewriting our feature and tests
using Combine instead of async-await, and comparing both approaches.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:40:30</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0242.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>242</itunes:episode><itunes:title>Reliable Async Tests: The Point</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0242-720p-d1e8af5fd98a4965b35eb455b8f3f4e9.mp4" length="470100000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0242-720p-d1e8af5fd98a4965b35eb455b8f3f4e9.mp4" length="470100000" type="video/mp4" medium="video"><media:title>Reliable Async Tests: The Point</media:title></media:content></item><item><title>Reliable Async Tests: 🥹</title><pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep241-reliable-async-tests</link><guid>https://www.pointfree.co/episodes/ep241-reliable-async-tests</guid><description>We continue our deep dive into advanced Swift concurrency by exploring the concept of "executors" to better understand its global enqueue hook. We will then put this hook to work and finally have reliable, 100% deterministic async tests.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We continue our deep dive into advanced Swift concurrency by exploring the concept of "executors" to better understand its global enqueue hook. We will then put this hook to work and finally have reliable, 100% deterministic async tests.</itunes:subtitle><itunes:summary>We continue our deep dive into advanced Swift concurrency by exploring the concept of "executors" to better understand its global enqueue hook. We will then put this hook to work and finally have reliable, 100% deterministic async tests.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:37:54</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0241.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>241</itunes:episode><itunes:title>Reliable Async Tests: 🥹</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0241-720p-3c40faafa3f0420685e382dcaf9b85b0.mp4" length="403700000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0241-720p-3c40faafa3f0420685e382dcaf9b85b0.mp4" length="403700000" type="video/mp4" medium="video"><media:title>Reliable Async Tests: 🥹</media:title></media:content></item><item><title>Reliable Async Tests: 😳</title><pubDate>Mon, 03 Jul 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep240-reliable-async-tests</link><guid>https://www.pointfree.co/episodes/ep240-reliable-async-tests</guid><description>We dive into Apple's Async Algorithms package to explore some advanced usages of Swift's concurrency runtime, including a particular tool we can leverage to bend the will of async code to our advantage in tests.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We dive into Apple's Async Algorithms package to explore some advanced usages of Swift's concurrency runtime, including a particular tool we can leverage to bend the will of async code to our advantage in tests.</itunes:subtitle><itunes:summary>We dive into Apple's Async Algorithms package to explore some advanced usages of Swift's concurrency runtime, including a particular tool we can leverage to bend the will of async code to our advantage in tests.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:23:42</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0240.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>240</itunes:episode><itunes:title>Reliable Async Tests: 😳</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0240-720p-2951127a63af41baa8f685e316a3747c.mp4" length="280100000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0240-720p-2951127a63af41baa8f685e316a3747c.mp4" length="280100000" type="video/mp4" medium="video"><media:title>Reliable Async Tests: 😳</media:title></media:content></item><item><title>Reliable Async Tests: More Problems</title><pubDate>Mon, 26 Jun 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep239-reliable-async-tests-more-problems</link><guid>https://www.pointfree.co/episodes/ep239-reliable-async-tests-more-problems</guid><description>We explore a few more advanced scenarios when it comes to async code—including cancellation, async sequences, and clocks—and how difficult they are to test.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We explore a few more advanced scenarios when it comes to async code—including cancellation, async sequences, and clocks—and how difficult they are to test.</itunes:subtitle><itunes:summary>We explore a few more advanced scenarios when it comes to async code—including cancellation, async sequences, and clocks—and how difficult they are to test.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:27:34</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0239.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>239</itunes:episode><itunes:title>Reliable Async Tests: More Problems</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0239-720p-08faad24aea74d85bad713202f08a53b.mp4" length="375200000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0239-720p-08faad24aea74d85bad713202f08a53b.mp4" length="375200000" type="video/mp4" medium="video"><media:title>Reliable Async Tests: More Problems</media:title></media:content></item><item><title>Reliable Async Tests: The Problem</title><pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep238-reliable-async-tests-the-problem</link><guid>https://www.pointfree.co/episodes/ep238-reliable-async-tests-the-problem</guid><description>While Swift provides wonderful tools for writing async code, there are gaps in its tools for testing it. Let's explore the tools it *does* provide to show where they succeed, and where they fall short.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>While Swift provides wonderful tools for writing async code, there are gaps in its tools for testing it. Let's explore the tools it *does* provide to show where they succeed, and where they fall short.</itunes:subtitle><itunes:summary>While Swift provides wonderful tools for writing async code, there are gaps in its tools for testing it. Let's explore the tools it *does* provide to show where they succeed, and where they fall short.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:47:48</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0238.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>238</itunes:episode><itunes:title>Reliable Async Tests: The Problem</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0238-720p-248930f3a6d048018ad9c4b95a40e9b6.mp4" length="477700000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0238-720p-248930f3a6d048018ad9c4b95a40e9b6.mp4" length="477700000" type="video/mp4" medium="video"><media:title>Reliable Async Tests: The Problem</media:title></media:content></item><item><title>Composable Stacks: Testing</title><pubDate>Mon, 29 May 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep237-composable-stacks-testing</link><guid>https://www.pointfree.co/episodes/ep237-composable-stacks-testing</guid><description>We complete the series by writing a comprehensive test suite for our stack navigation-based
app. We will uncover some shortcomings of the tools we've built and address each one,
resulting in a set of tools that are a joy to test with.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We complete the series by writing a comprehensive test suite for our stack navigation-based
app. We will uncover some shortcomings of the tools we've built and address each one,
resulting in a set of tools that are a joy to test with.</itunes:subtitle><itunes:summary>We complete the series by writing a comprehensive test suite for our stack navigation-based
app. We will uncover some shortcomings of the tools we've built and address each one,
resulting in a set of tools that are a joy to test with.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>01:06:29</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0237.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>237</itunes:episode><itunes:title>Composable Stacks: Testing</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0237-720p-333db739da22488593b1bbc8a96cf3fc.mp4" length="661700000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0237-720p-333db739da22488593b1bbc8a96cf3fc.mp4" length="661700000" type="video/mp4" medium="video"><media:title>Composable Stacks: Testing</media:title></media:content></item><item><title>Composable Stacks: Effect Cancellation</title><pubDate>Mon, 22 May 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep236-composable-stacks-effect-cancellation</link><guid>https://www.pointfree.co/episodes/ep236-composable-stacks-effect-cancellation</guid><description>We round out the functionality of the Composable Architecture's stack navigation tools. This includes automatic cancellation of a child feature's effects when it's popped off the stack, and the ability for a child feature to pop itself. Along the way we will clean up the domain modeling and user experience of working with these tools.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We round out the functionality of the Composable Architecture's stack navigation tools. This includes automatic cancellation of a child feature's effects when it's popped off the stack, and the ability for a child feature to pop itself. Along the way we will clean up the domain modeling and user experience of working with these tools.</itunes:subtitle><itunes:summary>We round out the functionality of the Composable Architecture's stack navigation tools. This includes automatic cancellation of a child feature's effects when it's popped off the stack, and the ability for a child feature to pop itself. Along the way we will clean up the domain modeling and user experience of working with these tools.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:37:55</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0236.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>236</itunes:episode><itunes:title>Composable Stacks: Effect Cancellation</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0236-720p-27e34c88af864c3c93c190f402bf7527.mp4" length="346600000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0236-720p-27e34c88af864c3c93c190f402bf7527.mp4" length="346600000" type="video/mp4" medium="video"><media:title>Composable Stacks: Effect Cancellation</media:title></media:content></item><item><title>Composable Stacks: State Ergonomics</title><pubDate>Mon, 15 May 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep235-composable-stacks-state-ergonomics</link><guid>https://www.pointfree.co/episodes/ep235-composable-stacks-state-ergonomics</guid><description>We introduce a complementary `StackState` wrapper to our navigation tools to solve a few
issues that came from repurposing the identified array type. Once implemented and integrated,
we will put these tools' superpowers to work by implementing two new features.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We introduce a complementary `StackState` wrapper to our navigation tools to solve a few
issues that came from repurposing the identified array type. Once implemented and integrated,
we will put these tools' superpowers to work by implementing two new features.</itunes:subtitle><itunes:summary>We introduce a complementary `StackState` wrapper to our navigation tools to solve a few
issues that came from repurposing the identified array type. Once implemented and integrated,
we will put these tools' superpowers to work by implementing two new features.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:59:33</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0235.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>235</itunes:episode><itunes:title>Composable Stacks: State Ergonomics</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0235-720p-23e32809ff174f5ea8fb0e9c20fe84f6.mp4" length="551400000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0235-720p-23e32809ff174f5ea8fb0e9c20fe84f6.mp4" length="551400000" type="video/mp4" medium="video"><media:title>Composable Stacks: State Ergonomics</media:title></media:content></item><item><title>Composable Stacks: Action Ergonomics</title><pubDate>Mon, 08 May 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep234-composable-stacks-action-ergonomics</link><guid>https://www.pointfree.co/episodes/ep234-composable-stacks-action-ergonomics</guid><description>We begin designing brand new navigation stack tools for the Composable Architecture to solve *all* of the problems we encountered when shoehorning stack navigation into the existing tools, and more.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We begin designing brand new navigation stack tools for the Composable Architecture to solve *all* of the problems we encountered when shoehorning stack navigation into the existing tools, and more.</itunes:subtitle><itunes:summary>We begin designing brand new navigation stack tools for the Composable Architecture to solve *all* of the problems we encountered when shoehorning stack navigation into the existing tools, and more.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:38:20</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0234.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>234</itunes:episode><itunes:title>Composable Stacks: Action Ergonomics</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0234-720p-192b0b4348f84c17ab064ef11c12ff10.mp4" length="348100000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0234-720p-192b0b4348f84c17ab064ef11c12ff10.mp4" length="348100000" type="video/mp4" medium="video"><media:title>Composable Stacks: Action Ergonomics</media:title></media:content></item><item><title>Composable Stacks: Multiple Destinations</title><pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep233-composable-stacks-multiple-destinations</link><guid>https://www.pointfree.co/episodes/ep233-composable-stacks-multiple-destinations</guid><description>Let's insert a new feature into the navigation stack. We'll take things step-by-step, employing an enum to hold multiple features in a single package, and making small changes to how we use our existing APIs before sketching out all-new tools dedicated to stack navigation.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let's insert a new feature into the navigation stack. We'll take things step-by-step, employing an enum to hold multiple features in a single package, and making small changes to how we use our existing APIs before sketching out all-new tools dedicated to stack navigation.</itunes:subtitle><itunes:summary>Let's insert a new feature into the navigation stack. We'll take things step-by-step, employing an enum to hold multiple features in a single package, and making small changes to how we use our existing APIs before sketching out all-new tools dedicated to stack navigation.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:30:19</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0233.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>233</itunes:episode><itunes:title>Composable Stacks: Multiple Destinations</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0233-720p-e571a6eba5cf499c8da53e1d994e3e58.mp4" length="282400000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0233-720p-e571a6eba5cf499c8da53e1d994e3e58.mp4" length="282400000" type="video/mp4" medium="video"><media:title>Composable Stacks: Multiple Destinations</media:title></media:content></item><item><title>Composable Stacks: Multiple Layers</title><pubDate>Mon, 24 Apr 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep232-composable-stacks-multiple-layers</link><guid>https://www.pointfree.co/episodes/ep232-composable-stacks-multiple-layers</guid><description>We enhance our navigation stack with a bit more complexity by adding the ability to drill down multiple layers in multiple ways: using the new navigation link API, and programmatically. We also prepare a new feature to add to the stack.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We enhance our navigation stack with a bit more complexity by adding the ability to drill down multiple layers in multiple ways: using the new navigation link API, and programmatically. We also prepare a new feature to add to the stack.</itunes:subtitle><itunes:summary>We enhance our navigation stack with a bit more complexity by adding the ability to drill down multiple layers in multiple ways: using the new navigation link API, and programmatically. We also prepare a new feature to add to the stack.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:24:00</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0232.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>232</itunes:episode><itunes:title>Composable Stacks: Multiple Layers</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0232-720p-b6e822cea0284f72a81e6725b1ab25a1.mp4" length="211800000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0232-720p-b6e822cea0284f72a81e6725b1ab25a1.mp4" length="211800000" type="video/mp4" medium="video"><media:title>Composable Stacks: Multiple Layers</media:title></media:content></item><item><title>Composable Stacks: vs Trees</title><pubDate>Mon, 17 Apr 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep231-composable-stacks-vs-trees</link><guid>https://www.pointfree.co/episodes/ep231-composable-stacks-vs-trees</guid><description>It's finally time to tackle navigation stacks in the Composable Architecture! They are a
powerful, new tool in SwiftUI and stray a bit from all the other forms of tree-based
navigation we've explored. Let's compare the two styles and see what it takes to integrate
stacks into the library's navigation tools.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>It's finally time to tackle navigation stacks in the Composable Architecture! They are a
powerful, new tool in SwiftUI and stray a bit from all the other forms of tree-based
navigation we've explored. Let's compare the two styles and see what it takes to integrate
stacks into the library's navigation tools.</itunes:subtitle><itunes:summary>It's finally time to tackle navigation stacks in the Composable Architecture! They are a
powerful, new tool in SwiftUI and stray a bit from all the other forms of tree-based
navigation we've explored. Let's compare the two styles and see what it takes to integrate
stacks into the library's navigation tools.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:45:54</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0231.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>231</itunes:episode><itunes:title>Composable Stacks: vs Trees</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0231-720p-b7a98bbd6d124af99690a854034558f7.mp4" length="380600000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0231-720p-b7a98bbd6d124af99690a854034558f7.mp4" length="380600000" type="video/mp4" medium="video"><media:title>Composable Stacks: vs Trees</media:title></media:content></item><item><title>Composable Navigation: Stack vs Heap</title><pubDate>Mon, 10 Apr 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep230-composable-navigation-stack-vs-heap</link><guid>https://www.pointfree.co/episodes/ep230-composable-navigation-stack-vs-heap</guid><description>We take a detour to learn about the stack, the heap, copy-on-write, and how we can use this knowledge to further improve our navigation tools by introducing of a property wrapper.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We take a detour to learn about the stack, the heap, copy-on-write, and how we can use this knowledge to further improve our navigation tools by introducing of a property wrapper.</itunes:subtitle><itunes:summary>We take a detour to learn about the stack, the heap, copy-on-write, and how we can use this knowledge to further improve our navigation tools by introducing of a property wrapper.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:50:29</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0230.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>230</itunes:episode><itunes:title>Composable Navigation: Stack vs Heap</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0230-720p-b14947e9e4804e178eade3fe81402834.mp4" length="426200000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0230-720p-b14947e9e4804e178eade3fe81402834.mp4" length="426200000" type="video/mp4" medium="video"><media:title>Composable Navigation: Stack vs Heap</media:title></media:content></item><item><title>Composable Navigation: Correctness</title><pubDate>Mon, 03 Apr 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep229-composable-navigation-correctness</link><guid>https://www.pointfree.co/episodes/ep229-composable-navigation-correctness</guid><description>We now support many different forms of navigation in the Composable Architecture, but if used naively, they open us up to invalid states, like being navigated to several screens at a time. We’ll correct this with the help of Swift's enums.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We now support many different forms of navigation in the Composable Architecture, but if used naively, they open us up to invalid states, like being navigated to several screens at a time. We’ll correct this with the help of Swift's enums.</itunes:subtitle><itunes:summary>We now support many different forms of navigation in the Composable Architecture, but if used naively, they open us up to invalid states, like being navigated to several screens at a time. We’ll correct this with the help of Swift's enums.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>01:09:56</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0229.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>229</itunes:episode><itunes:title>Composable Navigation: Correctness</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0229-720p-42c74beb82a745f5a6cd64ca1b7ab064.mp4" length="702600000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0229-720p-42c74beb82a745f5a6cd64ca1b7ab064.mp4" length="702600000" type="video/mp4" medium="video"><media:title>Composable Navigation: Correctness</media:title></media:content></item><item><title>Composable Navigation: Destinations</title><pubDate>Mon, 27 Mar 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep228-composable-navigation-destinations</link><guid>https://www.pointfree.co/episodes/ep228-composable-navigation-destinations</guid><description>While we just tackled drill-down navigation, sadly the API we used was deprecated in iOS 16. Let's get things working with the new `navigationDestination` view modifier, and see what testing in the Composable Architecture has to say about navigation.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>While we just tackled drill-down navigation, sadly the API we used was deprecated in iOS 16. Let's get things working with the new `navigationDestination` view modifier, and see what testing in the Composable Architecture has to say about navigation.</itunes:subtitle><itunes:summary>While we just tackled drill-down navigation, sadly the API we used was deprecated in iOS 16. Let's get things working with the new `navigationDestination` view modifier, and see what testing in the Composable Architecture has to say about navigation.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:31:51</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0228.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>228</itunes:episode><itunes:title>Composable Navigation: Destinations</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0228-720p-685fe8ffaaa0404ba0e942f2a2719cb4.mp4" length="382600000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0228-720p-685fe8ffaaa0404ba0e942f2a2719cb4.mp4" length="382600000" type="video/mp4" medium="video"><media:title>Composable Navigation: Destinations</media:title></media:content></item><item><title>Composable Navigation: Links</title><pubDate>Mon, 20 Mar 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep227-composable-navigation-links</link><guid>https://www.pointfree.co/episodes/ep227-composable-navigation-links</guid><description>We have a single navigation API powering alerts, dialogs, sheets, popovers, and full screen covers, but what about the prototypical form of navigation, the one that everyone thinks of when they hear "navigation"? It's time to tackle links.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We have a single navigation API powering alerts, dialogs, sheets, popovers, and full screen covers, but what about the prototypical form of navigation, the one that everyone thinks of when they hear "navigation"? It's time to tackle links.</itunes:subtitle><itunes:summary>We have a single navigation API powering alerts, dialogs, sheets, popovers, and full screen covers, but what about the prototypical form of navigation, the one that everyone thinks of when they hear "navigation"? It's time to tackle links.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:31:21</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0227.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>227</itunes:episode><itunes:title>Composable Navigation: Links</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0227-720p-71249939f70943ca8e3e65bf2d396361.mp4" length="286800000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0227-720p-71249939f70943ca8e3e65bf2d396361.mp4" length="286800000" type="video/mp4" medium="video"><media:title>Composable Navigation: Links</media:title></media:content></item><item><title>Composable Navigation: Unification</title><pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep226-composable-navigation-unification</link><guid>https://www.pointfree.co/episodes/ep226-composable-navigation-unification</guid><description>Let's prepare to delete a *lot* of code. The navigation APIs we've built so far to drive alerts, dialogs, and sheets all have more or less the same shape. We can unify them all in a single package that can also be applied to popovers, fullscreen covers, and more!</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let's prepare to delete a *lot* of code. The navigation APIs we've built so far to drive alerts, dialogs, and sheets all have more or less the same shape. We can unify them all in a single package that can also be applied to popovers, fullscreen covers, and more!</itunes:subtitle><itunes:summary>Let's prepare to delete a *lot* of code. The navigation APIs we've built so far to drive alerts, dialogs, and sheets all have more or less the same shape. We can unify them all in a single package that can also be applied to popovers, fullscreen covers, and more!</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:28:27</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0226.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>226</itunes:episode><itunes:title>Composable Navigation: Unification</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0226-720p-31ed679c58ad499e8a39050506b8f563.mp4" length="323600000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0226-720p-31ed679c58ad499e8a39050506b8f563.mp4" length="323600000" type="video/mp4" medium="video"><media:title>Composable Navigation: Unification</media:title></media:content></item><item><title>Composable Navigation: Effect Cancellation</title><pubDate>Mon, 06 Mar 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep225-composable-navigation-behavior</link><guid>https://www.pointfree.co/episodes/ep225-composable-navigation-behavior</guid><description>We add superpowers to the navigation tools of the [Composable Architecture][tca-gh], including
automatically cancelling a child feature's effects upon dismissal, and even letting child
features dismiss themselves! Plus, we look at how "non-exhaustive" testing simplifies
navigation-based tests.

[tca-gh]: http://github.com/pointfreeco/swift-composable-architecture</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We add superpowers to the navigation tools of the [Composable Architecture][tca-gh], including
automatically cancelling a child feature's effects upon dismissal, and even letting child
features dismiss themselves! Plus, we look at how "non-exhaustive" testing simplifies
navigation-based tests.

[tca-gh]: http://github.com/pointfreeco/swift-composable-architecture</itunes:subtitle><itunes:summary>We add superpowers to the navigation tools of the [Composable Architecture][tca-gh], including
automatically cancelling a child feature's effects upon dismissal, and even letting child
features dismiss themselves! Plus, we look at how "non-exhaustive" testing simplifies
navigation-based tests.

[tca-gh]: http://github.com/pointfreeco/swift-composable-architecture</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:52:05</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0225.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>225</itunes:episode><itunes:title>Composable Navigation: Effect Cancellation</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0225-720p-dc081abdzf8d7z4ad3zabb2z3ad3dd43.mp4" length="51660000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0225-720p-dc081abdzf8d7z4ad3zabb2z3ad3dd43.mp4" length="51660000" type="video/mp4" medium="video"><media:title>Composable Navigation: Effect Cancellation</media:title></media:content></item><item><title>Composable Navigation: Sheets</title><pubDate>Mon, 27 Feb 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep224-composable-navigation-sheets</link><guid>https://www.pointfree.co/episodes/ep224-composable-navigation-sheets</guid><description>We tackle a more complex form of navigation: sheets! We'll start with the tools the Composable
Architecture ships today before greatly simplifying them, taking inspiration from the tools we
built for alerts and dialogs.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We tackle a more complex form of navigation: sheets! We'll start with the tools the Composable
Architecture ships today before greatly simplifying them, taking inspiration from the tools we
built for alerts and dialogs.</itunes:subtitle><itunes:summary>We tackle a more complex form of navigation: sheets! We'll start with the tools the Composable
Architecture ships today before greatly simplifying them, taking inspiration from the tools we
built for alerts and dialogs.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>01:14:12</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0224.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>224</itunes:episode><itunes:title>Composable Navigation: Sheets</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0224-720p-75eccca3eedf4d97b7186413ef9e7b96.mp4" length="627700000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0224-720p-75eccca3eedf4d97b7186413ef9e7b96.mp4" length="627700000" type="video/mp4" medium="video"><media:title>Composable Navigation: Sheets</media:title></media:content></item><item><title>Composable Navigation: Alerts &amp; Dialogs</title><pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep223-composable-navigation-alerts-dialogs</link><guid>https://www.pointfree.co/episodes/ep223-composable-navigation-alerts-dialogs</guid><description>Let's dip our toes into the new composable navigation tools by improving how alerts and
confirmation dialogs can used in the library. We will create a new reducer operator that more
correctly handles the logic and hides unnecessary details.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let's dip our toes into the new composable navigation tools by improving how alerts and
confirmation dialogs can used in the library. We will create a new reducer operator that more
correctly handles the logic and hides unnecessary details.</itunes:subtitle><itunes:summary>Let's dip our toes into the new composable navigation tools by improving how alerts and
confirmation dialogs can used in the library. We will create a new reducer operator that more
correctly handles the logic and hides unnecessary details.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>01:02:08</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0223.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>223</itunes:episode><itunes:title>Composable Navigation: Alerts &amp; Dialogs</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0223-720p-50c1f7e218c44606bb42bd8d1f36e53e.mp4" length="592700000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0223-720p-50c1f7e218c44606bb42bd8d1f36e53e.mp4" length="592700000" type="video/mp4" medium="video"><media:title>Composable Navigation: Alerts &amp; Dialogs</media:title></media:content></item><item><title>Composable Navigation: Tabs</title><pubDate>Mon, 13 Feb 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep222-composable-navigation-tabs</link><guid>https://www.pointfree.co/episodes/ep222-composable-navigation-tabs</guid><description>It's finally time to tackle navigation in the Composable Architecture. We'll port the
Inventory app we first built to understand SwiftUI navigation, which will push us to
understand what makes the architecture "composable," how it facilitates communication between
features, and testing.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>It's finally time to tackle navigation in the Composable Architecture. We'll port the
Inventory app we first built to understand SwiftUI navigation, which will push us to
understand what makes the architecture "composable," how it facilitates communication between
features, and testing.</itunes:subtitle><itunes:summary>It's finally time to tackle navigation in the Composable Architecture. We'll port the
Inventory app we first built to understand SwiftUI navigation, which will push us to
understand what makes the architecture "composable," how it facilitates communication between
features, and testing.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>01:03:59</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0222.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>222</itunes:episode><itunes:title>Composable Navigation: Tabs</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0222-720p-c285671ab6574c70ae2375adfa7a937a.mp4" length="671800000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0222-720p-c285671ab6574c70ae2375adfa7a937a.mp4" length="671800000" type="video/mp4" medium="video"><media:title>Composable Navigation: Tabs</media:title></media:content></item><item><title>Point-Free Live: Dependencies &amp; Stacks</title><pubDate>Mon, 06 Feb 2023 00:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep221-point-free-live-dependencies-stacks</link><guid>https://www.pointfree.co/episodes/ep221-point-free-live-dependencies-stacks</guid><description>Our first ever livestream! We talk about a few new features that made it into our
[Dependencies](http://github.com/pointfreeco/swift-dependencies) library when we extracted it
from the Composable Architecture, live code our way through a `NavigationStack` refactor of
our [Standups](http://github.com/pointfreeco/standups) app, and answer your questions along
the way!</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Our first ever livestream! We talk about a few new features that made it into our
[Dependencies](http://github.com/pointfreeco/swift-dependencies) library when we extracted it
from the Composable Architecture, live code our way through a `NavigationStack` refactor of
our [Standups](http://github.com/pointfreeco/standups) app, and answer your questions along
the way!</itunes:subtitle><itunes:summary>Our first ever livestream! We talk about a few new features that made it into our
[Dependencies](http://github.com/pointfreeco/swift-dependencies) library when we extracted it
from the Composable Architecture, live code our way through a `NavigationStack` refactor of
our [Standups](http://github.com/pointfreeco/standups) app, and answer your questions along
the way!</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>01:34:34</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0221.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>221</itunes:episode><itunes:title>Point-Free Live: Dependencies &amp; Stacks</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0221-720p-8449bf17411249aa8dc3f31272f779cc.mp4" length="960800000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0221-720p-8449bf17411249aa8dc3f31272f779cc.mp4" length="960800000" type="video/mp4" medium="video"><media:title>Point-Free Live: Dependencies &amp; Stacks</media:title></media:content></item><item><title>Modern SwiftUI: Dependencies &amp; Testing, Part 2</title><pubDate>Mon, 16 Jan 2023 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep220-modern-swiftui-dependencies-testing-part-2</link><guid>https://www.pointfree.co/episodes/ep220-modern-swiftui-dependencies-testing-part-2</guid><description>We conclude the series by taking control of the last two dependencies: persistence and speech recognition. We'll make use of even more features of our new Dependencies library and we'll write tests for our features that would have been impossible before.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We conclude the series by taking control of the last two dependencies: persistence and speech recognition. We'll make use of even more features of our new Dependencies library and we'll write tests for our features that would have been impossible before.</itunes:subtitle><itunes:summary>We conclude the series by taking control of the last two dependencies: persistence and speech recognition. We'll make use of even more features of our new Dependencies library and we'll write tests for our features that would have been impossible before.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:40:36</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0220.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>220</itunes:episode><itunes:title>Modern SwiftUI: Dependencies &amp; Testing, Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0220-720p-8aeee455630c4512a4fe0f87436aa798.mp4" length="363400000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0220-720p-8aeee455630c4512a4fe0f87436aa798.mp4" length="363400000" type="video/mp4" medium="video"><media:title>Modern SwiftUI: Dependencies &amp; Testing, Part 2</media:title></media:content></item><item><title>Modern SwiftUI: Dependencies &amp; Testing, Part 1</title><pubDate>Mon, 09 Jan 2023 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep219-modern-swiftui-dependencies-testing-part-1</link><guid>https://www.pointfree.co/episodes/ep219-modern-swiftui-dependencies-testing-part-1</guid><description>Uncontrolled dependencies can wreak havoc on a modern SwiftUI code base. Let's explore why, and how we can begin to control them using a brand new library.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Uncontrolled dependencies can wreak havoc on a modern SwiftUI code base. Let's explore why, and how we can begin to control them using a brand new library.</itunes:subtitle><itunes:summary>Uncontrolled dependencies can wreak havoc on a modern SwiftUI code base. Let's explore why, and how we can begin to control them using a brand new library.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:31:47</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0219.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>219</itunes:episode><itunes:title>Modern SwiftUI: Dependencies &amp; Testing, Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0219-720p-ecdb3064d31a42929186ab633f13b932.mp4" length="288700000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0219-720p-ecdb3064d31a42929186ab633f13b932.mp4" length="288700000" type="video/mp4" medium="video"><media:title>Modern SwiftUI: Dependencies &amp; Testing, Part 1</media:title></media:content></item><item><title>Modern SwiftUI: Effects, Part 2</title><pubDate>Mon, 02 Jan 2023 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep218-modern-swiftui-effects-part-2</link><guid>https://www.pointfree.co/episodes/ep218-modern-swiftui-effects-part-2</guid><description>We wrap up the "record meeting" screen by implementing two more side effects: speech recognition, and persistence. We'll experience the pitfalls of interacting directly with these dependencies, and why we should care about controlling them.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We wrap up the "record meeting" screen by implementing two more side effects: speech recognition, and persistence. We'll experience the pitfalls of interacting directly with these dependencies, and why we should care about controlling them.</itunes:subtitle><itunes:summary>We wrap up the "record meeting" screen by implementing two more side effects: speech recognition, and persistence. We'll experience the pitfalls of interacting directly with these dependencies, and why we should care about controlling them.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:25:02</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0218.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>218</itunes:episode><itunes:title>Modern SwiftUI: Effects, Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0218-720p-8e422a97b45f45baafb48cae890813c0.mp4" length="254000000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0218-720p-8e422a97b45f45baafb48cae890813c0.mp4" length="254000000" type="video/mp4" medium="video"><media:title>Modern SwiftUI: Effects, Part 2</media:title></media:content></item><item><title>Modern SwiftUI: Effects, Part 1</title><pubDate>Mon, 19 Dec 2022 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep217-modern-swiftui-effects-part-1</link><guid>https://www.pointfree.co/episodes/ep217-modern-swiftui-effects-part-1</guid><description>After a brief digression to explore the performance and ergonomics of identified collections, we dive into the messy world of side effects by implementing the "record meeting" screen. We'll start with the timer, which has surprisingly nuanced logic.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>After a brief digression to explore the performance and ergonomics of identified collections, we dive into the messy world of side effects by implementing the "record meeting" screen. We'll start with the timer, which has surprisingly nuanced logic.</itunes:subtitle><itunes:summary>After a brief digression to explore the performance and ergonomics of identified collections, we dive into the messy world of side effects by implementing the "record meeting" screen. We'll start with the timer, which has surprisingly nuanced logic.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:37:24</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0217.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>217</itunes:episode><itunes:title>Modern SwiftUI: Effects, Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0217-720p-efbaa692653e45988d3e2baca9ccfc49.mp4" length="298400000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0217-720p-efbaa692653e45988d3e2baca9ccfc49.mp4" length="298400000" type="video/mp4" medium="video"><media:title>Modern SwiftUI: Effects, Part 1</media:title></media:content></item><item><title>Modern SwiftUI: Navigation, Part 2</title><pubDate>Mon, 12 Dec 2022 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep216-modern-swiftui-navigation-part-2</link><guid>https://www.pointfree.co/episodes/ep216-modern-swiftui-navigation-part-2</guid><description>We add more screens and more navigation to our rewrite of Apple's Scrumdinger, including the standup detail view, a delete confirmation alert, and we set up parent-child communication between features.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We add more screens and more navigation to our rewrite of Apple's Scrumdinger, including the standup detail view, a delete confirmation alert, and we set up parent-child communication between features.</itunes:subtitle><itunes:summary>We add more screens and more navigation to our rewrite of Apple's Scrumdinger, including the standup detail view, a delete confirmation alert, and we set up parent-child communication between features.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:42:33</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0216.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>216</itunes:episode><itunes:title>Modern SwiftUI: Navigation, Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0216-720p-b0b24bb1e94841e0b7e591550612c57b.mp4" length="368900000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0216-720p-b0b24bb1e94841e0b7e591550612c57b.mp4" length="368900000" type="video/mp4" medium="video"><media:title>Modern SwiftUI: Navigation, Part 2</media:title></media:content></item><item><title>Modern SwiftUI: Navigation, Part 1</title><pubDate>Mon, 05 Dec 2022 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep215-modern-swiftui-navigation-part-1</link><guid>https://www.pointfree.co/episodes/ep215-modern-swiftui-navigation-part-1</guid><description>We begin to layer on behavior in our rewrite of Apple's "Scrumdinger" demo application, starting with navigation. We will do some upfront work to model it in our application state, as concisely as possible, to avoid a whole class of bugs, unlock deep linking, and enable testability.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We begin to layer on behavior in our rewrite of Apple's "Scrumdinger" demo application, starting with navigation. We will do some upfront work to model it in our application state, as concisely as possible, to avoid a whole class of bugs, unlock deep linking, and enable testability.</itunes:subtitle><itunes:summary>We begin to layer on behavior in our rewrite of Apple's "Scrumdinger" demo application, starting with navigation. We will do some upfront work to model it in our application state, as concisely as possible, to avoid a whole class of bugs, unlock deep linking, and enable testability.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:34:49</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0215.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>215</itunes:episode><itunes:title>Modern SwiftUI: Navigation, Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0215-720p-e64a2b9131fb4679847f2aff3b97a754.mp4" length="297000000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0215-720p-e64a2b9131fb4679847f2aff3b97a754.mp4" length="297000000" type="video/mp4" medium="video"><media:title>Modern SwiftUI: Navigation, Part 1</media:title></media:content></item><item><title>Modern SwiftUI: Introduction</title><pubDate>Mon, 28 Nov 2022 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep214-modern-swiftui-introduction</link><guid>https://www.pointfree.co/episodes/ep214-modern-swiftui-introduction</guid><description>What goes into building a SwiftUI application with best, modern practices? We’ll take a look
at Apple’s “Scrumdinger” sample code, a decently complex app that tackles many real world
problems, get familiar with how it's built, and then rewrite it!</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>What goes into building a SwiftUI application with best, modern practices? We’ll take a look
at Apple’s “Scrumdinger” sample code, a decently complex app that tackles many real world
problems, get familiar with how it's built, and then rewrite it!</itunes:subtitle><itunes:summary>What goes into building a SwiftUI application with best, modern practices? We’ll take a look
at Apple’s “Scrumdinger” sample code, a decently complex app that tackles many real world
problems, get familiar with how it's built, and then rewrite it!</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:32:43</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0214.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>214</itunes:episode><itunes:title>Modern SwiftUI: Introduction</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0214-720p-875adcedd6d241a58c9bc03f07d7098e.mp4" length="357900000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0214-720p-875adcedd6d241a58c9bc03f07d7098e.mp4" length="357900000" type="video/mp4" medium="video"><media:title>Modern SwiftUI: Introduction</media:title></media:content></item><item><title>SwiftUI Navigation: Stacks</title><pubDate>Mon, 21 Nov 2022 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep213-swiftui-navigation-stacks</link><guid>https://www.pointfree.co/episodes/ep213-swiftui-navigation-stacks</guid><description>When all-new SwiftUI navigation tools were announced at WWDC, the one that got the most attention by far was `NavigationStack`, which powers navigation with an array. It is extremely powerful, but comes with trade-offs and new complexities.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>When all-new SwiftUI navigation tools were announced at WWDC, the one that got the most attention by far was `NavigationStack`, which powers navigation with an array. It is extremely powerful, but comes with trade-offs and new complexities.</itunes:subtitle><itunes:summary>When all-new SwiftUI navigation tools were announced at WWDC, the one that got the most attention by far was `NavigationStack`, which powers navigation with an array. It is extremely powerful, but comes with trade-offs and new complexities.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>01:01:52</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0213.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>213</itunes:episode><itunes:title>SwiftUI Navigation: Stacks</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0213-720p-7e600e1624234d3e8808d1901c42ee6a.mp4" length="568200000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0213-720p-7e600e1624234d3e8808d1901c42ee6a.mp4" length="568200000" type="video/mp4" medium="video"><media:title>SwiftUI Navigation: Stacks</media:title></media:content></item><item><title>SwiftUI Navigation: Decoupling</title><pubDate>Mon, 14 Nov 2022 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep212-swiftui-navigation-decoupling</link><guid>https://www.pointfree.co/episodes/ep212-swiftui-navigation-decoupling</guid><description>Why did Apple scrap and reinvent SwiftUI’s navigation APIs in iOS 16? Let’s look at some problems the old APIs had, how one of the new APIs solves one of them, and how we can work around a bug in this new API.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Why did Apple scrap and reinvent SwiftUI’s navigation APIs in iOS 16? Let’s look at some problems the old APIs had, how one of the new APIs solves one of them, and how we can work around a bug in this new API.</itunes:subtitle><itunes:summary>Why did Apple scrap and reinvent SwiftUI’s navigation APIs in iOS 16? Let’s look at some problems the old APIs had, how one of the new APIs solves one of them, and how we can work around a bug in this new API.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:57:27</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0212.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>212</itunes:episode><itunes:title>SwiftUI Navigation: Decoupling</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0212-720p-d1e6badc0fbe45f5ab63b118abbe18da.mp4" length="523200000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0212-720p-d1e6badc0fbe45f5ab63b118abbe18da.mp4" length="523200000" type="video/mp4" medium="video"><media:title>SwiftUI Navigation: Decoupling</media:title></media:content></item><item><title>SwiftUI Navigation: Recap</title><pubDate>Mon, 07 Nov 2022 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep211-swiftui-navigation-recap</link><guid>https://www.pointfree.co/episodes/ep211-swiftui-navigation-recap</guid><description>A year ago we dove deep into the topic of navigation in SwiftUI. Then Apple deprecated many of those APIs
at this year's WWDC, replacing them with a brand new suite. To make sense of these changes, let's recap what 
we built over those past episodes, and why.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>A year ago we dove deep into the topic of navigation in SwiftUI. Then Apple deprecated many of those APIs
at this year's WWDC, replacing them with a brand new suite. To make sense of these changes, let's recap what 
we built over those past episodes, and why.</itunes:subtitle><itunes:summary>A year ago we dove deep into the topic of navigation in SwiftUI. Then Apple deprecated many of those APIs
at this year's WWDC, replacing them with a brand new suite. To make sense of these changes, let's recap what 
we built over those past episodes, and why.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:49:58</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0211.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>211</itunes:episode><itunes:title>SwiftUI Navigation: Recap</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0211-720p-5fdeadc372234cb68378b7b80db5bddc.mp4" length="229400000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0211-720p-5fdeadc372234cb68378b7b80db5bddc.mp4" length="229400000" type="video/mp4" medium="video"><media:title>SwiftUI Navigation: Recap</media:title></media:content></item><item><title>Clocks: Controlling Time</title><pubDate>Mon, 24 Oct 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep210-clocks-controlling-time</link><guid>https://www.pointfree.co/episodes/ep210-clocks-controlling-time</guid><description>With "immediate" and "unimplemented" conformances of the Clock protocol under our belt, let's build something more complicated: a "test" clock that can tell time when and how to flow. We'll explore why we'd ever need such a thing and what it unlocks.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>With "immediate" and "unimplemented" conformances of the Clock protocol under our belt, let's build something more complicated: a "test" clock that can tell time when and how to flow. We'll explore why we'd ever need such a thing and what it unlocks.</itunes:subtitle><itunes:summary>With "immediate" and "unimplemented" conformances of the Clock protocol under our belt, let's build something more complicated: a "test" clock that can tell time when and how to flow. We'll explore why we'd ever need such a thing and what it unlocks.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:41:56</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0210.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>210</itunes:episode><itunes:title>Clocks: Controlling Time</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0210-720p-e1e5b4cbd8c944c48d58b967c4d14365.mp4" length="405400000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0210-720p-e1e5b4cbd8c944c48d58b967c4d14365.mp4" length="405400000" type="video/mp4" medium="video"><media:title>Clocks: Controlling Time</media:title></media:content></item><item><title>Clocks: Existential Time</title><pubDate>Mon, 17 Oct 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep209-clocks-existential-time</link><guid>https://www.pointfree.co/episodes/ep209-clocks-existential-time</guid><description>The `Clock` protocol is a brand-new feature of Swift 5.7 for dealing with time-based asynchrony. We will explore its interface, compare it to Combine's `Scheduler` profile, and see what it takes to write and use our own conformances.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>The `Clock` protocol is a brand-new feature of Swift 5.7 for dealing with time-based asynchrony. We will explore its interface, compare it to Combine's `Scheduler` profile, and see what it takes to write and use our own conformances.</itunes:subtitle><itunes:summary>The `Clock` protocol is a brand-new feature of Swift 5.7 for dealing with time-based asynchrony. We will explore its interface, compare it to Combine's `Scheduler` profile, and see what it takes to write and use our own conformances.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:53:02</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0209.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>209</itunes:episode><itunes:title>Clocks: Existential Time</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0209-720p-78eee254e03d4aef855134cef0a8d9bf.mp4" length="431200000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0209-720p-78eee254e03d4aef855134cef0a8d9bf.mp4" length="431200000" type="video/mp4" medium="video"><media:title>Clocks: Existential Time</media:title></media:content></item><item><title>Reducer Protocol in Practice</title><pubDate>Mon, 10 Oct 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep208-reducer-protocol-in-practice</link><guid>https://www.pointfree.co/episodes/ep208-reducer-protocol-in-practice</guid><description>We celebrate the release of the Composable Architecture's new reducer protocol and dependency management system by showing how they improve the case studies and demos that come with the library, as well as a larger more real-world application.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We celebrate the release of the Composable Architecture's new reducer protocol and dependency management system by showing how they improve the case studies and demos that come with the library, as well as a larger more real-world application.</itunes:subtitle><itunes:summary>We celebrate the release of the Composable Architecture's new reducer protocol and dependency management system by showing how they improve the case studies and demos that come with the library, as well as a larger more real-world application.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:45:36</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0208.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>208</itunes:episode><itunes:title>Reducer Protocol in Practice</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0208-720p-94e25b3726c64de882aa183fdf749658.mp4" length="412600000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0208-720p-94e25b3726c64de882aa183fdf749658.mp4" length="412600000" type="video/mp4" medium="video"><media:title>Reducer Protocol in Practice</media:title></media:content></item><item><title>Reducer Protocol: Testing</title><pubDate>Mon, 03 Oct 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep207-reducer-protocol-testing</link><guid>https://www.pointfree.co/episodes/ep207-reducer-protocol-testing</guid><description>Testing is a top priority in the Composable Architecture, so what does the reducer protocol
and new dependency management system add to testing features? It allows us to codify a testing
pattern directly into the library that makes our tests instantly stronger and more exhaustive.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Testing is a top priority in the Composable Architecture, so what does the reducer protocol
and new dependency management system add to testing features? It allows us to codify a testing
pattern directly into the library that makes our tests instantly stronger and more exhaustive.</itunes:subtitle><itunes:summary>Testing is a top priority in the Composable Architecture, so what does the reducer protocol
and new dependency management system add to testing features? It allows us to codify a testing
pattern directly into the library that makes our tests instantly stronger and more exhaustive.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:31:48</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0207.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>207</itunes:episode><itunes:title>Reducer Protocol: Testing</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0207-720p-ae6737ccf43d4a429be676df74b95d37.mp4" length="405100000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0207-720p-ae6737ccf43d4a429be676df74b95d37.mp4" length="405100000" type="video/mp4" medium="video"><media:title>Reducer Protocol: Testing</media:title></media:content></item><item><title>Reducer Protocol: Dependencies, Part 2</title><pubDate>Mon, 26 Sep 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep206-reducer-protocol-dependencies-part-2</link><guid>https://www.pointfree.co/episodes/ep206-reducer-protocol-dependencies-part-2</guid><description>We now have a SwiftUI-inspired system for plucking dependencies out of thin air to provide them to reducers, but we can’t control them or separate interface from implementation. Once we do, we’ll have something far better than ever before.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We now have a SwiftUI-inspired system for plucking dependencies out of thin air to provide them to reducers, but we can’t control them or separate interface from implementation. Once we do, we’ll have something far better than ever before.</itunes:subtitle><itunes:summary>We now have a SwiftUI-inspired system for plucking dependencies out of thin air to provide them to reducers, but we can’t control them or separate interface from implementation. Once we do, we’ll have something far better than ever before.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:34:29</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0206.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>206</itunes:episode><itunes:title>Reducer Protocol: Dependencies, Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0206-720p-88aa4b297d0f4c69a7e6ffabed835fa6.mp4" length="340200000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0206-720p-88aa4b297d0f4c69a7e6ffabed835fa6.mp4" length="340200000" type="video/mp4" medium="video"><media:title>Reducer Protocol: Dependencies, Part 2</media:title></media:content></item><item><title>Reducer Protocol: Dependencies, Part 1</title><pubDate>Mon, 19 Sep 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep205-reducer-protocol-dependencies-part-1</link><guid>https://www.pointfree.co/episodes/ep205-reducer-protocol-dependencies-part-1</guid><description>We begin to flesh out a new story for dependencies in the Composable Architecture, taking inspiration from SwiftUI. We will examine SwiftUI's environment and build a faithful reproduction that provides many of the same great benefits.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We begin to flesh out a new story for dependencies in the Composable Architecture, taking inspiration from SwiftUI. We will examine SwiftUI's environment and build a faithful reproduction that provides many of the same great benefits.</itunes:subtitle><itunes:summary>We begin to flesh out a new story for dependencies in the Composable Architecture, taking inspiration from SwiftUI. We will examine SwiftUI's environment and build a faithful reproduction that provides many of the same great benefits.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:36:09</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0205.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>205</itunes:episode><itunes:title>Reducer Protocol: Dependencies, Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0205-720p-2a23436614b84012af324ba2a85f6e19.mp4" length="379800000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0205-720p-2a23436614b84012af324ba2a85f6e19.mp4" length="379800000" type="video/mp4" medium="video"><media:title>Reducer Protocol: Dependencies, Part 1</media:title></media:content></item><item><title>Reducer Protocol: Composition, Part 2</title><pubDate>Mon, 12 Sep 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep204-reducer-protocol-composition-part-2</link><guid>https://www.pointfree.co/episodes/ep204-reducer-protocol-composition-part-2</guid><description>The new reducer protocol has improved many things, but we’re  now in an awkward place when it comes to defining them: some are conformances and some are not. We’ll fix that with inspiration from SwiftUI and the help of a new protocol feature.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>The new reducer protocol has improved many things, but we’re  now in an awkward place when it comes to defining them: some are conformances and some are not. We’ll fix that with inspiration from SwiftUI and the help of a new protocol feature.</itunes:subtitle><itunes:summary>The new reducer protocol has improved many things, but we’re  now in an awkward place when it comes to defining them: some are conformances and some are not. We’ll fix that with inspiration from SwiftUI and the help of a new protocol feature.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:32:00</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0204.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>204</itunes:episode><itunes:title>Reducer Protocol: Composition, Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0204-720p-b6581441b28743b5960877c2cada28ac.mp4" length="341800000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0204-720p-b6581441b28743b5960877c2cada28ac.mp4" length="341800000" type="video/mp4" medium="video"><media:title>Reducer Protocol: Composition, Part 2</media:title></media:content></item><item><title>Reducer Protocol: Composition, Part 1</title><pubDate>Mon, 05 Sep 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep203-reducer-protocol-composition-part-1</link><guid>https://www.pointfree.co/episodes/ep203-reducer-protocol-composition-part-1</guid><description>We are already seeing huge benefits from the reducer protocol, but one aspect is still not ideal, and that is how we compose reducers. We will look to result builders to solve the problem, and a new feature of them introduced in Swift 5.7.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We are already seeing huge benefits from the reducer protocol, but one aspect is still not ideal, and that is how we compose reducers. We will look to result builders to solve the problem, and a new feature of them introduced in Swift 5.7.</itunes:subtitle><itunes:summary>We are already seeing huge benefits from the reducer protocol, but one aspect is still not ideal, and that is how we compose reducers. We will look to result builders to solve the problem, and a new feature of them introduced in Swift 5.7.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:30:44</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0203.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>203</itunes:episode><itunes:title>Reducer Protocol: Composition, Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0203-720p-f84077a767ff45f9b02bc65d19fa79d9.mp4" length="278200000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0203-720p-f84077a767ff45f9b02bc65d19fa79d9.mp4" length="278200000" type="video/mp4" medium="video"><media:title>Reducer Protocol: Composition, Part 1</media:title></media:content></item><item><title>Reducer Protocol: The Solution</title><pubDate>Mon, 29 Aug 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep202-reducer-protocol-the-solution</link><guid>https://www.pointfree.co/episodes/ep202-reducer-protocol-the-solution</guid><description>Let's begin to solve a number of the problems with the Composable Architecture by introducing a reducer protocol. We will write some common conformances and operators in the new style, and even refactor a complex demo application.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let's begin to solve a number of the problems with the Composable Architecture by introducing a reducer protocol. We will write some common conformances and operators in the new style, and even refactor a complex demo application.</itunes:subtitle><itunes:summary>Let's begin to solve a number of the problems with the Composable Architecture by introducing a reducer protocol. We will write some common conformances and operators in the new style, and even refactor a complex demo application.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:52:54</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0202.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>202</itunes:episode><itunes:title>Reducer Protocol: The Solution</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0202-720p-c9e3a042e8c6439c99b94bea6bf7fbc0.mp4" length="480800000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0202-720p-c9e3a042e8c6439c99b94bea6bf7fbc0.mp4" length="480800000" type="video/mp4" medium="video"><media:title>Reducer Protocol: The Solution</media:title></media:content></item><item><title>Reducer Protocol: The Problem</title><pubDate>Mon, 22 Aug 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep201-reducer-protocol-the-problem</link><guid>https://www.pointfree.co/episodes/ep201-reducer-protocol-the-problem</guid><description>The Composable Architecture was first released over two years ago, and the core ergonomics haven't changed much since then. It's time to change that: we are going to improve the ergonomics of nearly every facet of creating a feature with the library, and make all new patterns possible.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>The Composable Architecture was first released over two years ago, and the core ergonomics haven't changed much since then. It's time to change that: we are going to improve the ergonomics of nearly every facet of creating a feature with the library, and make all new patterns possible.</itunes:subtitle><itunes:summary>The Composable Architecture was first released over two years ago, and the core ergonomics haven't changed much since then. It's time to change that: we are going to improve the ergonomics of nearly every facet of creating a feature with the library, and make all new patterns possible.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:39:53</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0201.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>201</itunes:episode><itunes:title>Reducer Protocol: The Problem</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0201-720p-7f0085c2954d43808ca6b7dbd5185355.mp4" length="503500000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0201-720p-7f0085c2954d43808ca6b7dbd5185355.mp4" length="503500000" type="video/mp4" medium="video"><media:title>Reducer Protocol: The Problem</media:title></media:content></item><item><title>Async Composable Architecture in Practice</title><pubDate>Mon, 08 Aug 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep200-async-composable-architecture-in-practice</link><guid>https://www.pointfree.co/episodes/ep200-async-composable-architecture-in-practice</guid><description>This week we are releasing the biggest update to the Composable Architecture since its first
release over 2 years ago, bringing more of Swift's modern concurrency tools to the library.
To celebrate we will demonstrate how these tools can massively simplify a few real-world
applications.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>This week we are releasing the biggest update to the Composable Architecture since its first
release over 2 years ago, bringing more of Swift's modern concurrency tools to the library.
To celebrate we will demonstrate how these tools can massively simplify a few real-world
applications.</itunes:subtitle><itunes:summary>This week we are releasing the biggest update to the Composable Architecture since its first
release over 2 years ago, bringing more of Swift's modern concurrency tools to the library.
To celebrate we will demonstrate how these tools can massively simplify a few real-world
applications.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>01:05:26</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0200.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>200</itunes:episode><itunes:title>Async Composable Architecture in Practice</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0200-720p-fb6dd4f34f4c406d800a6fd5041eac6a.mp4" length="598500000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0200-720p-fb6dd4f34f4c406d800a6fd5041eac6a.mp4" length="598500000" type="video/mp4" medium="video"><media:title>Async Composable Architecture in Practice</media:title></media:content></item><item><title>Async Composable Architecture: Effect Lifetimes</title><pubDate>Mon, 01 Aug 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep199-async-composable-architecture-effect-lifetimes</link><guid>https://www.pointfree.co/episodes/ep199-async-composable-architecture-effect-lifetimes</guid><description>We explore ways to tie the lifetime of an effect to the lifetime of a view, making it possible to automatically cancel and tear down work when a view goes away. This unexpectedly helps us write even stronger tests for our features.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We explore ways to tie the lifetime of an effect to the lifetime of a view, making it possible to automatically cancel and tear down work when a view goes away. This unexpectedly helps us write even stronger tests for our features.</itunes:subtitle><itunes:summary>We explore ways to tie the lifetime of an effect to the lifetime of a view, making it possible to automatically cancel and tear down work when a view goes away. This unexpectedly helps us write even stronger tests for our features.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:38:24</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0199.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>199</itunes:episode><itunes:title>Async Composable Architecture: Effect Lifetimes</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0199-720p-fa6e4c0f1ae94b89b66cfead30f64101.mp4" length="435600000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0199-720p-fa6e4c0f1ae94b89b66cfead30f64101.mp4" length="435600000" type="video/mp4" medium="video"><media:title>Async Composable Architecture: Effect Lifetimes</media:title></media:content></item><item><title>Async Composable Architecture: Streams</title><pubDate>Mon, 25 Jul 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep198-async-composable-architecture-streams</link><guid>https://www.pointfree.co/episodes/ep198-async-composable-architecture-streams</guid><description>We introduce another helper to the `Effect` type that can use an asynchronous context to send multiple actions back into the system. By leveraging Swift's structured concurrency we can create complex effects in a natural way, all without sacrificing testability.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We introduce another helper to the `Effect` type that can use an asynchronous context to send multiple actions back into the system. By leveraging Swift's structured concurrency we can create complex effects in a natural way, all without sacrificing testability.</itunes:subtitle><itunes:summary>We introduce another helper to the `Effect` type that can use an asynchronous context to send multiple actions back into the system. By leveraging Swift's structured concurrency we can create complex effects in a natural way, all without sacrificing testability.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:41:23</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0198.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>198</itunes:episode><itunes:title>Async Composable Architecture: Streams</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0198-720p-59c0d5e38f2c4cfd9a1912f14ef320cc.mp4" length="422500000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0198-720p-59c0d5e38f2c4cfd9a1912f14ef320cc.mp4" length="422500000" type="video/mp4" medium="video"><media:title>Async Composable Architecture: Streams</media:title></media:content></item><item><title>Async Composable Architecture: Schedulers</title><pubDate>Mon, 18 Jul 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep197-async-composable-architecture-schedulers</link><guid>https://www.pointfree.co/episodes/ep197-async-composable-architecture-schedulers</guid><description>We can now run async work directly in a reducer's effects, but time-based asynchrony, like `Task.sleep`, will wreak havoc in our tests. Let's explore the problem in a new feature, and see how to recover the nice syntax of modern timing tools using a protocol from the past: Combine schedulers.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We can now run async work directly in a reducer's effects, but time-based asynchrony, like `Task.sleep`, will wreak havoc in our tests. Let's explore the problem in a new feature, and see how to recover the nice syntax of modern timing tools using a protocol from the past: Combine schedulers.</itunes:subtitle><itunes:summary>We can now run async work directly in a reducer's effects, but time-based asynchrony, like `Task.sleep`, will wreak havoc in our tests. Let's explore the problem in a new feature, and see how to recover the nice syntax of modern timing tools using a protocol from the past: Combine schedulers.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:30:56</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0197.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>197</itunes:episode><itunes:title>Async Composable Architecture: Schedulers</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0197-720p-1639d74038924182b71b56a90dca3421.mp4" length="286000000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0197-720p-1639d74038924182b71b56a90dca3421.mp4" length="286000000" type="video/mp4" medium="video"><media:title>Async Composable Architecture: Schedulers</media:title></media:content></item><item><title>Async Composable Architecture: Tasks</title><pubDate>Mon, 11 Jul 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep196-async-composable-architecture-tasks</link><guid>https://www.pointfree.co/episodes/ep196-async-composable-architecture-tasks</guid><description>This week we start fixing the problems we outlined last week. We build the tools necessary to start using concurrency tasks directly in reducers, and along the way we open Pandora's box of existential types to solve some mind-bending type issues.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>This week we start fixing the problems we outlined last week. We build the tools necessary to start using concurrency tasks directly in reducers, and along the way we open Pandora's box of existential types to solve some mind-bending type issues.</itunes:subtitle><itunes:summary>This week we start fixing the problems we outlined last week. We build the tools necessary to start using concurrency tasks directly in reducers, and along the way we open Pandora's box of existential types to solve some mind-bending type issues.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:52:58</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0196.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>196</itunes:episode><itunes:title>Async Composable Architecture: Tasks</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0196-720p-6edaea0cad7d4826b38bae8309369dd8.mp4" length="461300000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0196-720p-6edaea0cad7d4826b38bae8309369dd8.mp4" length="461300000" type="video/mp4" medium="video"><media:title>Async Composable Architecture: Tasks</media:title></media:content></item><item><title>Async Composable Architecture: The Problem</title><pubDate>Mon, 04 Jul 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep195-async-composable-architecture-the-problem</link><guid>https://www.pointfree.co/episodes/ep195-async-composable-architecture-the-problem</guid><description>The Composable Architecture's fundamental unit of effect is modeled on Combine publishers because it was the simplest and most modern asynchrony tool available at the time. Now Swift has native concurrency tools, and so we want to make use of those tools in the library. But first, let's see what can go wrong if we try to naively use async/await in an existing application.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>The Composable Architecture's fundamental unit of effect is modeled on Combine publishers because it was the simplest and most modern asynchrony tool available at the time. Now Swift has native concurrency tools, and so we want to make use of those tools in the library. But first, let's see what can go wrong if we try to naively use async/await in an existing application.</itunes:subtitle><itunes:summary>The Composable Architecture's fundamental unit of effect is modeled on Combine publishers because it was the simplest and most modern asynchrony tool available at the time. Now Swift has native concurrency tools, and so we want to make use of those tools in the library. But first, let's see what can go wrong if we try to naively use async/await in an existing application.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:40:40</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0195.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>195</itunes:episode><itunes:title>Async Composable Architecture: The Problem</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0195-720p-c0cad256734040feb82d4fb5f4f126e6.mp4" length="399300000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0195-720p-c0cad256734040feb82d4fb5f4f126e6.mp4" length="399300000" type="video/mp4" medium="video"><media:title>Async Composable Architecture: The Problem</media:title></media:content></item><item><title>Concurrency's Future: Structured and Unstructured</title><pubDate>Mon, 27 Jun 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep194-concurrency-s-future-structured-and-unstructured</link><guid>https://www.pointfree.co/episodes/ep194-concurrency-s-future-structured-and-unstructured</guid><description>There are amazing features of Swift concurrency that don't quite fit into our narrative of examining it through the lens of past concurrency tools. Instead, we'll examine them through the lens of a past programming paradigm, structured programming, and see what is has to say about structured concurrency.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>There are amazing features of Swift concurrency that don't quite fit into our narrative of examining it through the lens of past concurrency tools. Instead, we'll examine them through the lens of a past programming paradigm, structured programming, and see what is has to say about structured concurrency.</itunes:subtitle><itunes:summary>There are amazing features of Swift concurrency that don't quite fit into our narrative of examining it through the lens of past concurrency tools. Instead, we'll examine them through the lens of a past programming paradigm, structured programming, and see what is has to say about structured concurrency.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>01:01:42</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0194.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>194</itunes:episode><itunes:title>Concurrency's Future: Structured and Unstructured</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0194-720p-6fd608a4fcd9464cbd785dbd382a66ce.mp4" length="707200000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0194-720p-6fd608a4fcd9464cbd785dbd382a66ce.mp4" length="707200000" type="video/mp4" medium="video"><media:title>Concurrency's Future: Structured and Unstructured</media:title></media:content></item><item><title>Concurrency's Future: Sendable and Actors</title><pubDate>Mon, 20 Jun 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep193-concurrency-s-future-sendable-and-actors</link><guid>https://www.pointfree.co/episodes/ep193-concurrency-s-future-sendable-and-actors</guid><description>When working with concurrent code, you must contend with data synchronization and data races. While the tools of the past made it difficult to reason about these issues, Swift's new tools make it a breeze, including the `Sendable` protocol,  `@Sendable` closures, and actors.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>When working with concurrent code, you must contend with data synchronization and data races. While the tools of the past made it difficult to reason about these issues, Swift's new tools make it a breeze, including the `Sendable` protocol,  `@Sendable` closures, and actors.</itunes:subtitle><itunes:summary>When working with concurrent code, you must contend with data synchronization and data races. While the tools of the past made it difficult to reason about these issues, Swift's new tools make it a breeze, including the `Sendable` protocol,  `@Sendable` closures, and actors.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:48:35</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0193.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>193</itunes:episode><itunes:title>Concurrency's Future: Sendable and Actors</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0193-720p-1e11ed42e5bb49ca92b196a91ebb55ae.mp4" length="505100000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0193-720p-1e11ed42e5bb49ca92b196a91ebb55ae.mp4" length="505100000" type="video/mp4" medium="video"><media:title>Concurrency's Future: Sendable and Actors</media:title></media:content></item><item><title>Concurrency's Future: Tasks and Cooperation</title><pubDate>Mon, 13 Jun 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep192-concurrency-s-future-tasks-and-cooperation</link><guid>https://www.pointfree.co/episodes/ep192-concurrency-s-future-tasks-and-cooperation</guid><description>Let’s look at what the future of concurrency looks like in Swift. A recent release of Swift came with a variety of tools with concurrency. Let's examine its fundamental unit in depth, and explore how they "cooperate" in your applications.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let’s look at what the future of concurrency looks like in Swift. A recent release of Swift came with a variety of tools with concurrency. Let's examine its fundamental unit in depth, and explore how they "cooperate" in your applications.</itunes:subtitle><itunes:summary>Let’s look at what the future of concurrency looks like in Swift. A recent release of Swift came with a variety of tools with concurrency. Let's examine its fundamental unit in depth, and explore how they "cooperate" in your applications.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:45:20</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0192.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>192</itunes:episode><itunes:title>Concurrency's Future: Tasks and Cooperation</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0192-720p-b612382e9e7a4b23a55420b1c3252307.mp4" length="443200000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0192-720p-b612382e9e7a4b23a55420b1c3252307.mp4" length="443200000" type="video/mp4" medium="video"><media:title>Concurrency's Future: Tasks and Cooperation</media:title></media:content></item><item><title>Concurrency's Present: Queues and Combine</title><pubDate>Mon, 30 May 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep191-concurrency-s-present-queues-and-combine</link><guid>https://www.pointfree.co/episodes/ep191-concurrency-s-present-queues-and-combine</guid><description>Before developing Swift's modern concurrency tools, Apple improved upon threads with several other abstractions, including operation queues, Grand Central Dispatch, and Combine. Let's see what these newer tools brought to the table.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Before developing Swift's modern concurrency tools, Apple improved upon threads with several other abstractions, including operation queues, Grand Central Dispatch, and Combine. Let's see what these newer tools brought to the table.</itunes:subtitle><itunes:summary>Before developing Swift's modern concurrency tools, Apple improved upon threads with several other abstractions, including operation queues, Grand Central Dispatch, and Combine. Let's see what these newer tools brought to the table.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>01:02:57</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0191.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>191</itunes:episode><itunes:title>Concurrency's Present: Queues and Combine</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0191-720p-b9d7d3b57df74b6493ecffeed727eac1.mp4" length="643800000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0191-720p-b9d7d3b57df74b6493ecffeed727eac1.mp4" length="643800000" type="video/mp4" medium="video"><media:title>Concurrency's Present: Queues and Combine</media:title></media:content></item><item><title>Concurrency's Past: Threads</title><pubDate>Mon, 23 May 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep190-concurrency-s-past-threads</link><guid>https://www.pointfree.co/episodes/ep190-concurrency-s-past-threads</guid><description>To better understand Swift's concurrency tools, let's first look to the past, starting with threads. Threads are a tool most developers don't reach for these days, but are important to understand, and the way they solve problems reverberate even in today's tools.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>To better understand Swift's concurrency tools, let's first look to the past, starting with threads. Threads are a tool most developers don't reach for these days, but are important to understand, and the way they solve problems reverberate even in today's tools.</itunes:subtitle><itunes:summary>To better understand Swift's concurrency tools, let's first look to the past, starting with threads. Threads are a tool most developers don't reach for these days, but are important to understand, and the way they solve problems reverberate even in today's tools.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:52:55</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0190.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>190</itunes:episode><itunes:title>Concurrency's Past: Threads</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0190-720p-9ba2fc65d5654d97a786d7133e2269b9.mp4" length="700600000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0190-720p-9ba2fc65d5654d97a786d7133e2269b9.mp4" length="700600000" type="video/mp4" medium="video"><media:title>Concurrency's Past: Threads</media:title></media:content></item><item><title>Tour of Parser-Printers: API Clients for Free</title><pubDate>Mon, 09 May 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep189-tour-of-parser-printers-api-clients-for-free</link><guid>https://www.pointfree.co/episodes/ep189-tour-of-parser-printers-api-clients-for-free</guid><description>We conclude our tour of swift-parsing with a look at how URL routers defined as parser-printers can be automatically transformed into fully-fledged API clients, which we will drop into an iOS application and immediately use.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We conclude our tour of swift-parsing with a look at how URL routers defined as parser-printers can be automatically transformed into fully-fledged API clients, which we will drop into an iOS application and immediately use.</itunes:subtitle><itunes:summary>We conclude our tour of swift-parsing with a look at how URL routers defined as parser-printers can be automatically transformed into fully-fledged API clients, which we will drop into an iOS application and immediately use.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:33:57</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0189.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>189</itunes:episode><itunes:title>Tour of Parser-Printers: API Clients for Free</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0189-720p-4f4be45ec3bc44ec8f575064a34a7bf8.mp4" length="299600000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0189-720p-4f4be45ec3bc44ec8f575064a34a7bf8.mp4" length="299600000" type="video/mp4" medium="video"><media:title>Tour of Parser-Printers: API Clients for Free</media:title></media:content></item><item><title>Tour of Parser-Printers: Vapor Routing</title><pubDate>Mon, 02 May 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep188-tour-of-parser-printers-vapor-routing</link><guid>https://www.pointfree.co/episodes/ep188-tour-of-parser-printers-vapor-routing</guid><description>Now that we're familiar with swift-parsing's URL router, let's take a look at Swift's most popular web framework, Vapor. We will rebuild our site router using Vapor's built-in router, and then we'll use our own companion library to power our Vapor application with a parser-printer, instead.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Now that we're familiar with swift-parsing's URL router, let's take a look at Swift's most popular web framework, Vapor. We will rebuild our site router using Vapor's built-in router, and then we'll use our own companion library to power our Vapor application with a parser-printer, instead.</itunes:subtitle><itunes:summary>Now that we're familiar with swift-parsing's URL router, let's take a look at Swift's most popular web framework, Vapor. We will rebuild our site router using Vapor's built-in router, and then we'll use our own companion library to power our Vapor application with a parser-printer, instead.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:37:20</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0188.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>188</itunes:episode><itunes:title>Tour of Parser-Printers: Vapor Routing</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0188-720p-af14d4f769b94293a0c849848dda9db1.mp4" length="300400000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0188-720p-af14d4f769b94293a0c849848dda9db1.mp4" length="300400000" type="video/mp4" medium="video"><media:title>Tour of Parser-Printers: Vapor Routing</media:title></media:content></item><item><title>Tour of Parser-Printers: URL Routing</title><pubDate>Mon, 25 Apr 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep187-tour-of-parser-printers-url-routing</link><guid>https://www.pointfree.co/episodes/ep187-tour-of-parser-printers-url-routing</guid><description>URL routing is a large problem that has been solved in various ways over the years...but what does that have to do with swift-parsing!? A lot! swift-parsing comes with a URL routing library built on top of parser-printers, and it solves a lot of problems that still exist in today's most popular web frameworks.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>URL routing is a large problem that has been solved in various ways over the years...but what does that have to do with swift-parsing!? A lot! swift-parsing comes with a URL routing library built on top of parser-printers, and it solves a lot of problems that still exist in today's most popular web frameworks.</itunes:subtitle><itunes:summary>URL routing is a large problem that has been solved in various ways over the years...but what does that have to do with swift-parsing!? A lot! swift-parsing comes with a URL routing library built on top of parser-printers, and it solves a lot of problems that still exist in today's most popular web frameworks.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:48:42</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0187.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>187</itunes:episode><itunes:title>Tour of Parser-Printers: URL Routing</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0187-720p-83035712e37940169b88c0312e73a6fb.mp4" length="447700000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0187-720p-83035712e37940169b88c0312e73a6fb.mp4" length="447700000" type="video/mp4" medium="video"><media:title>Tour of Parser-Printers: URL Routing</media:title></media:content></item><item><title>Tour of Parser-Printers: vs. Swift's Regex DSL</title><pubDate>Mon, 18 Apr 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep186-tour-of-parser-printers-vs-swift-s-regex-dsl</link><guid>https://www.pointfree.co/episodes/ep186-tour-of-parser-printers-vs-swift-s-regex-dsl</guid><description>We continue our tour by comparing swift-parsing to Apple's forthcoming Regex DSL. After taking a look at the proposal, we'll translate an example over to be a parser-printer to compare and contrast each approach.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We continue our tour by comparing swift-parsing to Apple's forthcoming Regex DSL. After taking a look at the proposal, we'll translate an example over to be a parser-printer to compare and contrast each approach.</itunes:subtitle><itunes:summary>We continue our tour by comparing swift-parsing to Apple's forthcoming Regex DSL. After taking a look at the proposal, we'll translate an example over to be a parser-printer to compare and contrast each approach.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:36:21</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0186.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>186</itunes:episode><itunes:title>Tour of Parser-Printers: vs. Swift's Regex DSL</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0186-720p-58ff1797382d4b01aa4d50fad9102a65.mp4" length="379700000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0186-720p-58ff1797382d4b01aa4d50fad9102a65.mp4" length="379700000" type="video/mp4" medium="video"><media:title>Tour of Parser-Printers: vs. Swift's Regex DSL</media:title></media:content></item><item><title>Tour of Parser-Printers: Introduction</title><pubDate>Mon, 11 Apr 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep185-tour-of-parser-printers-introduction</link><guid>https://www.pointfree.co/episodes/ep185-tour-of-parser-printers-introduction</guid><description>Today we celebrate a huge release of [swift-parsing](https://github.com/pointfreeco/swift-parsing), which includes the ability to build invertible parser-printers with ease. We'll demonstrate by using the library to build three different parser-printers, starting with a fun exercise from Advent of Code</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Today we celebrate a huge release of [swift-parsing](https://github.com/pointfreeco/swift-parsing), which includes the ability to build invertible parser-printers with ease. We'll demonstrate by using the library to build three different parser-printers, starting with a fun exercise from Advent of Code</itunes:subtitle><itunes:summary>Today we celebrate a huge release of [swift-parsing](https://github.com/pointfreeco/swift-parsing), which includes the ability to build invertible parser-printers with ease. We'll demonstrate by using the library to build three different parser-printers, starting with a fun exercise from Advent of Code</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:40:37</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0185.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>185</itunes:episode><itunes:title>Tour of Parser-Printers: Introduction</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0185-720p-5eaee19b6f0a4d62a6cc554831ec2272.mp4" length="345900000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0185-720p-5eaee19b6f0a4d62a6cc554831ec2272.mp4" length="345900000" type="video/mp4" medium="video"><media:title>Tour of Parser-Printers: Introduction</media:title></media:content></item><item><title>Invertible Parsing: The Point</title><pubDate>Mon, 04 Apr 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep184-invertible-parsing-the-point</link><guid>https://www.pointfree.co/episodes/ep184-invertible-parsing-the-point</guid><description>We conclude our series on invertible parsing by converting a more complex parser into a parser-printer, and even enhance its format. This will push us to think through a couple more fun parser-printer problems.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We conclude our series on invertible parsing by converting a more complex parser into a parser-printer, and even enhance its format. This will push us to think through a couple more fun parser-printer problems.</itunes:subtitle><itunes:summary>We conclude our series on invertible parsing by converting a more complex parser into a parser-printer, and even enhance its format. This will push us to think through a couple more fun parser-printer problems.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:32:45</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0184.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>184</itunes:episode><itunes:title>Invertible Parsing: The Point</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0184-720p-b6e08aef910f438fb139e77d697588e6.mp4" length="294900000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0184-720p-b6e08aef910f438fb139e77d697588e6.mp4" length="294900000" type="video/mp4" medium="video"><media:title>Invertible Parsing: The Point</media:title></media:content></item><item><title>Invertible Parsing: Bizarro Printing</title><pubDate>Mon, 28 Mar 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep183-invertible-parsing-bizarro-printing</link><guid>https://www.pointfree.co/episodes/ep183-invertible-parsing-bizarro-printing</guid><description>We've had to really stretch our brains to consider what it means to reverse the effects of parsing, but let's looks at some parsers that take it to the next level. They will force us to reconsider a fundamental part of printing, and will make our printers even more powerful.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We've had to really stretch our brains to consider what it means to reverse the effects of parsing, but let's looks at some parsers that take it to the next level. They will force us to reconsider a fundamental part of printing, and will make our printers even more powerful.</itunes:subtitle><itunes:summary>We've had to really stretch our brains to consider what it means to reverse the effects of parsing, but let's looks at some parsers that take it to the next level. They will force us to reconsider a fundamental part of printing, and will make our printers even more powerful.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:47:06</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0183.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>183</itunes:episode><itunes:title>Invertible Parsing: Bizarro Printing</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0183-720p-aee8dd6079b849febeaf178247f50d7b.mp4" length="409000000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0183-720p-aee8dd6079b849febeaf178247f50d7b.mp4" length="409000000" type="video/mp4" medium="video"><media:title>Invertible Parsing: Bizarro Printing</media:title></media:content></item><item><title>Invertible Parsing: Map</title><pubDate>Mon, 21 Mar 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep182-invertible-parsing-map</link><guid>https://www.pointfree.co/episodes/ep182-invertible-parsing-map</guid><description>Our parser-printer library is looking incredible, but there's a glaring problem that we have no yet addressed. We haven't been able to make one of our favorite operations, `map`, printer-friendly. The types simply do not line up. This week we will finally address this shortcoming.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Our parser-printer library is looking incredible, but there's a glaring problem that we have no yet addressed. We haven't been able to make one of our favorite operations, `map`, printer-friendly. The types simply do not line up. This week we will finally address this shortcoming.</itunes:subtitle><itunes:summary>Our parser-printer library is looking incredible, but there's a glaring problem that we have no yet addressed. We haven't been able to make one of our favorite operations, `map`, printer-friendly. The types simply do not line up. This week we will finally address this shortcoming.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:56:46</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0182.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>182</itunes:episode><itunes:title>Invertible Parsing: Map</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0182-720p-d4d0e260bf044ed29dfff3c0b5c589e2.mp4" length="350500000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0182-720p-d4d0e260bf044ed29dfff3c0b5c589e2.mp4" length="350500000" type="video/mp4" medium="video"><media:title>Invertible Parsing: Map</media:title></media:content></item><item><title>Invertible Parsing: Generalization</title><pubDate>Mon, 14 Mar 2022 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep181-invertible-parsing-generalization</link><guid>https://www.pointfree.co/episodes/ep181-invertible-parsing-generalization</guid><description>Our parser-printer library is looking pretty impressive, but there are a couple problems we need to address. We have made some simplifying assumptions that have greatly reduced the generality our library aspires to have. We will address them by abstracting what it means for an input to be parseable _and_ printable.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Our parser-printer library is looking pretty impressive, but there are a couple problems we need to address. We have made some simplifying assumptions that have greatly reduced the generality our library aspires to have. We will address them by abstracting what it means for an input to be parseable _and_ printable.</itunes:subtitle><itunes:summary>Our parser-printer library is looking pretty impressive, but there are a couple problems we need to address. We have made some simplifying assumptions that have greatly reduced the generality our library aspires to have. We will address them by abstracting what it means for an input to be parseable _and_ printable.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:35:07</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0181.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>181</itunes:episode><itunes:title>Invertible Parsing: Generalization</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0181-720p-069f80863be6481bb07d4db5ac5a0289.mp4" length="349000000" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0181-720p-069f80863be6481bb07d4db5ac5a0289.mp4" length="349000000" type="video/mp4" medium="video"><media:title>Invertible Parsing: Generalization</media:title></media:content></item><item><title>Invertible Parsing: The Solution, Part 2</title><pubDate>Mon, 07 Mar 2022 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep180-invertible-parsing-the-solution-part-2</link><guid>https://www.pointfree.co/episodes/ep180-invertible-parsing-the-solution-part-2</guid><description>We will chip away at more and more parser printer conformances, some of which will truly stretch our brains, but we will finally turn our complex user CSV parser into a printer!</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We will chip away at more and more parser printer conformances, some of which will truly stretch our brains, but we will finally turn our complex user CSV parser into a printer!</itunes:subtitle><itunes:summary>We will chip away at more and more parser printer conformances, some of which will truly stretch our brains, but we will finally turn our complex user CSV parser into a printer!</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:40:46</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0180.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>180</itunes:episode><itunes:title>Invertible Parsing: The Solution, Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0180-720p-7890668578fa47409bfe8fd9f93572f2.mp4" length="232699647" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0180-720p-7890668578fa47409bfe8fd9f93572f2.mp4" length="232699647" type="video/mp4" medium="video"><media:title>Invertible Parsing: The Solution, Part 2</media:title></media:content></item><item><title>Invertible Parsing: The Solution, Part 1</title><pubDate>Mon, 28 Feb 2022 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep179-invertible-parsing-the-solution-part-1</link><guid>https://www.pointfree.co/episodes/ep179-invertible-parsing-the-solution-part-1</guid><description>Now that we've framed the problem of printing, let's begin to tackle it. We will introduce a `Printer` protocol by "reverse-engineering" the `Parser` protocol, and we will conform more and more parsers to the printer protocol.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Now that we've framed the problem of printing, let's begin to tackle it. We will introduce a `Printer` protocol by "reverse-engineering" the `Parser` protocol, and we will conform more and more parsers to the printer protocol.</itunes:subtitle><itunes:summary>Now that we've framed the problem of printing, let's begin to tackle it. We will introduce a `Printer` protocol by "reverse-engineering" the `Parser` protocol, and we will conform more and more parsers to the printer protocol.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:38:21</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0179.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>179</itunes:episode><itunes:title>Invertible Parsing: The Solution, Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0179-720p-ac74ba2cdd9b446ab78b63ed70778693.mp4" length="177387274" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0179-720p-ac74ba2cdd9b446ab78b63ed70778693.mp4" length="177387274" type="video/mp4" medium="video"><media:title>Invertible Parsing: The Solution, Part 1</media:title></media:content></item><item><title>Invertible Parsing: The Problem</title><pubDate>Mon, 21 Feb 2022 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep178-invertible-parsing-the-problem</link><guid>https://www.pointfree.co/episodes/ep178-invertible-parsing-the-problem</guid><description>We've spent many episodes discussing parsing, which turns nebulous blobs of data into well-structured data, but sometimes we need the "inverse" process to turn well-structured data back into nebulous data. This is called "printing" and can be useful for serialization, URL routing and more. This week we begin a journey to build a unified, composable framework for parsers and printers.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We've spent many episodes discussing parsing, which turns nebulous blobs of data into well-structured data, but sometimes we need the "inverse" process to turn well-structured data back into nebulous data. This is called "printing" and can be useful for serialization, URL routing and more. This week we begin a journey to build a unified, composable framework for parsers and printers.</itunes:subtitle><itunes:summary>We've spent many episodes discussing parsing, which turns nebulous blobs of data into well-structured data, but sometimes we need the "inverse" process to turn well-structured data back into nebulous data. This is called "printing" and can be useful for serialization, URL routing and more. This week we begin a journey to build a unified, composable framework for parsers and printers.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:30:13</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0178.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>178</itunes:episode><itunes:title>Invertible Parsing: The Problem</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0178-720p-28c583076ff847cfafd8e84fd1a27651.mp4" length="191358730" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0178-720p-28c583076ff847cfafd8e84fd1a27651.mp4" length="191358730" type="video/mp4" medium="video"><media:title>Invertible Parsing: The Problem</media:title></media:content></item><item><title>Parser Errors: Context and Ergonomics</title><pubDate>Mon, 07 Feb 2022 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep177-parser-errors-context-and-ergonomics</link><guid>https://www.pointfree.co/episodes/ep177-parser-errors-context-and-ergonomics</guid><description>Let's make errors a pleasure to encounter! We will make them easy to read, add more context to make them easy to debug, and even see how error messages can influence existing APIs.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let's make errors a pleasure to encounter! We will make them easy to read, add more context to make them easy to debug, and even see how error messages can influence existing APIs.</itunes:subtitle><itunes:summary>Let's make errors a pleasure to encounter! We will make them easy to read, add more context to make them easy to debug, and even see how error messages can influence existing APIs.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:43:47</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0177.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>177</itunes:episode><itunes:title>Parser Errors: Context and Ergonomics</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0177-720p-97b44edd29884d91ad74da185fbdd324.mp4" length="211757246" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0177-720p-97b44edd29884d91ad74da185fbdd324.mp4" length="211757246" type="video/mp4" medium="video"><media:title>Parser Errors: Context and Ergonomics</media:title></media:content></item><item><title>Parser Errors: from Nil to Throws</title><pubDate>Mon, 31 Jan 2022 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep176-parser-errors-from-nil-to-throws</link><guid>https://www.pointfree.co/episodes/ep176-parser-errors-from-nil-to-throws</guid><description>Let's explore the topic of error handling. We will scrutinize how we model errors in our parsing library and the problems that have come out of it, and we will address these problems by changing the fundamental shape of the parser type.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let's explore the topic of error handling. We will scrutinize how we model errors in our parsing library and the problems that have come out of it, and we will address these problems by changing the fundamental shape of the parser type.</itunes:subtitle><itunes:summary>Let's explore the topic of error handling. We will scrutinize how we model errors in our parsing library and the problems that have come out of it, and we will address these problems by changing the fundamental shape of the parser type.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:32:53</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0176.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>176</itunes:episode><itunes:title>Parser Errors: from Nil to Throws</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0176-720p-35e4d52d5cb646539240a95eba225150.mp4" length="157189369" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0176-720p-35e4d52d5cb646539240a95eba225150.mp4" length="157189369" type="video/mp4" medium="video"><media:title>Parser Errors: from Nil to Throws</media:title></media:content></item><item><title>Parser Builders: The Point</title><pubDate>Mon, 24 Jan 2022 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep175-parser-builders-the-point</link><guid>https://www.pointfree.co/episodes/ep175-parser-builders-the-point</guid><description>So what is the point of parser builders anyway? We will leverage our new builder syntax by rewriting a couple more complex parsers: a marathon parser and a URL router. This will lead us to not only clean up noise and tell a more concise parsing story, but give us a chance to create brand new parsing tools.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>So what is the point of parser builders anyway? We will leverage our new builder syntax by rewriting a couple more complex parsers: a marathon parser and a URL router. This will lead us to not only clean up noise and tell a more concise parsing story, but give us a chance to create brand new parsing tools.</itunes:subtitle><itunes:summary>So what is the point of parser builders anyway? We will leverage our new builder syntax by rewriting a couple more complex parsers: a marathon parser and a URL router. This will lead us to not only clean up noise and tell a more concise parsing story, but give us a chance to create brand new parsing tools.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:43:43</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0175.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>175</itunes:episode><itunes:title>Parser Builders: The Point</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0175-720p-e0e5426487044b0884fd31b10feaea74.mp4" length="342158264" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0175-720p-e0e5426487044b0884fd31b10feaea74.mp4" length="342158264" type="video/mp4" medium="video"><media:title>Parser Builders: The Point</media:title></media:content></item><item><title>Parser Builders: The Solution</title><pubDate>Mon, 17 Jan 2022 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep174-parser-builders-the-solution</link><guid>https://www.pointfree.co/episodes/ep174-parser-builders-the-solution</guid><description>Let's begin to layer result builder syntax on top of parsing. To get our feet wet, we will build a toy result builder from scratch. Then, we will dive much deeper to apply what we learn to parsers.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let's begin to layer result builder syntax on top of parsing. To get our feet wet, we will build a toy result builder from scratch. Then, we will dive much deeper to apply what we learn to parsers.</itunes:subtitle><itunes:summary>Let's begin to layer result builder syntax on top of parsing. To get our feet wet, we will build a toy result builder from scratch. Then, we will dive much deeper to apply what we learn to parsers.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:32:08</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0174.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>174</itunes:episode><itunes:title>Parser Builders: The Solution</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0174-720p-668859cebcee44a6ab9df235fda953e2.mp4" length="827440472" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0174-720p-668859cebcee44a6ab9df235fda953e2.mp4" length="827440472" type="video/mp4" medium="video"><media:title>Parser Builders: The Solution</media:title></media:content></item><item><title>Parser Builders: The Problem</title><pubDate>Mon, 10 Jan 2022 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep173-parser-builders-the-problem</link><guid>https://www.pointfree.co/episodes/ep173-parser-builders-the-problem</guid><description>Let’s revisit a favorite topic: parsing! After a short recap, we will theorize and motivate the addition of result builder syntax to our parsing library, which will help unlock a new level of ergonomics and API design.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let’s revisit a favorite topic: parsing! After a short recap, we will theorize and motivate the addition of result builder syntax to our parsing library, which will help unlock a new level of ergonomics and API design.</itunes:subtitle><itunes:summary>Let’s revisit a favorite topic: parsing! After a short recap, we will theorize and motivate the addition of result builder syntax to our parsing library, which will help unlock a new level of ergonomics and API design.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:28:16</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0173.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>173</itunes:episode><itunes:title>Parser Builders: The Problem</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0173-720p-0aad1b3baab94a85ad12859a6a36e147.mp4" length="218637615" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0173-720p-0aad1b3baab94a85ad12859a6a36e147.mp4" length="218637615" type="video/mp4" medium="video"><media:title>Parser Builders: The Problem</media:title></media:content></item><item><title>Modularization: Part 2</title><pubDate>Mon, 20 Dec 2021 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep172-modularization-part-2</link><guid>https://www.pointfree.co/episodes/ep172-modularization-part-2</guid><description>We finish modularizing our application by extracting its deep linking logic across feature modules. We will then show the full power of modularization by building a "preview" application that can accomplish much more than an Xcode preview can.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We finish modularizing our application by extracting its deep linking logic across feature modules. We will then show the full power of modularization by building a "preview" application that can accomplish much more than an Xcode preview can.</itunes:subtitle><itunes:summary>We finish modularizing our application by extracting its deep linking logic across feature modules. We will then show the full power of modularization by building a "preview" application that can accomplish much more than an Xcode preview can.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:32:16</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0172.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>172</itunes:episode><itunes:title>Modularization: Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0172-720p-5545e6c697b947c190d35bbfab5746e8.mp4" length="454348588" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0172-720p-5545e6c697b947c190d35bbfab5746e8.mp4" length="454348588" type="video/mp4" medium="video"><media:title>Modularization: Part 2</media:title></media:content></item><item><title>Modularization: Part 1</title><pubDate>Mon, 13 Dec 2021 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep171-modularization-part-1</link><guid>https://www.pointfree.co/episodes/ep171-modularization-part-1</guid><description>We've talked about modularity a lot in the past, but we've never devoted full episodes to show how we approach the subject. We will define and explore various kinds of modularity, and we’ll show how to modularize a complex application from scratch using modern build tools.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We've talked about modularity a lot in the past, but we've never devoted full episodes to show how we approach the subject. We will define and explore various kinds of modularity, and we’ll show how to modularize a complex application from scratch using modern build tools.</itunes:subtitle><itunes:summary>We've talked about modularity a lot in the past, but we've never devoted full episodes to show how we approach the subject. We will define and explore various kinds of modularity, and we’ll show how to modularize a complex application from scratch using modern build tools.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:43:55</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0171.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>171</itunes:episode><itunes:title>Modularization: Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0171-720p-0408e3aafa554b70be2b869841dbad5e.mp4" length="620286634" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0171-720p-0408e3aafa554b70be2b869841dbad5e.mp4" length="620286634" type="video/mp4" medium="video"><media:title>Modularization: Part 1</media:title></media:content></item><item><title>UIKit Navigation: Part 2</title><pubDate>Mon, 06 Dec 2021 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep170-uikit-navigation-part-2</link><guid>https://www.pointfree.co/episodes/ep170-uikit-navigation-part-2</guid><description>We finish porting our SwiftUI application to UIKit by introducing a collection view. Along the way we will demonstrate how deep-linking works exactly as it did in SwiftUI, and we show the power of state driven navigation by seamlessly switching between the two view paradigms.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We finish porting our SwiftUI application to UIKit by introducing a collection view. Along the way we will demonstrate how deep-linking works exactly as it did in SwiftUI, and we show the power of state driven navigation by seamlessly switching between the two view paradigms.</itunes:subtitle><itunes:summary>We finish porting our SwiftUI application to UIKit by introducing a collection view. Along the way we will demonstrate how deep-linking works exactly as it did in SwiftUI, and we show the power of state driven navigation by seamlessly switching between the two view paradigms.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:49:23</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0170.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>170</itunes:episode><itunes:title>UIKit Navigation: Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0170-720p-7541cd95871e4df4bdb32b20ba9b35d6.mp4" length="463186179" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0170-720p-7541cd95871e4df4bdb32b20ba9b35d6.mp4" length="463186179" type="video/mp4" medium="video"><media:title>UIKit Navigation: Part 2</media:title></media:content></item><item><title>UIKit Navigation: Part 1</title><pubDate>Mon, 29 Nov 2021 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep169-uikit-navigation-part-1</link><guid>https://www.pointfree.co/episodes/ep169-uikit-navigation-part-1</guid><description>What does all the work we've done with navigation in SwiftUI have to say about UIKit? Turns out a lot! Without making a single change to the view models we can rewrite the entire view layer in UIKit, and the application will work exactly as it did before, deep-linking and all!</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>What does all the work we've done with navigation in SwiftUI have to say about UIKit? Turns out a lot! Without making a single change to the view models we can rewrite the entire view layer in UIKit, and the application will work exactly as it did before, deep-linking and all!</itunes:subtitle><itunes:summary>What does all the work we've done with navigation in SwiftUI have to say about UIKit? Turns out a lot! Without making a single change to the view models we can rewrite the entire view layer in UIKit, and the application will work exactly as it did before, deep-linking and all!</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:45:46</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0169.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>169</itunes:episode><itunes:title>UIKit Navigation: Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0169-720p-0b4085214b344f3b9a6f3ea9685c9c0a.mp4" length="552426810" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0169-720p-0b4085214b344f3b9a6f3ea9685c9c0a.mp4" length="552426810" type="video/mp4" medium="video"><media:title>UIKit Navigation: Part 1</media:title></media:content></item><item><title>SwiftUI Navigation: The Point</title><pubDate>Mon, 15 Nov 2021 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep168-swiftui-navigation-the-point</link><guid>https://www.pointfree.co/episodes/ep168-swiftui-navigation-the-point</guid><description>We've claimed that the way we handle navigation in SwiftUI unlocks the ability to deep link to any screen in your application, so let's put that claim to the test. We will add real-world deep linking to our application, from scratch, using the parsing library we open sourced many months ago.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We've claimed that the way we handle navigation in SwiftUI unlocks the ability to deep link to any screen in your application, so let's put that claim to the test. We will add real-world deep linking to our application, from scratch, using the parsing library we open sourced many months ago.</itunes:subtitle><itunes:summary>We've claimed that the way we handle navigation in SwiftUI unlocks the ability to deep link to any screen in your application, so let's put that claim to the test. We will add real-world deep linking to our application, from scratch, using the parsing library we open sourced many months ago.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:59:51</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0168.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>168</itunes:episode><itunes:title>SwiftUI Navigation: The Point</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0168-720p-ec78c31f9e994b9ebcd1750106561826.mp4" length="637625743" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0168-720p-ec78c31f9e994b9ebcd1750106561826.mp4" length="637625743" type="video/mp4" medium="video"><media:title>SwiftUI Navigation: The Point</media:title></media:content></item><item><title>SwiftUI Navigation: Links, Part 3</title><pubDate>Mon, 08 Nov 2021 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep167-swiftui-navigation-links-part-3</link><guid>https://www.pointfree.co/episodes/ep167-swiftui-navigation-links-part-3</guid><description>Over the past weeks we have come up with some seriously powerful tools for SwiftUI navigation that have allowed us to more precisely and correctly model our app's domain, so let's exercise them a bit more by adding more behavior and deeper navigation to our application.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Over the past weeks we have come up with some seriously powerful tools for SwiftUI navigation that have allowed us to more precisely and correctly model our app's domain, so let's exercise them a bit more by adding more behavior and deeper navigation to our application.</itunes:subtitle><itunes:summary>Over the past weeks we have come up with some seriously powerful tools for SwiftUI navigation that have allowed us to more precisely and correctly model our app's domain, so let's exercise them a bit more by adding more behavior and deeper navigation to our application.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:40:29</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0167.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>167</itunes:episode><itunes:title>SwiftUI Navigation: Links, Part 3</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0167-720p-95066056b3ad4d56b6a204dccf47b574.mp4" length="492248155" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0167-720p-95066056b3ad4d56b6a204dccf47b574.mp4" length="492248155" type="video/mp4" medium="video"><media:title>SwiftUI Navigation: Links, Part 3</media:title></media:content></item><item><title>SwiftUI Navigation: Links, Part 2</title><pubDate>Mon, 01 Nov 2021 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep166-swiftui-navigation-links-part-2</link><guid>https://www.pointfree.co/episodes/ep166-swiftui-navigation-links-part-2</guid><description>Let's explore "tag" and "selection"-based navigation links in SwiftUI. What are they for and how do they compare with the link and link helpers we've used so far? We will then take a step back to compare links with all of the other forms of navigation out there and propose a "Grand Unified Theory of Navigation."</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let's explore "tag" and "selection"-based navigation links in SwiftUI. What are they for and how do they compare with the link and link helpers we've used so far? We will then take a step back to compare links with all of the other forms of navigation out there and propose a "Grand Unified Theory of Navigation."</itunes:subtitle><itunes:summary>Let's explore "tag" and "selection"-based navigation links in SwiftUI. What are they for and how do they compare with the link and link helpers we've used so far? We will then take a step back to compare links with all of the other forms of navigation out there and propose a "Grand Unified Theory of Navigation."</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:37:56</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0166.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>166</itunes:episode><itunes:title>SwiftUI Navigation: Links, Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0166-720p-98c0f428edb64e218fac98e46986bc3c.mp4" length="481317407" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0166-720p-98c0f428edb64e218fac98e46986bc3c.mp4" length="481317407" type="video/mp4" medium="video"><media:title>SwiftUI Navigation: Links, Part 2</media:title></media:content></item><item><title>SwiftUI Navigation: Links, Part 1</title><pubDate>Mon, 25 Oct 2021 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep165-swiftui-navigation-links-part-1</link><guid>https://www.pointfree.co/episodes/ep165-swiftui-navigation-links-part-1</guid><description>It's time to explore the most complex form of navigation in SwiftUI: links! We'll start with some simpler flavors of `NavigationLink` to see how they work, how they compare with other navigation APIs, and how they interact with the tools we've built in this series.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>It's time to explore the most complex form of navigation in SwiftUI: links! We'll start with some simpler flavors of `NavigationLink` to see how they work, how they compare with other navigation APIs, and how they interact with the tools we've built in this series.</itunes:subtitle><itunes:summary>It's time to explore the most complex form of navigation in SwiftUI: links! We'll start with some simpler flavors of `NavigationLink` to see how they work, how they compare with other navigation APIs, and how they interact with the tools we've built in this series.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:39:20</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0165.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>165</itunes:episode><itunes:title>SwiftUI Navigation: Links, Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0165-720p-915634cf02ed413383f0f82445899602.mp4" length="314122962" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0165-720p-915634cf02ed413383f0f82445899602.mp4" length="314122962" type="video/mp4" medium="video"><media:title>SwiftUI Navigation: Links, Part 1</media:title></media:content></item><item><title>SwiftUI Navigation: Sheets &amp; Popovers, Part 3</title><pubDate>Mon, 18 Oct 2021 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep164-swiftui-navigation-sheets-popovers-part-3</link><guid>https://www.pointfree.co/episodes/ep164-swiftui-navigation-sheets-popovers-part-3</guid><description>Now that we've built up the tools needed to bind application state to navigation, let's exercise them. We'll quickly add *two* more features to our application, beef up our navigation tools, and even write unit tests that assert against navigation and deep-linking.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Now that we've built up the tools needed to bind application state to navigation, let's exercise them. We'll quickly add *two* more features to our application, beef up our navigation tools, and even write unit tests that assert against navigation and deep-linking.</itunes:subtitle><itunes:summary>Now that we've built up the tools needed to bind application state to navigation, let's exercise them. We'll quickly add *two* more features to our application, beef up our navigation tools, and even write unit tests that assert against navigation and deep-linking.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:40:55</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0164.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>164</itunes:episode><itunes:title>SwiftUI Navigation: Sheets &amp; Popovers, Part 3</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0164-720p-f238acb14c8b40f6abf323abbe3fec39.mp4" length="425049609" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0164-720p-f238acb14c8b40f6abf323abbe3fec39.mp4" length="425049609" type="video/mp4" medium="video"><media:title>SwiftUI Navigation: Sheets &amp; Popovers, Part 3</media:title></media:content></item><item><title>SwiftUI Navigation: Sheets &amp; Popovers, Part 2</title><pubDate>Mon, 11 Oct 2021 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep163-swiftui-navigation-sheets-popovers-part-2</link><guid>https://www.pointfree.co/episodes/ep163-swiftui-navigation-sheets-popovers-part-2</guid><description>This week we’ll explore how to drive a sheet with optional state and how to facilitate communication between the sheet and the view presenting it. In the process we will discover a wonderful binding transformation for working with optionals.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>This week we’ll explore how to drive a sheet with optional state and how to facilitate communication between the sheet and the view presenting it. In the process we will discover a wonderful binding transformation for working with optionals.</itunes:subtitle><itunes:summary>This week we’ll explore how to drive a sheet with optional state and how to facilitate communication between the sheet and the view presenting it. In the process we will discover a wonderful binding transformation for working with optionals.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:31:51</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0163.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>163</itunes:episode><itunes:title>SwiftUI Navigation: Sheets &amp; Popovers, Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0163-720p-a3ccd320659f40d2bae6864ca96b1d06.mp4" length="324372335" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0163-720p-a3ccd320659f40d2bae6864ca96b1d06.mp4" length="324372335" type="video/mp4" medium="video"><media:title>SwiftUI Navigation: Sheets &amp; Popovers, Part 2</media:title></media:content></item><item><title>SwiftUI Navigation: Sheets &amp; Popovers, Part 1</title><pubDate>Mon, 04 Oct 2021 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep162-swiftui-navigation-sheets-popovers-part-1</link><guid>https://www.pointfree.co/episodes/ep162-swiftui-navigation-sheets-popovers-part-1</guid><description>It's time to look at a more advanced kind of navigation: modals. We will implement a new feature that will be driven by a sheet and can be deep-linked into. Along the way we'll introduce a helper to solve a domain modeling problem involving enum state.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>It's time to look at a more advanced kind of navigation: modals. We will implement a new feature that will be driven by a sheet and can be deep-linked into. Along the way we'll introduce a helper to solve a domain modeling problem involving enum state.</itunes:subtitle><itunes:summary>It's time to look at a more advanced kind of navigation: modals. We will implement a new feature that will be driven by a sheet and can be deep-linked into. Along the way we'll introduce a helper to solve a domain modeling problem involving enum state.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:43:32</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0162.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>162</itunes:episode><itunes:title>SwiftUI Navigation: Sheets &amp; Popovers, Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0162-720p-89e2d0b8f38a4644bd36681d6ccf40a4.mp4" length="412172321" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0162-720p-89e2d0b8f38a4644bd36681d6ccf40a4.mp4" length="412172321" type="video/mp4" medium="video"><media:title>SwiftUI Navigation: Sheets &amp; Popovers, Part 1</media:title></media:content></item><item><title>SwiftUI Navigation: Tabs &amp; Alerts, Part 2</title><pubDate>Mon, 27 Sep 2021 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep161-swiftui-navigation-tabs-alerts-part-2</link><guid>https://www.pointfree.co/episodes/ep161-swiftui-navigation-tabs-alerts-part-2</guid><description>We continue our journey exploring navigation with an examination of alerts and action sheets. We'll compare their original APIs in SwiftUI to the ones that replace them in the SDK that just shipped, and do a domain modeling exercise to recover what was lost.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We continue our journey exploring navigation with an examination of alerts and action sheets. We'll compare their original APIs in SwiftUI to the ones that replace them in the SDK that just shipped, and do a domain modeling exercise to recover what was lost.</itunes:subtitle><itunes:summary>We continue our journey exploring navigation with an examination of alerts and action sheets. We'll compare their original APIs in SwiftUI to the ones that replace them in the SDK that just shipped, and do a domain modeling exercise to recover what was lost.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:32:25</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0161.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>161</itunes:episode><itunes:title>SwiftUI Navigation: Tabs &amp; Alerts, Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0161-720p-b09ed52e8b3d49999c8b0098a6ab4fbc.mp4" length="315348575" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0161-720p-b09ed52e8b3d49999c8b0098a6ab4fbc.mp4" length="315348575" type="video/mp4" medium="video"><media:title>SwiftUI Navigation: Tabs &amp; Alerts, Part 2</media:title></media:content></item><item><title>SwiftUI Navigation: Tabs &amp; Alerts, Part 1</title><pubDate>Mon, 20 Sep 2021 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep160-swiftui-navigation-tabs-alerts-part-1</link><guid>https://www.pointfree.co/episodes/ep160-swiftui-navigation-tabs-alerts-part-1</guid><description>Navigation is a really, really complex topic, and it's going to take us many episodes go deep into it. We will begin our journey by coming up with a precise definition of what "navigation" is, and by exploring a couple simpler forms of navigation.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Navigation is a really, really complex topic, and it's going to take us many episodes go deep into it. We will begin our journey by coming up with a precise definition of what "navigation" is, and by exploring a couple simpler forms of navigation.</itunes:subtitle><itunes:summary>Navigation is a really, really complex topic, and it's going to take us many episodes go deep into it. We will begin our journey by coming up with a precise definition of what "navigation" is, and by exploring a couple simpler forms of navigation.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:28:00</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0160.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>160</itunes:episode><itunes:title>SwiftUI Navigation: Tabs &amp; Alerts, Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0160-720p-de94ae4846bf407a8dbf516d993e269c.mp4" length="354225848" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0160-720p-de94ae4846bf407a8dbf516d993e269c.mp4" length="354225848" type="video/mp4" medium="video"><media:title>SwiftUI Navigation: Tabs &amp; Alerts, Part 1</media:title></media:content></item><item><title>Safer, Conciser Forms: Part 2</title><pubDate>Mon, 06 Sep 2021 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep159-safer-conciser-forms-part-2</link><guid>https://www.pointfree.co/episodes/ep159-safer-conciser-forms-part-2</guid><description>We just made the Composable Architecture's concise binding helpers safer, but can we make them even more concise? We'll start with a suggestion that came from the community and employ even more Swift tricks, like dynamic member lookup, to get things even conciser than vanilla SwiftUI.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We just made the Composable Architecture's concise binding helpers safer, but can we make them even more concise? We'll start with a suggestion that came from the community and employ even more Swift tricks, like dynamic member lookup, to get things even conciser than vanilla SwiftUI.</itunes:subtitle><itunes:summary>We just made the Composable Architecture's concise binding helpers safer, but can we make them even more concise? We'll start with a suggestion that came from the community and employ even more Swift tricks, like dynamic member lookup, to get things even conciser than vanilla SwiftUI.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:28:01</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0159.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>159</itunes:episode><itunes:title>Safer, Conciser Forms: Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0159-720p-870bd75741a74165bac49d7ac234d6e3.mp4" length="335579763" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0159-720p-870bd75741a74165bac49d7ac234d6e3.mp4" length="335579763" type="video/mp4" medium="video"><media:title>Safer, Conciser Forms: Part 2</media:title></media:content></item><item><title>Safer, Conciser Forms: Part 1</title><pubDate>Mon, 30 Aug 2021 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep158-safer-conciser-forms-part-1</link><guid>https://www.pointfree.co/episodes/ep158-safer-conciser-forms-part-1</guid><description>Previously we explored how SwiftUI makes building forms a snap, and we contrasted it with the boilerplate introduced by the Composable Architecture. We employed a number of advanced tools to close the gap, but we can do better! We’ll start by using a property wrapper to make things much safer than before.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Previously we explored how SwiftUI makes building forms a snap, and we contrasted it with the boilerplate introduced by the Composable Architecture. We employed a number of advanced tools to close the gap, but we can do better! We’ll start by using a property wrapper to make things much safer than before.</itunes:subtitle><itunes:summary>Previously we explored how SwiftUI makes building forms a snap, and we contrasted it with the boilerplate introduced by the Composable Architecture. We employed a number of advanced tools to close the gap, but we can do better! We’ll start by using a property wrapper to make things much safer than before.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:29:28</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0158.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>158</itunes:episode><itunes:title>Safer, Conciser Forms: Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0158-720p-93ea95a73056498c8286146c61aca288.mp4" length="341287240" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0158-720p-93ea95a73056498c8286146c61aca288.mp4" length="341287240" type="video/mp4" medium="video"><media:title>Safer, Conciser Forms: Part 1</media:title></media:content></item><item><title>Searchable SwiftUI: Part 2</title><pubDate>Mon, 16 Aug 2021 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep157-searchable-swiftui-part-2</link><guid>https://www.pointfree.co/episodes/ep157-searchable-swiftui-part-2</guid><description>We finish our search-based application by adding and controlling another MapKit API, integrating it into our application so we can annotate a map with search results, and then we'll go the extra mile and write tests for the entire thing!</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We finish our search-based application by adding and controlling another MapKit API, integrating it into our application so we can annotate a map with search results, and then we'll go the extra mile and write tests for the entire thing!</itunes:subtitle><itunes:summary>We finish our search-based application by adding and controlling another MapKit API, integrating it into our application so we can annotate a map with search results, and then we'll go the extra mile and write tests for the entire thing!</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:57:40</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0157.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>157</itunes:episode><itunes:title>Searchable SwiftUI: Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0157-720p-8cb81a8b39074cbc8b50ff84cf6f5379.mp4" length="488685581" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0157-720p-8cb81a8b39074cbc8b50ff84cf6f5379.mp4" length="488685581" type="video/mp4" medium="video"><media:title>Searchable SwiftUI: Part 2</media:title></media:content></item><item><title>Searchable SwiftUI: Part 1</title><pubDate>Mon, 09 Aug 2021 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep156-searchable-swiftui-part-1</link><guid>https://www.pointfree.co/episodes/ep156-searchable-swiftui-part-1</guid><description>Let's develop a new application from scratch to explore SwiftUI's new `.searchable` API. We'll use MapKit to search for points of interest, and we will control this complex dependency so that our application can be fully testable.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let's develop a new application from scratch to explore SwiftUI's new `.searchable` API. We'll use MapKit to search for points of interest, and we will control this complex dependency so that our application can be fully testable.</itunes:subtitle><itunes:summary>Let's develop a new application from scratch to explore SwiftUI's new `.searchable` API. We'll use MapKit to search for points of interest, and we will control this complex dependency so that our application can be fully testable.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:41:11</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0156.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>156</itunes:episode><itunes:title>Searchable SwiftUI: Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0156-720p-64a722c881eb4630b347e1d92a5559ad.mp4" length="335953333" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0156-720p-64a722c881eb4630b347e1d92a5559ad.mp4" length="335953333" type="video/mp4" medium="video"><media:title>Searchable SwiftUI: Part 1</media:title></media:content></item><item><title>SwiftUI Focus State</title><pubDate>Mon, 02 Aug 2021 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep155-swiftui-focus-state</link><guid>https://www.pointfree.co/episodes/ep155-swiftui-focus-state</guid><description>Let's explore another API just announced at WWDC: `@FocusState`. We'll take a simple example and layer on some complexity, including side effects and testability, and we'll see that the solution we land on works just as well in the Composable Architecture!</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let's explore another API just announced at WWDC: `@FocusState`. We'll take a simple example and layer on some complexity, including side effects and testability, and we'll see that the solution we land on works just as well in the Composable Architecture!</itunes:subtitle><itunes:summary>Let's explore another API just announced at WWDC: `@FocusState`. We'll take a simple example and layer on some complexity, including side effects and testability, and we'll see that the solution we land on works just as well in the Composable Architecture!</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:39:36</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0155.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>155</itunes:episode><itunes:title>SwiftUI Focus State</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0155-720p-e6c96b1b54c34c5ab01ff81373f0ac11.mp4" length="374673376" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0155-720p-e6c96b1b54c34c5ab01ff81373f0ac11.mp4" length="374673376" type="video/mp4" medium="video"><media:title>SwiftUI Focus State</media:title></media:content></item><item><title>Async Refreshable: Composable Architecture</title><pubDate>Mon, 26 Jul 2021 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep154-async-refreshable-composable-architecture</link><guid>https://www.pointfree.co/episodes/ep154-async-refreshable-composable-architecture</guid><description>The Composable Architecture does not yet support any of the fancy new concurrency features from WWDC this year, so is it possible to interact with async/await APIs like `.refreshable`? Not only is it possible, but it can be done without any changes to the core library.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>The Composable Architecture does not yet support any of the fancy new concurrency features from WWDC this year, so is it possible to interact with async/await APIs like `.refreshable`? Not only is it possible, but it can be done without any changes to the core library.</itunes:subtitle><itunes:summary>The Composable Architecture does not yet support any of the fancy new concurrency features from WWDC this year, so is it possible to interact with async/await APIs like `.refreshable`? Not only is it possible, but it can be done without any changes to the core library.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:34:52</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0154.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>154</itunes:episode><itunes:title>Async Refreshable: Composable Architecture</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0154-720p-32f5674cb4214c19a92261cf52896bd3.mp4" length="364471160" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0154-720p-32f5674cb4214c19a92261cf52896bd3.mp4" length="364471160" type="video/mp4" medium="video"><media:title>Async Refreshable: Composable Architecture</media:title></media:content></item><item><title>Async Refreshable: SwiftUI</title><pubDate>Mon, 19 Jul 2021 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep153-async-refreshable-swiftui</link><guid>https://www.pointfree.co/episodes/ep153-async-refreshable-swiftui</guid><description>Let's take a look at the new refreshable API in SwiftUI. We will explore how to add it to a feature, how it depends on Swift's new async/await tools, and how to introduce cancellation.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let's take a look at the new refreshable API in SwiftUI. We will explore how to add it to a feature, how it depends on Swift's new async/await tools, and how to introduce cancellation.</itunes:subtitle><itunes:summary>Let's take a look at the new refreshable API in SwiftUI. We will explore how to add it to a feature, how it depends on Swift's new async/await tools, and how to introduce cancellation.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:33:10</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0153.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>153</itunes:episode><itunes:title>Async Refreshable: SwiftUI</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0153-720p-46fc507c0b8e40749d67c8f7dd238d9f.mp4" length="315386887" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0153-720p-46fc507c0b8e40749d67c8f7dd238d9f.mp4" length="315386887" type="video/mp4" medium="video"><media:title>Async Refreshable: SwiftUI</media:title></media:content></item><item><title>Composable Architecture Performance: Case Paths</title><pubDate>Mon, 05 Jul 2021 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep152-composable-architecture-performance-case-paths</link><guid>https://www.pointfree.co/episodes/ep152-composable-architecture-performance-case-paths</guid><description>This week we improve the performance of another part of the Composable Architecture ecosystem: case paths! We will benchmark the reflection mechanism that powers case paths and speed things up with the help of a Swift runtime function.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>This week we improve the performance of another part of the Composable Architecture ecosystem: case paths! We will benchmark the reflection mechanism that powers case paths and speed things up with the help of a Swift runtime function.</itunes:subtitle><itunes:summary>This week we improve the performance of another part of the Composable Architecture ecosystem: case paths! We will benchmark the reflection mechanism that powers case paths and speed things up with the help of a Swift runtime function.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:31:18</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0152.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>152</itunes:episode><itunes:title>Composable Architecture Performance: Case Paths</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0152-720p-6ae87c7eba904b3298c8b6b74062e7d2.mp4" length="222768088" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0152-720p-6ae87c7eba904b3298c8b6b74062e7d2.mp4" length="222768088" type="video/mp4" medium="video"><media:title>Composable Architecture Performance: Case Paths</media:title></media:content></item><item><title>Composable Architecture Performance: View Stores and Scoping</title><pubDate>Mon, 28 Jun 2021 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep151-composable-architecture-performance-view-stores-and-scoping</link><guid>https://www.pointfree.co/episodes/ep151-composable-architecture-performance-view-stores-and-scoping</guid><description>Did you know the Composable Architecture's `scope` operation and `ViewStore` are performance tools? We'll explore how to diagnose your app's performance, how `scope` can help, and fix a few long-standing performance issues in the library itself.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Did you know the Composable Architecture's `scope` operation and `ViewStore` are performance tools? We'll explore how to diagnose your app's performance, how `scope` can help, and fix a few long-standing performance issues in the library itself.</itunes:subtitle><itunes:summary>Did you know the Composable Architecture's `scope` operation and `ViewStore` are performance tools? We'll explore how to diagnose your app's performance, how `scope` can help, and fix a few long-standing performance issues in the library itself.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:45:16</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0151.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>151</itunes:episode><itunes:title>Composable Architecture Performance: View Stores and Scoping</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0151-720p-234e80305cea4d968d9054de56641cd0.mp4" length="418703166" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0151-720p-234e80305cea4d968d9054de56641cd0.mp4" length="418703166" type="video/mp4" medium="video"><media:title>Composable Architecture Performance: View Stores and Scoping</media:title></media:content></item><item><title>Derived Behavior: The Point</title><pubDate>Mon, 21 Jun 2021 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep150-derived-behavior-the-point</link><guid>https://www.pointfree.co/episodes/ep150-derived-behavior-the-point</guid><description>We typically rewrite vanilla SwiftUI applications into Composable Architecture applications, but this week we do the opposite! We will explore "deriving behavior" by taking an existing TCA app and rewriting it using only the SwiftUI tools Apple gives us.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We typically rewrite vanilla SwiftUI applications into Composable Architecture applications, but this week we do the opposite! We will explore "deriving behavior" by taking an existing TCA app and rewriting it using only the SwiftUI tools Apple gives us.</itunes:subtitle><itunes:summary>We typically rewrite vanilla SwiftUI applications into Composable Architecture applications, but this week we do the opposite! We will explore "deriving behavior" by taking an existing TCA app and rewriting it using only the SwiftUI tools Apple gives us.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>01:00:10</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0150.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>150</itunes:episode><itunes:title>Derived Behavior: The Point</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0150-720p-8787cf7fabce45e4981350082f4d7d09.mp4" length="281521072" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0150-720p-8787cf7fabce45e4981350082f4d7d09.mp4" length="281521072" type="video/mp4" medium="video"><media:title>Derived Behavior: The Point</media:title></media:content></item><item><title>Derived Behavior: Optionals and Enums</title><pubDate>Mon, 14 Jun 2021 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep149-derived-behavior-optionals-and-enums</link><guid>https://www.pointfree.co/episodes/ep149-derived-behavior-optionals-and-enums</guid><description>We will explore two more domain transformations in the Composable Architecture. One comes with the library: the ability to embed a smaller domain, optionally, in a larger domain. Another we will build from scratch: the ability to embed smaller domains in the cases of an enum!</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We will explore two more domain transformations in the Composable Architecture. One comes with the library: the ability to embed a smaller domain, optionally, in a larger domain. Another we will build from scratch: the ability to embed smaller domains in the cases of an enum!</itunes:subtitle><itunes:summary>We will explore two more domain transformations in the Composable Architecture. One comes with the library: the ability to embed a smaller domain, optionally, in a larger domain. Another we will build from scratch: the ability to embed smaller domains in the cases of an enum!</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>01:21:04</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0149.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>149</itunes:episode><itunes:title>Derived Behavior: Optionals and Enums</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0149-720p-e03ae24ade3b4b1d8e02db2b76b408eb.mp4" length="823166771" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0149-720p-e03ae24ade3b4b1d8e02db2b76b408eb.mp4" length="823166771" type="video/mp4" medium="video"><media:title>Derived Behavior: Optionals and Enums</media:title></media:content></item><item><title>Derived Behavior: Collections</title><pubDate>Mon, 31 May 2021 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep148-derived-behavior-collections</link><guid>https://www.pointfree.co/episodes/ep148-derived-behavior-collections</guid><description>The Composable Architecture comes with several tools that aid in breaking large domains down into smaller ones, not just `pullback` and `scope`. This week we will see how it can take a small domain and embed it many times in a collection domain.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>The Composable Architecture comes with several tools that aid in breaking large domains down into smaller ones, not just `pullback` and `scope`. This week we will see how it can take a small domain and embed it many times in a collection domain.</itunes:subtitle><itunes:summary>The Composable Architecture comes with several tools that aid in breaking large domains down into smaller ones, not just `pullback` and `scope`. This week we will see how it can take a small domain and embed it many times in a collection domain.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:43:07</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0148.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>148</itunes:episode><itunes:title>Derived Behavior: Collections</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0148-720p-c0979c48f8cb4e7481ba9eed0f117a45.mp4" length="368373679" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0148-720p-c0979c48f8cb4e7481ba9eed0f117a45.mp4" length="368373679" type="video/mp4" medium="video"><media:title>Derived Behavior: Collections</media:title></media:content></item><item><title>Derived Behavior: Composable Architecture</title><pubDate>Mon, 24 May 2021 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep147-derived-behavior-composable-architecture</link><guid>https://www.pointfree.co/episodes/ep147-derived-behavior-composable-architecture</guid><description>Let's rebuild last week's moderately complex SwiftUI app in the Composable Architecture to explore its built-in solution for breaking larger domains down into smaller ones using the `scope` operator. We'll then explore a few examples of `scope` in the wild.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let's rebuild last week's moderately complex SwiftUI app in the Composable Architecture to explore its built-in solution for breaking larger domains down into smaller ones using the `scope` operator. We'll then explore a few examples of `scope` in the wild.</itunes:subtitle><itunes:summary>Let's rebuild last week's moderately complex SwiftUI app in the Composable Architecture to explore its built-in solution for breaking larger domains down into smaller ones using the `scope` operator. We'll then explore a few examples of `scope` in the wild.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:45:17</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0147.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>147</itunes:episode><itunes:title>Derived Behavior: Composable Architecture</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0147-720p-06b8c8759e41468f8a737dc415dea4fb.mp4" length="447737695" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0147-720p-06b8c8759e41468f8a737dc415dea4fb.mp4" length="447737695" type="video/mp4" medium="video"><media:title>Derived Behavior: Composable Architecture</media:title></media:content></item><item><title>Derived Behavior: The Problem</title><pubDate>Mon, 17 May 2021 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep146-derived-behavior-the-problem</link><guid>https://www.pointfree.co/episodes/ep146-derived-behavior-the-problem</guid><description>The ability to break down applications into small domains that are understandable in isolation is a universal problem, and yet there is no default story for doing so in SwiftUI. We explore the problem space and a possible solution in vanilla SwiftUI before turning our attention to the Composable Architecture.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>The ability to break down applications into small domains that are understandable in isolation is a universal problem, and yet there is no default story for doing so in SwiftUI. We explore the problem space and a possible solution in vanilla SwiftUI before turning our attention to the Composable Architecture.</itunes:subtitle><itunes:summary>The ability to break down applications into small domains that are understandable in isolation is a universal problem, and yet there is no default story for doing so in SwiftUI. We explore the problem space and a possible solution in vanilla SwiftUI before turning our attention to the Composable Architecture.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:42:08</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0146.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>146</itunes:episode><itunes:title>Derived Behavior: The Problem</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0146-720p-eb9e28aafe48495c86b182a89bd5eaf2.mp4" length="507947561" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0146-720p-eb9e28aafe48495c86b182a89bd5eaf2.mp4" length="507947561" type="video/mp4" medium="video"><media:title>Derived Behavior: The Problem</media:title></media:content></item><item><title>A Tour of isowords: Part 4</title><pubDate>Mon, 10 May 2021 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep145-a-tour-of-isowords-part-4</link><guid>https://www.pointfree.co/episodes/ep145-a-tour-of-isowords-part-4</guid><description>We wrap up our tour of [isowords](https://www.isowords.xyz) by showing off two powerful ways the iOS client and Swift server share code. Not only does the same code that routes server requests simultaneously power the API client, but we can write integration tests that exercise the full client–server lifecycle.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We wrap up our tour of [isowords](https://www.isowords.xyz) by showing off two powerful ways the iOS client and Swift server share code. Not only does the same code that routes server requests simultaneously power the API client, but we can write integration tests that exercise the full client–server lifecycle.</itunes:subtitle><itunes:summary>We wrap up our tour of [isowords](https://www.isowords.xyz) by showing off two powerful ways the iOS client and Swift server share code. Not only does the same code that routes server requests simultaneously power the API client, but we can write integration tests that exercise the full client–server lifecycle.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:53:54</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0145.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>145</itunes:episode><itunes:title>A Tour of isowords: Part 4</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0145-720p-4e479ad219ec4590ae6412d6d4b2c416.mp4" length="518632255" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0145-720p-4e479ad219ec4590ae6412d6d4b2c416.mp4" length="518632255" type="video/mp4" medium="video"><media:title>A Tour of isowords: Part 4</media:title></media:content></item><item><title>A Tour of isowords: Part 3</title><pubDate>Mon, 03 May 2021 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep144-a-tour-of-isowords-part-3</link><guid>https://www.pointfree.co/episodes/ep144-a-tour-of-isowords-part-3</guid><description>It's time to take a look at the other half of the [isowords](https://www.isowords.xyz) code base: the server! We'll get you running the server locally, and then explore some benefits of developing client and server in Swift, such as simultaneously debugging both applications together, and sharing code.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>It's time to take a look at the other half of the [isowords](https://www.isowords.xyz) code base: the server! We'll get you running the server locally, and then explore some benefits of developing client and server in Swift, such as simultaneously debugging both applications together, and sharing code.</itunes:subtitle><itunes:summary>It's time to take a look at the other half of the [isowords](https://www.isowords.xyz) code base: the server! We'll get you running the server locally, and then explore some benefits of developing client and server in Swift, such as simultaneously debugging both applications together, and sharing code.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:32:25</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0144.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>144</itunes:episode><itunes:title>A Tour of isowords: Part 3</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0144-720p-f1f94c5ec60b43f8a6543f8d5b79f06e.mp4" length="363938131" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0144-720p-f1f94c5ec60b43f8a6543f8d5b79f06e.mp4" length="363938131" type="video/mp4" medium="video"><media:title>A Tour of isowords: Part 3</media:title></media:content></item><item><title>A Tour of isowords: Part 2</title><pubDate>Mon, 26 Apr 2021 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep143-a-tour-of-isowords-part-2</link><guid>https://www.pointfree.co/episodes/ep143-a-tour-of-isowords-part-2</guid><description>Let's dive deeper into the [isowords](https://www.isowords.xyz) code base. We'll explore how the Composable Architecture and modularization unlocked many things, including the ability to add an onboarding experience without any changes to feature code, an App Clip, and even App Store assets.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let's dive deeper into the [isowords](https://www.isowords.xyz) code base. We'll explore how the Composable Architecture and modularization unlocked many things, including the ability to add an onboarding experience without any changes to feature code, an App Clip, and even App Store assets.</itunes:subtitle><itunes:summary>Let's dive deeper into the [isowords](https://www.isowords.xyz) code base. We'll explore how the Composable Architecture and modularization unlocked many things, including the ability to add an onboarding experience without any changes to feature code, an App Clip, and even App Store assets.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:57:01</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0143.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>143</itunes:episode><itunes:title>A Tour of isowords: Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0143-720p-65fd415292954c0bbd695c97afe539dd.mp4" length="669144331" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0143-720p-65fd415292954c0bbd695c97afe539dd.mp4" length="669144331" type="video/mp4" medium="video"><media:title>A Tour of isowords: Part 2</media:title></media:content></item><item><title>A Tour of isowords: Part 1</title><pubDate>Mon, 19 Apr 2021 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep142-a-tour-of-isowords-part-1</link><guid>https://www.pointfree.co/episodes/ep142-a-tour-of-isowords-part-1</guid><description>In past episodes we took a peek behind the curtains of our recently released iOS game, [isowords](https://www.isowords.xyz). Now it's time to dive deep into the code base to see how it's built. We'll start by showing our modern approach to project management using SPM and explore how the Composable Architecture powers the entire application.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>In past episodes we took a peek behind the curtains of our recently released iOS game, [isowords](https://www.isowords.xyz). Now it's time to dive deep into the code base to see how it's built. We'll start by showing our modern approach to project management using SPM and explore how the Composable Architecture powers the entire application.</itunes:subtitle><itunes:summary>In past episodes we took a peek behind the curtains of our recently released iOS game, [isowords](https://www.isowords.xyz). Now it's time to dive deep into the code base to see how it's built. We'll start by showing our modern approach to project management using SPM and explore how the Composable Architecture powers the entire application.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:37:18</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0142.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>142</itunes:episode><itunes:title>A Tour of isowords: Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0142-720p-455fafa5ab7e43da9231735bb079b560.mp4" length="347814830" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0142-720p-455fafa5ab7e43da9231735bb079b560.mp4" length="347814830" type="video/mp4" medium="video"><media:title>A Tour of isowords: Part 1</media:title></media:content></item><item><title>Better Test Dependencies: The Point</title><pubDate>Mon, 05 Apr 2021 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep141-better-test-dependencies-the-point</link><guid>https://www.pointfree.co/episodes/ep141-better-test-dependencies-the-point</guid><description>Crafting better test dependencies for our code bases come with additional benefits outside of testing. We show how SwiftUI previews can be strengthened from better dependencies, and we show how we employ these techniques in our newly released game, [isowords](https://www.isowords.xyz).</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Crafting better test dependencies for our code bases come with additional benefits outside of testing. We show how SwiftUI previews can be strengthened from better dependencies, and we show how we employ these techniques in our newly released game, [isowords](https://www.isowords.xyz).</itunes:subtitle><itunes:summary>Crafting better test dependencies for our code bases come with additional benefits outside of testing. We show how SwiftUI previews can be strengthened from better dependencies, and we show how we employ these techniques in our newly released game, [isowords](https://www.isowords.xyz).</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:52:28</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0141.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>141</itunes:episode><itunes:title>Better Test Dependencies: The Point</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0141-720p-b8e6a06e8a75415a9529cfda84ac9489.mp4" length="484555165" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0141-720p-b8e6a06e8a75415a9529cfda84ac9489.mp4" length="484555165" type="video/mp4" medium="video"><media:title>Better Test Dependencies: The Point</media:title></media:content></item><item><title>Better Test Dependencies: Immediacy</title><pubDate>Mon, 29 Mar 2021 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep140-better-test-dependencies-immediacy</link><guid>https://www.pointfree.co/episodes/ep140-better-test-dependencies-immediacy</guid><description>A major source of complexity in our applications is asynchrony. It is a side effect that is easy to overlook and can make testing more difficult and less reliable. We will explore the problem and come to a solution using Combine schedulers.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>A major source of complexity in our applications is asynchrony. It is a side effect that is easy to overlook and can make testing more difficult and less reliable. We will explore the problem and come to a solution using Combine schedulers.</itunes:subtitle><itunes:summary>A major source of complexity in our applications is asynchrony. It is a side effect that is easy to overlook and can make testing more difficult and less reliable. We will explore the problem and come to a solution using Combine schedulers.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:40:40</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0140.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>140</itunes:episode><itunes:title>Better Test Dependencies: Immediacy</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0140-720p-6b91634945a5491a9bdd2f5369c7f418.mp4" length="500412097" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0140-720p-6b91634945a5491a9bdd2f5369c7f418.mp4" length="500412097" type="video/mp4" medium="video"><media:title>Better Test Dependencies: Immediacy</media:title></media:content></item><item><title>Better Test Dependencies: Failability</title><pubDate>Mon, 22 Mar 2021 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep139-better-test-dependencies-failability</link><guid>https://www.pointfree.co/episodes/ep139-better-test-dependencies-failability</guid><description>Exhaustively describing dependencies in your tests makes them stronger _and_ easier to understand. We improve the ergonomics of this technique by ditching the `fatalError` in unimplemented dependencies, using `XCTFail`, and we open source a library along the way.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Exhaustively describing dependencies in your tests makes them stronger _and_ easier to understand. We improve the ergonomics of this technique by ditching the `fatalError` in unimplemented dependencies, using `XCTFail`, and we open source a library along the way.</itunes:subtitle><itunes:summary>Exhaustively describing dependencies in your tests makes them stronger _and_ easier to understand. We improve the ergonomics of this technique by ditching the `fatalError` in unimplemented dependencies, using `XCTFail`, and we open source a library along the way.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:36:22</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0139.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>139</itunes:episode><itunes:title>Better Test Dependencies: Failability</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0139-720p-e4ffb6c74fc94ab18eae55fe9bd089ea.mp4" length="382330314" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0139-720p-e4ffb6c74fc94ab18eae55fe9bd089ea.mp4" length="382330314" type="video/mp4" medium="video"><media:title>Better Test Dependencies: Failability</media:title></media:content></item><item><title>Better Test Dependencies: Exhaustivity</title><pubDate>Mon, 15 Mar 2021 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep138-better-test-dependencies-exhaustivity</link><guid>https://www.pointfree.co/episodes/ep138-better-test-dependencies-exhaustivity</guid><description>We talk about dependencies a lot on Point-Free, but we've never done a deep dive on how to tune them for testing. It's time to do just that, by first showing how a test can exhaustively describe its dependencies, which comes with some incredible benefits.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We talk about dependencies a lot on Point-Free, but we've never done a deep dive on how to tune them for testing. It's time to do just that, by first showing how a test can exhaustively describe its dependencies, which comes with some incredible benefits.</itunes:subtitle><itunes:summary>We talk about dependencies a lot on Point-Free, but we've never done a deep dive on how to tune them for testing. It's time to do just that, by first showing how a test can exhaustively describe its dependencies, which comes with some incredible benefits.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:41:55</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0138.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>138</itunes:episode><itunes:title>Better Test Dependencies: Exhaustivity</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0138-720p-fd3f4d1794714647a130e45a5ae0a98a.mp4" length="397574724" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0138-720p-fd3f4d1794714647a130e45a5ae0a98a.mp4" length="397574724" type="video/mp4" medium="video"><media:title>Better Test Dependencies: Exhaustivity</media:title></media:content></item><item><title>SwiftUI Animation: The Point</title><pubDate>Mon, 01 Mar 2021 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep137-swiftui-animation-the-point</link><guid>https://www.pointfree.co/episodes/ep137-swiftui-animation-the-point</guid><description>Animating asynchronous effects with Combine schedulers is not only important for the Composable Architecture. It can be incredibly useful for any SwiftUI application. We will explore this with a fresh SwiftUI project to see what problems they solve and how they can allow us to better embrace SwiftUI's APIs.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Animating asynchronous effects with Combine schedulers is not only important for the Composable Architecture. It can be incredibly useful for any SwiftUI application. We will explore this with a fresh SwiftUI project to see what problems they solve and how they can allow us to better embrace SwiftUI's APIs.</itunes:subtitle><itunes:summary>Animating asynchronous effects with Combine schedulers is not only important for the Composable Architecture. It can be incredibly useful for any SwiftUI application. We will explore this with a fresh SwiftUI project to see what problems they solve and how they can allow us to better embrace SwiftUI's APIs.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:44:10</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0137.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>137</itunes:episode><itunes:title>SwiftUI Animation: The Point</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0137-720p-b53fb0fa5181440d9168c8dcc19ab2c3.mp4" length="428414864" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0137-720p-b53fb0fa5181440d9168c8dcc19ab2c3.mp4" length="428414864" type="video/mp4" medium="video"><media:title>SwiftUI Animation: The Point</media:title></media:content></item><item><title>SwiftUI Animation: Composable Architecture</title><pubDate>Mon, 22 Feb 2021 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep136-swiftui-animation-the-basics</link><guid>https://www.pointfree.co/episodes/ep136-swiftui-animation-the-basics</guid><description>The Composable Architecture mostly "just works" with SwiftUI animations out of the box, except for one key situation: animations driven by asynchronous effects. To fix this we are led to a really surprising transformation of Combine schedulers.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>The Composable Architecture mostly "just works" with SwiftUI animations out of the box, except for one key situation: animations driven by asynchronous effects. To fix this we are led to a really surprising transformation of Combine schedulers.</itunes:subtitle><itunes:summary>The Composable Architecture mostly "just works" with SwiftUI animations out of the box, except for one key situation: animations driven by asynchronous effects. To fix this we are led to a really surprising transformation of Combine schedulers.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:44:38</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0136.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>136</itunes:episode><itunes:title>SwiftUI Animation: Composable Architecture</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0136-720p-3fcb24c7101545acb745d633a5af3004.mp4" length="462154546" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0136-720p-3fcb24c7101545acb745d633a5af3004.mp4" length="462154546" type="video/mp4" medium="video"><media:title>SwiftUI Animation: Composable Architecture</media:title></media:content></item><item><title>SwiftUI Animation: The Basics</title><pubDate>Mon, 15 Feb 2021 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep135-swiftui-animation-the-basics</link><guid>https://www.pointfree.co/episodes/ep135-swiftui-animation-the-basics</guid><description>One of the most impressive features of SwiftUI is its animation system. Let's explore the various flavors of animation, such as implicit versus explicit and synchronous versus asynchronous, to help prepare us for how animation works with the Composable Architecture.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>One of the most impressive features of SwiftUI is its animation system. Let's explore the various flavors of animation, such as implicit versus explicit and synchronous versus asynchronous, to help prepare us for how animation works with the Composable Architecture.</itunes:subtitle><itunes:summary>One of the most impressive features of SwiftUI is its animation system. Let's explore the various flavors of animation, such as implicit versus explicit and synchronous versus asynchronous, to help prepare us for how animation works with the Composable Architecture.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:39:13</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0135.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>135</itunes:episode><itunes:title>SwiftUI Animation: The Basics</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0135-720p-208ccebd9c4849acba6e2ce6ba580c74.mp4" length="347183591" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0135-720p-208ccebd9c4849acba6e2ce6ba580c74.mp4" length="347183591" type="video/mp4" medium="video"><media:title>SwiftUI Animation: The Basics</media:title></media:content></item><item><title>Concise Forms: The Point</title><pubDate>Mon, 08 Feb 2021 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep134-concise-forms-the-point</link><guid>https://www.pointfree.co/episodes/ep134-concise-forms-the-point</guid><description>We've shown how to dramatically streamline forms in the Composable Architecture, but it's time to ask "what's the point?" We apply the concepts previously developed to a real world application: [isowords](https://www.isowords.xyz). It's a word game built in the Composable Architecture, launching soon.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We've shown how to dramatically streamline forms in the Composable Architecture, but it's time to ask "what's the point?" We apply the concepts previously developed to a real world application: [isowords](https://www.isowords.xyz). It's a word game built in the Composable Architecture, launching soon.</itunes:subtitle><itunes:summary>We've shown how to dramatically streamline forms in the Composable Architecture, but it's time to ask "what's the point?" We apply the concepts previously developed to a real world application: [isowords](https://www.isowords.xyz). It's a word game built in the Composable Architecture, launching soon.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:28:14</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0134.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>134</itunes:episode><itunes:title>Concise Forms: The Point</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0134-720p-9f5f9c354f0f40d9b82f4ef28f16ffd4.mp4" length="373699419" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0134-720p-9f5f9c354f0f40d9b82f4ef28f16ffd4.mp4" length="373699419" type="video/mp4" medium="video"><media:title>Concise Forms: The Point</media:title></media:content></item><item><title>Concise Forms: Bye Bye Boilerplate</title><pubDate>Mon, 01 Feb 2021 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep133-concise-forms-bye-bye-boilerplate</link><guid>https://www.pointfree.co/episodes/ep133-concise-forms-bye-bye-boilerplate</guid><description>The Composable Architecture makes it easy to layer complexity onto a form, but it just can't match the brevity of vanilla SwiftUI…or can it!? We will overcome a Swift language limitation using key paths and type erasure to finally say "bye!" to boilerplate.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>The Composable Architecture makes it easy to layer complexity onto a form, but it just can't match the brevity of vanilla SwiftUI…or can it!? We will overcome a Swift language limitation using key paths and type erasure to finally say "bye!" to boilerplate.</itunes:subtitle><itunes:summary>The Composable Architecture makes it easy to layer complexity onto a form, but it just can't match the brevity of vanilla SwiftUI…or can it!? We will overcome a Swift language limitation using key paths and type erasure to finally say "bye!" to boilerplate.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:58:55</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0133.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>133</itunes:episode><itunes:title>Concise Forms: Bye Bye Boilerplate</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0133-720p-2e5b67c24baf41348d0cec5413406ca7.mp4" length="665906304" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0133-720p-2e5b67c24baf41348d0cec5413406ca7.mp4" length="665906304" type="video/mp4" medium="video"><media:title>Concise Forms: Bye Bye Boilerplate</media:title></media:content></item><item><title>Concise Forms: Composable Architecture</title><pubDate>Mon, 25 Jan 2021 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep132-concise-forms-composable-architecture</link><guid>https://www.pointfree.co/episodes/ep132-concise-forms-composable-architecture</guid><description>Building forms in the Composable Architecture seem to have the opposite strengths and weaknesses as vanilla SwiftUI. Simple forms are cumbersome due to boilerplate, but complex forms come naturally thanks to the strong opinion on dependencies and side effects.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Building forms in the Composable Architecture seem to have the opposite strengths and weaknesses as vanilla SwiftUI. Simple forms are cumbersome due to boilerplate, but complex forms come naturally thanks to the strong opinion on dependencies and side effects.</itunes:subtitle><itunes:summary>Building forms in the Composable Architecture seem to have the opposite strengths and weaknesses as vanilla SwiftUI. Simple forms are cumbersome due to boilerplate, but complex forms come naturally thanks to the strong opinion on dependencies and side effects.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>01:01:29</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0132.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>132</itunes:episode><itunes:title>Concise Forms: Composable Architecture</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0132-720p-9c796cbccd8b4c5984168bea3a728b77.mp4" length="131300774" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0132-720p-9c796cbccd8b4c5984168bea3a728b77.mp4" length="131300774" type="video/mp4" medium="video"><media:title>Concise Forms: Composable Architecture</media:title></media:content></item><item><title>Concise Forms: SwiftUI</title><pubDate>Mon, 18 Jan 2021 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep131-concise-forms-swiftui</link><guid>https://www.pointfree.co/episodes/ep131-concise-forms-swiftui</guid><description>For simple forms, vanilla SwiftUI does a really good job: you can quickly build a form with many components in minimal code and boilerplate. But as a form becomes more complex, SwiftUI stops being so helpful. Let's explore the problems that emerge and how we can work around them.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>For simple forms, vanilla SwiftUI does a really good job: you can quickly build a form with many components in minimal code and boilerplate. But as a form becomes more complex, SwiftUI stops being so helpful. Let's explore the problems that emerge and how we can work around them.</itunes:subtitle><itunes:summary>For simple forms, vanilla SwiftUI does a really good job: you can quickly build a form with many components in minimal code and boilerplate. But as a form becomes more complex, SwiftUI stops being so helpful. Let's explore the problems that emerge and how we can work around them.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:35:37</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0131.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>131</itunes:episode><itunes:title>Concise Forms: SwiftUI</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0131-720p-eb2f9993d9f242b78877f1e03ebd1319.mp4" length="344729846" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0131-720p-eb2f9993d9f242b78877f1e03ebd1319.mp4" length="344729846" type="video/mp4" medium="video"><media:title>Concise Forms: SwiftUI</media:title></media:content></item><item><title>Parsing and Performance: The Point</title><pubDate>Mon, 21 Dec 2020 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep130-parsing-and-performance-the-point</link><guid>https://www.pointfree.co/episodes/ep130-parsing-and-performance-the-point</guid><description>It is well accepted that hand-rolled, imperative parsers are vastly more performant than parsers built with combinators. However, we show that by employing all of our performance tricks we can get within a stone's throw of the performance of imperative parsers, and with much more maintainable code.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>It is well accepted that hand-rolled, imperative parsers are vastly more performant than parsers built with combinators. However, we show that by employing all of our performance tricks we can get within a stone's throw of the performance of imperative parsers, and with much more maintainable code.</itunes:subtitle><itunes:summary>It is well accepted that hand-rolled, imperative parsers are vastly more performant than parsers built with combinators. However, we show that by employing all of our performance tricks we can get within a stone's throw of the performance of imperative parsers, and with much more maintainable code.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:58:46</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0130.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>130</itunes:episode><itunes:title>Parsing and Performance: The Point</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0130-720p-56e963e7f6f540a58344c452138f9c3f.mp4" length="669202779" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0130-720p-56e963e7f6f540a58344c452138f9c3f.mp4" length="669202779" type="video/mp4" medium="video"><media:title>Parsing and Performance: The Point</media:title></media:content></item><item><title>Parsing and Performance: Protocols</title><pubDate>Mon, 14 Dec 2020 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep129-parsing-and-performance-protocols</link><guid>https://www.pointfree.co/episodes/ep129-parsing-and-performance-protocols</guid><description>The performance gains we have made with the parser type have already been super impressive, but we can take things even further. We will explore the performance characteristics of closures using the time profiler and make some changes to how we define parsers to unlock even more speed.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>The performance gains we have made with the parser type have already been super impressive, but we can take things even further. We will explore the performance characteristics of closures using the time profiler and make some changes to how we define parsers to unlock even more speed.</itunes:subtitle><itunes:summary>The performance gains we have made with the parser type have already been super impressive, but we can take things even further. We will explore the performance characteristics of closures using the time profiler and make some changes to how we define parsers to unlock even more speed.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:39:19</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0129.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>129</itunes:episode><itunes:title>Parsing and Performance: Protocols</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0129-720p-d54b166ebfed41968bbc13916a7a8bf7.mp4" length="448249668" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0129-720p-d54b166ebfed41968bbc13916a7a8bf7.mp4" length="448249668" type="video/mp4" medium="video"><media:title>Parsing and Performance: Protocols</media:title></media:content></item><item><title>Parsing and Performance: Combinators</title><pubDate>Mon, 07 Dec 2020 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep128-parsing-and-performance-combinators</link><guid>https://www.pointfree.co/episodes/ep128-parsing-and-performance-combinators</guid><description>We convert some of our substring parsers to work on lower levels of String abstractions, and unlock huge performance gains. Even better, thanks to our generalized parser we can even piece together multiple parsers that work on different abstraction levels, maximizing performance in the process.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We convert some of our substring parsers to work on lower levels of String abstractions, and unlock huge performance gains. Even better, thanks to our generalized parser we can even piece together multiple parsers that work on different abstraction levels, maximizing performance in the process.</itunes:subtitle><itunes:summary>We convert some of our substring parsers to work on lower levels of String abstractions, and unlock huge performance gains. Even better, thanks to our generalized parser we can even piece together multiple parsers that work on different abstraction levels, maximizing performance in the process.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:50:54</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0128.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>128</itunes:episode><itunes:title>Parsing and Performance: Combinators</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0128-720p-5349813891684babb19b4fa85020b3c5.mp4" length="437658290" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0128-720p-5349813891684babb19b4fa85020b3c5.mp4" length="437658290" type="video/mp4" medium="video"><media:title>Parsing and Performance: Combinators</media:title></media:content></item><item><title>Parsing and Performance: Strings</title><pubDate>Mon, 30 Nov 2020 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep127-parsing-and-performance-strings</link><guid>https://www.pointfree.co/episodes/ep127-parsing-and-performance-strings</guid><description>We want to explore the performance of composable parsers, but to do so we must first take a deep dive into the Swift string API. There are multiple abstractions of strings in Swift, each with its own benefits and performance characteristics. We will benchmark them in order to get a scientific basis for comparison, and will describe how to properly write a benchmark.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We want to explore the performance of composable parsers, but to do so we must first take a deep dive into the Swift string API. There are multiple abstractions of strings in Swift, each with its own benefits and performance characteristics. We will benchmark them in order to get a scientific basis for comparison, and will describe how to properly write a benchmark.</itunes:subtitle><itunes:summary>We want to explore the performance of composable parsers, but to do so we must first take a deep dive into the Swift string API. There are multiple abstractions of strings in Swift, each with its own benefits and performance characteristics. We will benchmark them in order to get a scientific basis for comparison, and will describe how to properly write a benchmark.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:35:18</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0127.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>127</itunes:episode><itunes:title>Parsing and Performance: Strings</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0127-720p-8b996d0ed1ea48b78f1f7a9b40954add.mp4" length="369116041" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0127-720p-8b996d0ed1ea48b78f1f7a9b40954add.mp4" length="369116041" type="video/mp4" medium="video"><media:title>Parsing and Performance: Strings</media:title></media:content></item><item><title>Generalized Parsing: Part 3</title><pubDate>Mon, 23 Nov 2020 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep126-generalized-parsing-part-3</link><guid>https://www.pointfree.co/episodes/ep126-generalized-parsing-part-3</guid><description>Generalizing the parser type has allowed us to parse more types of inputs, but that is only scratching the surface. It also unlocks many new things that were previously impossible to see, including the ability to parse a stream of inputs and stream its output, making our parsers much more performant.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Generalizing the parser type has allowed us to parse more types of inputs, but that is only scratching the surface. It also unlocks many new things that were previously impossible to see, including the ability to parse a stream of inputs and stream its output, making our parsers much more performant.</itunes:subtitle><itunes:summary>Generalizing the parser type has allowed us to parse more types of inputs, but that is only scratching the surface. It also unlocks many new things that were previously impossible to see, including the ability to parse a stream of inputs and stream its output, making our parsers much more performant.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:36:29</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0126.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>126</itunes:episode><itunes:title>Generalized Parsing: Part 3</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0126-720p-9663b7e65eeb4a12993d25df6d4e8be8.mp4" length="439045612" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0126-720p-9663b7e65eeb4a12993d25df6d4e8be8.mp4" length="439045612" type="video/mp4" medium="video"><media:title>Generalized Parsing: Part 3</media:title></media:content></item><item><title>Generalized Parsing: Part 2</title><pubDate>Mon, 16 Nov 2020 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep125-generalized-parsing-part-2</link><guid>https://www.pointfree.co/episodes/ep125-generalized-parsing-part-2</guid><description>Now that we have generalized the parser type it's time to parse things that aren't just plain strings. In just a few lines of code the parser type can parse environment variable dictionaries and even become a fully capable URL router.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Now that we have generalized the parser type it's time to parse things that aren't just plain strings. In just a few lines of code the parser type can parse environment variable dictionaries and even become a fully capable URL router.</itunes:subtitle><itunes:summary>Now that we have generalized the parser type it's time to parse things that aren't just plain strings. In just a few lines of code the parser type can parse environment variable dictionaries and even become a fully capable URL router.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:53:52</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0125.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>125</itunes:episode><itunes:title>Generalized Parsing: Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0125-720p-4e3b5e7f12c44e359c10cd50c15fbbad.mp4" length="463437208" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0125-720p-4e3b5e7f12c44e359c10cd50c15fbbad.mp4" length="463437208" type="video/mp4" medium="video"><media:title>Generalized Parsing: Part 2</media:title></media:content></item><item><title>Generalized Parsing: Part 1</title><pubDate>Mon, 09 Nov 2020 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep124-generalized-parsing-part-1</link><guid>https://www.pointfree.co/episodes/ep124-generalized-parsing-part-1</guid><description>The parser type we built so far is highly tuned to work on strings, but there are many things out in the world we’d want to parse, not just strings. It’s time to massively generalize parsing so that it can parse any kind of input into any kind of output.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>The parser type we built so far is highly tuned to work on strings, but there are many things out in the world we’d want to parse, not just strings. It’s time to massively generalize parsing so that it can parse any kind of input into any kind of output.</itunes:subtitle><itunes:summary>The parser type we built so far is highly tuned to work on strings, but there are many things out in the world we’d want to parse, not just strings. It’s time to massively generalize parsing so that it can parse any kind of input into any kind of output.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:33:14</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0124.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>124</itunes:episode><itunes:title>Generalized Parsing: Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0124-720p-5978a461c999474dac69f4c88176b262.mp4" length="279846436" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0124-720p-5978a461c999474dac69f4c88176b262.mp4" length="279846436" type="video/mp4" medium="video"><media:title>Generalized Parsing: Part 1</media:title></media:content></item><item><title>Fluently Zipping Parsers</title><pubDate>Mon, 02 Nov 2020 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep123-fluently-zipping-parsers</link><guid>https://www.pointfree.co/episodes/ep123-fluently-zipping-parsers</guid><description>The zip function shows up on many types: from Swift arrays and Combine publishers, to optionals, results, and even parsers! But zip on parsers is a little unlike zip on all of those other types. Let's explore why and how to fix it.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>The zip function shows up on many types: from Swift arrays and Combine publishers, to optionals, results, and even parsers! But zip on parsers is a little unlike zip on all of those other types. Let's explore why and how to fix it.</itunes:subtitle><itunes:summary>The zip function shows up on many types: from Swift arrays and Combine publishers, to optionals, results, and even parsers! But zip on parsers is a little unlike zip on all of those other types. Let's explore why and how to fix it.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:51:23</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0123.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>123</itunes:episode><itunes:title>Fluently Zipping Parsers</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0123-720p-e2f26899f1144be5a8110b1b4e4bd4ea.mp4" length="529232366" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0123-720p-e2f26899f1144be5a8110b1b4e4bd4ea.mp4" length="529232366" type="video/mp4" medium="video"><media:title>Fluently Zipping Parsers</media:title></media:content></item><item><title>Parsing Xcode Logs: Part 2</title><pubDate>Mon, 26 Oct 2020 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep122-parsing-xcode-logs-part-2</link><guid>https://www.pointfree.co/episodes/ep122-parsing-xcode-logs-part-2</guid><description>We finish up our XCTest log parser by parsing out the data associated with a test failure. Once done we will format the results in a pretty way and package everything up in a CLI tool we can run in our own projects.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We finish up our XCTest log parser by parsing out the data associated with a test failure. Once done we will format the results in a pretty way and package everything up in a CLI tool we can run in our own projects.</itunes:subtitle><itunes:summary>We finish up our XCTest log parser by parsing out the data associated with a test failure. Once done we will format the results in a pretty way and package everything up in a CLI tool we can run in our own projects.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:28:18</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0122.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>122</itunes:episode><itunes:title>Parsing Xcode Logs: Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0122-720p-d990f2010a654a0da35a69e0c2a4786a.mp4" length="279923065" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0122-720p-d990f2010a654a0da35a69e0c2a4786a.mp4" length="279923065" type="video/mp4" medium="video"><media:title>Parsing Xcode Logs: Part 2</media:title></media:content></item><item><title>Parsing Xcode Logs: Part 1</title><pubDate>Mon, 19 Oct 2020 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep121-parsing-xcode-logs-part-1</link><guid>https://www.pointfree.co/episodes/ep121-parsing-xcode-logs-part-1</guid><description>Now that we've refamiliarized ourselves with parsing, let's parse something even more complex: XCTest logs. We will parse and pretty-print the output from `xcodebuild` and discover more reusable combinators along the way.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Now that we've refamiliarized ourselves with parsing, let's parse something even more complex: XCTest logs. We will parse and pretty-print the output from `xcodebuild` and discover more reusable combinators along the way.</itunes:subtitle><itunes:summary>Now that we've refamiliarized ourselves with parsing, let's parse something even more complex: XCTest logs. We will parse and pretty-print the output from `xcodebuild` and discover more reusable combinators along the way.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:31:03</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0121.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>121</itunes:episode><itunes:title>Parsing Xcode Logs: Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0121-720p-76caf7e11b664327a0fdd26f484985d4.mp4" length="302154416" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0121-720p-76caf7e11b664327a0fdd26f484985d4.mp4" length="302154416" type="video/mp4" medium="video"><media:title>Parsing Xcode Logs: Part 1</media:title></media:content></item><item><title>Parser Combinators Recap: Part 2</title><pubDate>Mon, 12 Oct 2020 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep120-parser-combinators-recap-part-2</link><guid>https://www.pointfree.co/episodes/ep120-parser-combinators-recap-part-2</guid><description>We round out our parsing recap by reintroducing that functional trio of operators: map, zip, and flat-map. We'll use them to build up some complex parsers and make a few more ergonomic improvements to our library along the way.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We round out our parsing recap by reintroducing that functional trio of operators: map, zip, and flat-map. We'll use them to build up some complex parsers and make a few more ergonomic improvements to our library along the way.</itunes:subtitle><itunes:summary>We round out our parsing recap by reintroducing that functional trio of operators: map, zip, and flat-map. We'll use them to build up some complex parsers and make a few more ergonomic improvements to our library along the way.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:38:39</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0120.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>120</itunes:episode><itunes:title>Parser Combinators Recap: Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0120-720p-025403ea2ce0484a9c98e6e9e555f6d4.mp4" length="319312208" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0120-720p-025403ea2ce0484a9c98e6e9e555f6d4.mp4" length="319312208" type="video/mp4" medium="video"><media:title>Parser Combinators Recap: Part 2</media:title></media:content></item><item><title>Parser Combinators Recap: Part 1</title><pubDate>Mon, 05 Oct 2020 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep119-parser-combinators-recap-part-1</link><guid>https://www.pointfree.co/episodes/ep119-parser-combinators-recap-part-1</guid><description>It's time to revisit one of our favorite topics: parsing! We want to discuss lots of new parsing topics, such as generalized parsing, performance, reversible parsing and more, but before all of that we will start with a recap of what we have covered previously, and make a few improvements along the way.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>It's time to revisit one of our favorite topics: parsing! We want to discuss lots of new parsing topics, such as generalized parsing, performance, reversible parsing and more, but before all of that we will start with a recap of what we have covered previously, and make a few improvements along the way.</itunes:subtitle><itunes:summary>It's time to revisit one of our favorite topics: parsing! We want to discuss lots of new parsing topics, such as generalized parsing, performance, reversible parsing and more, but before all of that we will start with a recap of what we have covered previously, and make a few improvements along the way.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:25:47</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0119.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>119</itunes:episode><itunes:title>Parser Combinators Recap: Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0119-720p-d5a19e0373984665a4d8674d55ffe6af.mp4" length="264332820" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0119-720p-d5a19e0373984665a4d8674d55ffe6af.mp4" length="264332820" type="video/mp4" medium="video"><media:title>Parser Combinators Recap: Part 1</media:title></media:content></item><item><title>The Point of Redacted SwiftUI: Part 2</title><pubDate>Mon, 21 Sep 2020 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep118-redacted-swiftui-the-point-part-2</link><guid>https://www.pointfree.co/episodes/ep118-redacted-swiftui-the-point-part-2</guid><description>We finish building a rich onboarding experience for our application by selectively enabling and disabling pieces of logic in the app depending on what step of the onboarding process we are on. This is only possible due to the strict "separation of concerns" the Composable Architecture maintains.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We finish building a rich onboarding experience for our application by selectively enabling and disabling pieces of logic in the app depending on what step of the onboarding process we are on. This is only possible due to the strict "separation of concerns" the Composable Architecture maintains.</itunes:subtitle><itunes:summary>We finish building a rich onboarding experience for our application by selectively enabling and disabling pieces of logic in the app depending on what step of the onboarding process we are on. This is only possible due to the strict "separation of concerns" the Composable Architecture maintains.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:26:21</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0118.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>118</itunes:episode><itunes:title>The Point of Redacted SwiftUI: Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0118-720p-9b1e1b0829264012af4bed3987ad6357.mp4" length="316608765" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0118-720p-9b1e1b0829264012af4bed3987ad6357.mp4" length="316608765" type="video/mp4" medium="video"><media:title>The Point of Redacted SwiftUI: Part 2</media:title></media:content></item><item><title>The Point of Redacted SwiftUI: Part 1</title><pubDate>Mon, 14 Sep 2020 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep117-redacted-swiftui-the-point-part-1</link><guid>https://www.pointfree.co/episodes/ep117-redacted-swiftui-the-point-part-1</guid><description>Not only can we easily redact the logic from a view using the Composable Architecture, but we can also insert new logic into our views without making any changes to the core logic of the view. To demonstrate this we will build an onboarding flow for a more complex application.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Not only can we easily redact the logic from a view using the Composable Architecture, but we can also insert new logic into our views without making any changes to the core logic of the view. To demonstrate this we will build an onboarding flow for a more complex application.</itunes:subtitle><itunes:summary>Not only can we easily redact the logic from a view using the Composable Architecture, but we can also insert new logic into our views without making any changes to the core logic of the view. To demonstrate this we will build an onboarding flow for a more complex application.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:29:43</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0117.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>117</itunes:episode><itunes:title>The Point of Redacted SwiftUI: Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0117-720p-63b87f1e8b564ec7b96843cfb7fc58ec.mp4" length="310668023" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0117-720p-63b87f1e8b564ec7b96843cfb7fc58ec.mp4" length="310668023" type="video/mp4" medium="video"><media:title>The Point of Redacted SwiftUI: Part 1</media:title></media:content></item><item><title>Redacted SwiftUI: The Composable Architecture</title><pubDate>Mon, 07 Sep 2020 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep116-redacted-swiftui-the-composable-architecture</link><guid>https://www.pointfree.co/episodes/ep116-redacted-swiftui-the-composable-architecture</guid><description>We've seen how cool redacted SwiftUI views are, but we've also seen some of their pitfalls: while it's easy to redact UI, it's not so easy to redact logic, that is unless you're using the Composable Architecture!</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We've seen how cool redacted SwiftUI views are, but we've also seen some of their pitfalls: while it's easy to redact UI, it's not so easy to redact logic, that is unless you're using the Composable Architecture!</itunes:subtitle><itunes:summary>We've seen how cool redacted SwiftUI views are, but we've also seen some of their pitfalls: while it's easy to redact UI, it's not so easy to redact logic, that is unless you're using the Composable Architecture!</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:20:32</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0116.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>116</itunes:episode><itunes:title>Redacted SwiftUI: The Composable Architecture</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0116-720p-4c1a94bbcb4e4ad8986fc26215f874b6.mp4" length="263677486" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0116-720p-4c1a94bbcb4e4ad8986fc26215f874b6.mp4" length="263677486" type="video/mp4" medium="video"><media:title>Redacted SwiftUI: The Composable Architecture</media:title></media:content></item><item><title>█████ed SwiftUI: The Problem</title><pubDate>Mon, 31 Aug 2020 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep115-redacted-swiftui-the-problem</link><guid>https://www.pointfree.co/episodes/ep115-redacted-swiftui-the-problem</guid><description>SwiftUI has introduced the concept of “████ed views”, which gives you a really nice way to ████ the text and images from views. This is really powerful, but just because the view has been ████ed it doesn't mean the logic has also been ████ed. We show why this is problematic and why we want to fix it.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>SwiftUI has introduced the concept of “████ed views”, which gives you a really nice way to ████ the text and images from views. This is really powerful, but just because the view has been ████ed it doesn't mean the logic has also been ████ed. We show why this is problematic and why we want to fix it.</itunes:subtitle><itunes:summary>SwiftUI has introduced the concept of “████ed views”, which gives you a really nice way to ████ the text and images from views. This is really powerful, but just because the view has been ████ed it doesn't mean the logic has also been ████ed. We show why this is problematic and why we want to fix it.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:25:49</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0115.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>115</itunes:episode><itunes:title>█████ed SwiftUI: The Problem</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0115-720p-1a21dc3f54df446b93c2e272657c33be.mp4" length="327899376" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0115-720p-1a21dc3f54df446b93c2e272657c33be.mp4" length="327899376" type="video/mp4" medium="video"><media:title>█████ed SwiftUI: The Problem</media:title></media:content></item><item><title>Designing Dependencies: The Point</title><pubDate>Mon, 24 Aug 2020 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep114-designing-dependencies-the-point</link><guid>https://www.pointfree.co/episodes/ep114-designing-dependencies-the-point</guid><description>So, what's the point of forgoing the protocols and designing dependencies with simple data types? It can be summed up in 3 words: testing, testing, testing. We can now easily write tests that exercise every aspect of our application, including its reliance on internet connectivity and location services.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>So, what's the point of forgoing the protocols and designing dependencies with simple data types? It can be summed up in 3 words: testing, testing, testing. We can now easily write tests that exercise every aspect of our application, including its reliance on internet connectivity and location services.</itunes:subtitle><itunes:summary>So, what's the point of forgoing the protocols and designing dependencies with simple data types? It can be summed up in 3 words: testing, testing, testing. We can now easily write tests that exercise every aspect of our application, including its reliance on internet connectivity and location services.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:50:47</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0114.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>114</itunes:episode><itunes:title>Designing Dependencies: The Point</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0114-720p-0d82f483963e4b41b0ca3de3539460ab.mp4" length="545072472" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0114-720p-0d82f483963e4b41b0ca3de3539460ab.mp4" length="545072472" type="video/mp4" medium="video"><media:title>Designing Dependencies: The Point</media:title></media:content></item><item><title>Designing Dependencies: Core Location</title><pubDate>Mon, 17 Aug 2020 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep113-designing-dependencies-core-location</link><guid>https://www.pointfree.co/episodes/ep113-designing-dependencies-core-location</guid><description>Now that we've tackled two dependencies of varying complexity we are ready to handle our most complicated dependency yet: Core Location. We will see what it means to control a dependency that communicates with a delegate and captures a complex state machine with many potential flows.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Now that we've tackled two dependencies of varying complexity we are ready to handle our most complicated dependency yet: Core Location. We will see what it means to control a dependency that communicates with a delegate and captures a complex state machine with many potential flows.</itunes:subtitle><itunes:summary>Now that we've tackled two dependencies of varying complexity we are ready to handle our most complicated dependency yet: Core Location. We will see what it means to control a dependency that communicates with a delegate and captures a complex state machine with many potential flows.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:50:58</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0113.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>113</itunes:episode><itunes:title>Designing Dependencies: Core Location</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0113-720p-70aab226194e4ca59057d05b8bd6875d.mp4" length="590069022" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0113-720p-70aab226194e4ca59057d05b8bd6875d.mp4" length="590069022" type="video/mp4" medium="video"><media:title>Designing Dependencies: Core Location</media:title></media:content></item><item><title>Designing Dependencies: Reachability</title><pubDate>Mon, 10 Aug 2020 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep112-designing-dependencies-reachability</link><guid>https://www.pointfree.co/episodes/ep112-designing-dependencies-reachability</guid><description>It's straightforward to design the dependency for interacting with an API client, but sadly most dependencies we work with are not so simple. So let's consider a far more complicated dependency. One that is long living, and involves extra types that we can't even construct ourselves.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>It's straightforward to design the dependency for interacting with an API client, but sadly most dependencies we work with are not so simple. So let's consider a far more complicated dependency. One that is long living, and involves extra types that we can't even construct ourselves.</itunes:subtitle><itunes:summary>It's straightforward to design the dependency for interacting with an API client, but sadly most dependencies we work with are not so simple. So let's consider a far more complicated dependency. One that is long living, and involves extra types that we can't even construct ourselves.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:46:30</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0112.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>112</itunes:episode><itunes:title>Designing Dependencies: Reachability</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0112-720p-627930ab92594eeab86be8ddd95ec5b5.mp4" length="461629372" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0112-720p-627930ab92594eeab86be8ddd95ec5b5.mp4" length="461629372" type="video/mp4" medium="video"><media:title>Designing Dependencies: Reachability</media:title></media:content></item><item><title>Designing Dependencies: Modularization</title><pubDate>Mon, 03 Aug 2020 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep111-designing-dependencies-modularization</link><guid>https://www.pointfree.co/episodes/ep111-designing-dependencies-modularization</guid><description>Let's scrap the protocols for designing our dependencies and just use plain data types. Not only will we gain lots of new benefits that were previously impossible with protocols, but we'll also be able to modularize our application to improve compile times.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let's scrap the protocols for designing our dependencies and just use plain data types. Not only will we gain lots of new benefits that were previously impossible with protocols, but we'll also be able to modularize our application to improve compile times.</itunes:subtitle><itunes:summary>Let's scrap the protocols for designing our dependencies and just use plain data types. Not only will we gain lots of new benefits that were previously impossible with protocols, but we'll also be able to modularize our application to improve compile times.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:34:04</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0111.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>111</itunes:episode><itunes:title>Designing Dependencies: Modularization</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0111-720p-b7f74fc6728a4110b4ed2327380676af.mp4" length="390223730" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0111-720p-b7f74fc6728a4110b4ed2327380676af.mp4" length="390223730" type="video/mp4" medium="video"><media:title>Designing Dependencies: Modularization</media:title></media:content></item><item><title>Designing Dependencies: The Problem</title><pubDate>Mon, 27 Jul 2020 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep110-designing-dependencies-the-problem</link><guid>https://www.pointfree.co/episodes/ep110-designing-dependencies-the-problem</guid><description>Let's take a moment to properly define what a dependency is and understand why they add so much complexity to our code. We will begin building a moderately complex application with three dependencies, and see how it complicates development, and what we can do about it.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let's take a moment to properly define what a dependency is and understand why they add so much complexity to our code. We will begin building a moderately complex application with three dependencies, and see how it complicates development, and what we can do about it.</itunes:subtitle><itunes:summary>Let's take a moment to properly define what a dependency is and understand why they add so much complexity to our code. We will begin building a moderately complex application with three dependencies, and see how it complicates development, and what we can do about it.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:34:41</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0110.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>110</itunes:episode><itunes:title>Designing Dependencies: The Problem</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0110-720p-6051969371c84736bf3b8b82fdb3e3be.mp4" length="434234819" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0110-720p-6051969371c84736bf3b8b82fdb3e3be.mp4" length="434234819" type="video/mp4" medium="video"><media:title>Designing Dependencies: The Problem</media:title></media:content></item><item><title>Composable SwiftUI Bindings: The Point</title><pubDate>Mon, 20 Jul 2020 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep109-composable-swiftui-bindings-the-point</link><guid>https://www.pointfree.co/episodes/ep109-composable-swiftui-bindings-the-point</guid><description>It's time to ask: "what's the point?" If composing bindings is so important, then why didn't Apple give us more tools to do it? To understand this we will explore how Apple handles these kinds of problems in their code samples, and compare it to what we have discovered in previous episodes.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>It's time to ask: "what's the point?" If composing bindings is so important, then why didn't Apple give us more tools to do it? To understand this we will explore how Apple handles these kinds of problems in their code samples, and compare it to what we have discovered in previous episodes.</itunes:subtitle><itunes:summary>It's time to ask: "what's the point?" If composing bindings is so important, then why didn't Apple give us more tools to do it? To understand this we will explore how Apple handles these kinds of problems in their code samples, and compare it to what we have discovered in previous episodes.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:39:33</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0109.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>109</itunes:episode><itunes:title>Composable SwiftUI Bindings: The Point</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0109-720p-a3859e9e6782459681116ca7629caba2.mp4" length="363620679" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0109-720p-a3859e9e6782459681116ca7629caba2.mp4" length="363620679" type="video/mp4" medium="video"><media:title>Composable SwiftUI Bindings: The Point</media:title></media:content></item><item><title>Composable SwiftUI Bindings: Case Paths</title><pubDate>Mon, 13 Jul 2020 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep108-composable-swiftui-bindings-case-paths</link><guid>https://www.pointfree.co/episodes/ep108-composable-swiftui-bindings-case-paths</guid><description>Now that we know that SwiftUI state management seems biased towards structs, let's fix it. We'll show how to write custom transformations on bindings so that we can use enums to model our domains precisely without muddying our views, and it turns out that case paths are the perfect tool for this job.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Now that we know that SwiftUI state management seems biased towards structs, let's fix it. We'll show how to write custom transformations on bindings so that we can use enums to model our domains precisely without muddying our views, and it turns out that case paths are the perfect tool for this job.</itunes:subtitle><itunes:summary>Now that we know that SwiftUI state management seems biased towards structs, let's fix it. We'll show how to write custom transformations on bindings so that we can use enums to model our domains precisely without muddying our views, and it turns out that case paths are the perfect tool for this job.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:45:40</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0108.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>108</itunes:episode><itunes:title>Composable SwiftUI Bindings: Case Paths</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0108-720p-5de638b7772e4f39a2e3f1c02b8722d1.mp4" length="432458785" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0108-720p-5de638b7772e4f39a2e3f1c02b8722d1.mp4" length="432458785" type="video/mp4" medium="video"><media:title>Composable SwiftUI Bindings: Case Paths</media:title></media:content></item><item><title>Composable SwiftUI Bindings: The Problem</title><pubDate>Mon, 06 Jul 2020 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep107-composable-swiftui-bindings-the-problem</link><guid>https://www.pointfree.co/episodes/ep107-composable-swiftui-bindings-the-problem</guid><description>Bindings are one of the core units of SwiftUI data flow and allow disparate parts of an application to communicate with one another, but they are built in such a way that strongly favors structs over enums. We will show that this prevents us from properly modeling our domains and causes unnecessary complexity in the process.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Bindings are one of the core units of SwiftUI data flow and allow disparate parts of an application to communicate with one another, but they are built in such a way that strongly favors structs over enums. We will show that this prevents us from properly modeling our domains and causes unnecessary complexity in the process.</itunes:subtitle><itunes:summary>Bindings are one of the core units of SwiftUI data flow and allow disparate parts of an application to communicate with one another, but they are built in such a way that strongly favors structs over enums. We will show that this prevents us from properly modeling our domains and causes unnecessary complexity in the process.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:31:57</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0107.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>107</itunes:episode><itunes:title>Composable SwiftUI Bindings: The Problem</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0107-720p-7b08bb6342ad43e89a1728a80946378f.mp4" length="388652450" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0107-720p-7b08bb6342ad43e89a1728a80946378f.mp4" length="388652450" type="video/mp4" medium="video"><media:title>Composable SwiftUI Bindings: The Problem</media:title></media:content></item><item><title>Combine Schedulers: Erasing Time</title><pubDate>Mon, 15 Jun 2020 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep106-combine-schedulers-erasing-time</link><guid>https://www.pointfree.co/episodes/ep106-combine-schedulers-erasing-time</guid><description>We refactor our application's code so that we can run it in production with a live dispatch queue for the scheduler, while allowing us to run it in tests with a test scheduler. If we do this naively we will find that generics infect many parts of our code, but luckily we can employ the technique of type erasure to make things much nicer.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We refactor our application's code so that we can run it in production with a live dispatch queue for the scheduler, while allowing us to run it in tests with a test scheduler. If we do this naively we will find that generics infect many parts of our code, but luckily we can employ the technique of type erasure to make things much nicer.</itunes:subtitle><itunes:summary>We refactor our application's code so that we can run it in production with a live dispatch queue for the scheduler, while allowing us to run it in tests with a test scheduler. If we do this naively we will find that generics infect many parts of our code, but luckily we can employ the technique of type erasure to make things much nicer.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:37:00</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0106.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>106</itunes:episode><itunes:title>Combine Schedulers: Erasing Time</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0106-720p-21198dcb490f4cacb280e1fa7d0e419a.mp4" length="488739622" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0106-720p-21198dcb490f4cacb280e1fa7d0e419a.mp4" length="488739622" type="video/mp4" medium="video"><media:title>Combine Schedulers: Erasing Time</media:title></media:content></item><item><title>Combine Schedulers: Controlling Time</title><pubDate>Mon, 08 Jun 2020 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep105-combine-schedulers-controlling-time</link><guid>https://www.pointfree.co/episodes/ep105-combine-schedulers-controlling-time</guid><description>The `Scheduler` protocol of Combine is a powerful abstraction that unifies many ways of executing asynchronous work, and it can even control the flow of time through our code. Unfortunately Combine doesn't give us this ability out of the box, so let's build it from scratch.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>The `Scheduler` protocol of Combine is a powerful abstraction that unifies many ways of executing asynchronous work, and it can even control the flow of time through our code. Unfortunately Combine doesn't give us this ability out of the box, so let's build it from scratch.</itunes:subtitle><itunes:summary>The `Scheduler` protocol of Combine is a powerful abstraction that unifies many ways of executing asynchronous work, and it can even control the flow of time through our code. Unfortunately Combine doesn't give us this ability out of the box, so let's build it from scratch.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>01:06:28</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0105.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>105</itunes:episode><itunes:title>Combine Schedulers: Controlling Time</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0105-720p-a21e502294b54b7abb1a11918788cd4b.mp4" length="509670869" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0105-720p-a21e502294b54b7abb1a11918788cd4b.mp4" length="509670869" type="video/mp4" medium="video"><media:title>Combine Schedulers: Controlling Time</media:title></media:content></item><item><title>Combine Schedulers: Testing Time</title><pubDate>Thu, 04 Jun 2020 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep104-combine-schedulers-testing-time</link><guid>https://www.pointfree.co/episodes/ep104-combine-schedulers-testing-time</guid><description>Combine is a powerful framework and is the de facto way to power SwiftUI applications, but how does one test reactive code? We will build a view model from scratch that involves asynchrony and time-based effects and explore what it takes to exhaustively test its functionality.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Combine is a powerful framework and is the de facto way to power SwiftUI applications, but how does one test reactive code? We will build a view model from scratch that involves asynchrony and time-based effects and explore what it takes to exhaustively test its functionality.</itunes:subtitle><itunes:summary>Combine is a powerful framework and is the de facto way to power SwiftUI applications, but how does one test reactive code? We will build a view model from scratch that involves asynchrony and time-based effects and explore what it takes to exhaustively test its functionality.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:49:37</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0104.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>104</itunes:episode><itunes:title>Combine Schedulers: Testing Time</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0104-720p-03e25140830e4b58ac877c621b74f025.mp4" length="412016103" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0104-720p-03e25140830e4b58ac877c621b74f025.mp4" length="412016103" type="video/mp4" medium="video"><media:title>Combine Schedulers: Testing Time</media:title></media:content></item><item><title>A Tour of the Composable Architecture: Part 4</title><pubDate>Mon, 25 May 2020 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep103-a-tour-of-the-composable-architecture-part-4</link><guid>https://www.pointfree.co/episodes/ep103-a-tour-of-the-composable-architecture-part-4</guid><description>We conclude our tour of the Composable Architecture by demonstrating how to test a complex effect. This gives us a chance to show off how the library can control time-based effects by using Combine schedulers.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We conclude our tour of the Composable Architecture by demonstrating how to test a complex effect. This gives us a chance to show off how the library can control time-based effects by using Combine schedulers.</itunes:subtitle><itunes:summary>We conclude our tour of the Composable Architecture by demonstrating how to test a complex effect. This gives us a chance to show off how the library can control time-based effects by using Combine schedulers.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:32:39</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0103.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>103</itunes:episode><itunes:title>A Tour of the Composable Architecture: Part 4</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0103-720p-da7ae39f6c274874b828c90f83fada69.mp4" length="337105933" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0103-720p-da7ae39f6c274874b828c90f83fada69.mp4" length="337105933" type="video/mp4" medium="video"><media:title>A Tour of the Composable Architecture: Part 4</media:title></media:content></item><item><title>A Tour of the Composable Architecture: Part 3</title><pubDate>Mon, 18 May 2020 05:00:01 +0000</pubDate><link>https://www.pointfree.co/episodes/ep102-a-tour-of-the-composable-architecture-part-3</link><guid>https://www.pointfree.co/episodes/ep102-a-tour-of-the-composable-architecture-part-3</guid><description>It's time to start proving that our business logic works the way we expect. We are going to show how easy it is to write tests with the Composable Architecture, which will give us the confidence to add more functionality and explore some advanced effect capabilities of the library.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>It's time to start proving that our business logic works the way we expect. We are going to show how easy it is to write tests with the Composable Architecture, which will give us the confidence to add more functionality and explore some advanced effect capabilities of the library.</itunes:subtitle><itunes:summary>It's time to start proving that our business logic works the way we expect. We are going to show how easy it is to write tests with the Composable Architecture, which will give us the confidence to add more functionality and explore some advanced effect capabilities of the library.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:32:28</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0102.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>102</itunes:episode><itunes:title>A Tour of the Composable Architecture: Part 3</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0102-720p-f16efbe95c074f0cb84cf6565b502992.mp4" length="372928086" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0102-720p-f16efbe95c074f0cb84cf6565b502992.mp4" length="372928086" type="video/mp4" medium="video"><media:title>A Tour of the Composable Architecture: Part 3</media:title></media:content></item><item><title>A Tour of the Composable Architecture: Part 2</title><pubDate>Mon, 11 May 2020 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep101-a-tour-of-the-composable-architecture-part-2</link><guid>https://www.pointfree.co/episodes/ep101-a-tour-of-the-composable-architecture-part-2</guid><description>Continuing the tour of our recently open-sourced library, the Composable Architecture, we start to employ some of the more advanced tools that come with the library. Right now our business logic and view is riddled with needless array index juggling, and a special higher-order reducer can clean it all up for us.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Continuing the tour of our recently open-sourced library, the Composable Architecture, we start to employ some of the more advanced tools that come with the library. Right now our business logic and view is riddled with needless array index juggling, and a special higher-order reducer can clean it all up for us.</itunes:subtitle><itunes:summary>Continuing the tour of our recently open-sourced library, the Composable Architecture, we start to employ some of the more advanced tools that come with the library. Right now our business logic and view is riddled with needless array index juggling, and a special higher-order reducer can clean it all up for us.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:28:21</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0101.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>101</itunes:episode><itunes:title>A Tour of the Composable Architecture: Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0101-720p-f0d2e542c34640c1aab8c17c61da5194.mp4" length="280081521" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0101-720p-f0d2e542c34640c1aab8c17c61da5194.mp4" length="280081521" type="video/mp4" medium="video"><media:title>A Tour of the Composable Architecture: Part 2</media:title></media:content></item><item><title>A Tour of the Composable Architecture: Part 1</title><pubDate>Mon, 04 May 2020 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep100-a-tour-of-the-composable-architecture-part-1</link><guid>https://www.pointfree.co/episodes/ep100-a-tour-of-the-composable-architecture-part-1</guid><description>It's our 100th episode 🎉! To celebrate, we are finally releasing the Composable Architecture as an open source library, which means you can start using it in your applications today! Let's take a tour of the library, see how it's changed from what we built in earlier episodes, and build a brand new app with it.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>It's our 100th episode 🎉! To celebrate, we are finally releasing the Composable Architecture as an open source library, which means you can start using it in your applications today! Let's take a tour of the library, see how it's changed from what we built in earlier episodes, and build a brand new app with it.</itunes:subtitle><itunes:summary>It's our 100th episode 🎉! To celebrate, we are finally releasing the Composable Architecture as an open source library, which means you can start using it in your applications today! Let's take a tour of the library, see how it's changed from what we built in earlier episodes, and build a brand new app with it.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:32:56</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0100.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>100</itunes:episode><itunes:title>A Tour of the Composable Architecture: Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0100-720p-7a16243734704834a71b3eb4ed6e8a5c.mp4" length="402161784" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0100-720p-7a16243734704834a71b3eb4ed6e8a5c.mp4" length="402161784" type="video/mp4" medium="video"><media:title>A Tour of the Composable Architecture: Part 1</media:title></media:content></item><item><title>Ergonomic State Management: Part 2</title><pubDate>Mon, 20 Apr 2020 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep99-ergonomic-state-management-part-2</link><guid>https://www.pointfree.co/episodes/ep99-ergonomic-state-management-part-2</guid><description>We've made creating and enhancing reducers more ergonomic, but we still haven't given much attention to the ergonomics of the view layer of the Composable Architecture. This week we'll make the Store much nicer to use by taking advantage of a new Swift feature and by enhancing it with a SwiftUI helper.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We've made creating and enhancing reducers more ergonomic, but we still haven't given much attention to the ergonomics of the view layer of the Composable Architecture. This week we'll make the Store much nicer to use by taking advantage of a new Swift feature and by enhancing it with a SwiftUI helper.</itunes:subtitle><itunes:summary>We've made creating and enhancing reducers more ergonomic, but we still haven't given much attention to the ergonomics of the view layer of the Composable Architecture. This week we'll make the Store much nicer to use by taking advantage of a new Swift feature and by enhancing it with a SwiftUI helper.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:24:03</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0099.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>99</itunes:episode><itunes:title>Ergonomic State Management: Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0099-720p-a0147c9845544cd1a831d0db7aa35106.mp4" length="198947483" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0099-720p-a0147c9845544cd1a831d0db7aa35106.mp4" length="198947483" type="video/mp4" medium="video"><media:title>Ergonomic State Management: Part 2</media:title></media:content></item><item><title>Ergonomic State Management: Part 1</title><pubDate>Mon, 13 Apr 2020 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep98-ergonomic-state-management-part-1</link><guid>https://www.pointfree.co/episodes/ep98-ergonomic-state-management-part-1</guid><description>The Composable Architecture is robust and solves all of the problems we set out to solve (and more), but we haven't given enough attention to ergonomics. We will enhance one of its core units to be a little friendlier to use and extend, which will bring us one step closing to being ready for production.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>The Composable Architecture is robust and solves all of the problems we set out to solve (and more), but we haven't given enough attention to ergonomics. We will enhance one of its core units to be a little friendlier to use and extend, which will bring us one step closing to being ready for production.</itunes:subtitle><itunes:summary>The Composable Architecture is robust and solves all of the problems we set out to solve (and more), but we haven't given enough attention to ergonomics. We will enhance one of its core units to be a little friendlier to use and extend, which will bring us one step closing to being ready for production.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:27:45</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0098.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>98</itunes:episode><itunes:title>Ergonomic State Management: Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0098-720p-e8aeacf33ca84f3892e19ce682b6cf31.mp4" length="248392854" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0098-720p-e8aeacf33ca84f3892e19ce682b6cf31.mp4" length="248392854" type="video/mp4" medium="video"><media:title>Ergonomic State Management: Part 1</media:title></media:content></item><item><title>Adaptive State Management: The Point</title><pubDate>Mon, 06 Apr 2020 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep97-adaptive-state-management-the-point</link><guid>https://www.pointfree.co/episodes/ep97-adaptive-state-management-the-point</guid><description>We've now shown that the Composable Architecture is also quite adaptive, allowing us to transform state and actions into very domain specific situations. Let's exercise those muscles by creating a macOS app from our iOS app and demonstrating that it's the perfect tool for creating cross-platform applications.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We've now shown that the Composable Architecture is also quite adaptive, allowing us to transform state and actions into very domain specific situations. Let's exercise those muscles by creating a macOS app from our iOS app and demonstrating that it's the perfect tool for creating cross-platform applications.</itunes:subtitle><itunes:summary>We've now shown that the Composable Architecture is also quite adaptive, allowing us to transform state and actions into very domain specific situations. Let's exercise those muscles by creating a macOS app from our iOS app and demonstrating that it's the perfect tool for creating cross-platform applications.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:27:26</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0097.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>97</itunes:episode><itunes:title>Adaptive State Management: The Point</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0097-720p-9833f20952004304bba626e292201c11.mp4" length="379337389" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0097-720p-9833f20952004304bba626e292201c11.mp4" length="379337389" type="video/mp4" medium="video"><media:title>Adaptive State Management: The Point</media:title></media:content></item><item><title>Adaptive State Management: Actions</title><pubDate>Mon, 30 Mar 2020 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep96-adaptive-state-management-actions</link><guid>https://www.pointfree.co/episodes/ep96-adaptive-state-management-actions</guid><description>When we fixed a performance problem in the Composable Architecture it gave us an opportunity to adapt the state of our application to many situations. We'll take these learnings to see how our application's actions may adapt as well.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>When we fixed a performance problem in the Composable Architecture it gave us an opportunity to adapt the state of our application to many situations. We'll take these learnings to see how our application's actions may adapt as well.</itunes:subtitle><itunes:summary>When we fixed a performance problem in the Composable Architecture it gave us an opportunity to adapt the state of our application to many situations. We'll take these learnings to see how our application's actions may adapt as well.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:42:37</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0096.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>96</itunes:episode><itunes:title>Adaptive State Management: Actions</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0096-720p-025082728e1d405e8f5bb8d8317282fe.mp4" length="527952411" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0096-720p-025082728e1d405e8f5bb8d8317282fe.mp4" length="527952411" type="video/mp4" medium="video"><media:title>Adaptive State Management: Actions</media:title></media:content></item><item><title>Adaptive State Management: State</title><pubDate>Mon, 23 Mar 2020 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep95-adaptive-state-management-state</link><guid>https://www.pointfree.co/episodes/ep95-adaptive-state-management-state</guid><description>There's a potential performance problem lurking in the Composable Architecture, and it's time to finally solve it. But, in doing so, we will stumble upon a wonderful way to make the architecture adaptive to many more situations.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>There's a potential performance problem lurking in the Composable Architecture, and it's time to finally solve it. But, in doing so, we will stumble upon a wonderful way to make the architecture adaptive to many more situations.</itunes:subtitle><itunes:summary>There's a potential performance problem lurking in the Composable Architecture, and it's time to finally solve it. But, in doing so, we will stumble upon a wonderful way to make the architecture adaptive to many more situations.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:40:25</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0095.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>95</itunes:episode><itunes:title>Adaptive State Management: State</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0095-720p-85551f90007640bd984f3d57e5b98501.mp4" length="403877254" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0095-720p-85551f90007640bd984f3d57e5b98501.mp4" length="403877254" type="video/mp4" medium="video"><media:title>Adaptive State Management: State</media:title></media:content></item><item><title>Adaptive State Management: Performance</title><pubDate>Mon, 16 Mar 2020 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep94-adaptive-state-management-performance</link><guid>https://www.pointfree.co/episodes/ep94-adaptive-state-management-performance</guid><description>It's time to put the finishing touches to our architecture so that we can use it in production. This week we begin exploring how to make the Composable Architecture adapt to many use cases, and we will use a potential performance problem as inspiration for this exploration.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>It's time to put the finishing touches to our architecture so that we can use it in production. This week we begin exploring how to make the Composable Architecture adapt to many use cases, and we will use a potential performance problem as inspiration for this exploration.</itunes:subtitle><itunes:summary>It's time to put the finishing touches to our architecture so that we can use it in production. This week we begin exploring how to make the Composable Architecture adapt to many use cases, and we will use a potential performance problem as inspiration for this exploration.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:21:20</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0094.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>94</itunes:episode><itunes:title>Adaptive State Management: Performance</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0094-720p-16bbc15ad53d49cbafbd5fe607ecb5e7.mp4" length="280117781" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0094-720p-16bbc15ad53d49cbafbd5fe607ecb5e7.mp4" length="280117781" type="video/mp4" medium="video"><media:title>Adaptive State Management: Performance</media:title></media:content></item><item><title>Modular Dependency Injection: The Point</title><pubDate>Mon, 02 Mar 2020 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep93-modular-dependency-injection-the-point</link><guid>https://www.pointfree.co/episodes/ep93-modular-dependency-injection-the-point</guid><description>It's time to prove that baking an "environment" of dependencies directly into the Composable Architecture solves three crucial problems that the global environment pattern could not.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>It's time to prove that baking an "environment" of dependencies directly into the Composable Architecture solves three crucial problems that the global environment pattern could not.</itunes:subtitle><itunes:summary>It's time to prove that baking an "environment" of dependencies directly into the Composable Architecture solves three crucial problems that the global environment pattern could not.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:44:54</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0093.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>93</itunes:episode><itunes:title>Modular Dependency Injection: The Point</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0093-720p-56a4403161ec4bc09993b660eb44fe1d.mp4" length="470712033" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0093-720p-56a4403161ec4bc09993b660eb44fe1d.mp4" length="470712033" type="video/mp4" medium="video"><media:title>Modular Dependency Injection: The Point</media:title></media:content></item><item><title>Dependency Injection Made Modular</title><pubDate>Mon, 24 Feb 2020 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep92-dependency-injection-made-modular</link><guid>https://www.pointfree.co/episodes/ep92-dependency-injection-made-modular</guid><description>Now that we've baked the "environment" of dependencies directly into the Composable Architecture, we're ready to refactor our app's frameworks and tests to work with them in a modular and more lightweight way.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Now that we've baked the "environment" of dependencies directly into the Composable Architecture, we're ready to refactor our app's frameworks and tests to work with them in a modular and more lightweight way.</itunes:subtitle><itunes:summary>Now that we've baked the "environment" of dependencies directly into the Composable Architecture, we're ready to refactor our app's frameworks and tests to work with them in a modular and more lightweight way.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:34:23</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0092.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>92</itunes:episode><itunes:title>Dependency Injection Made Modular</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0092-720p-c518f041b54345d798948502175613fc.mp4" length="347296864" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0092-720p-c518f041b54345d798948502175613fc.mp4" length="347296864" type="video/mp4" medium="video"><media:title>Dependency Injection Made Modular</media:title></media:content></item><item><title>Dependency Injection Made Composable</title><pubDate>Mon, 17 Feb 2020 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep91-dependency-injection-made-composable</link><guid>https://www.pointfree.co/episodes/ep91-dependency-injection-made-composable</guid><description>While we love the "environment" approach to dependency injection, which we introduced many episodes ago, it doesn't feel quite right in the Composable Architecture and introduces a few problems in how we manage dependencies. Today we'll make a small tweak to the architecture in order to solve them!</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>While we love the "environment" approach to dependency injection, which we introduced many episodes ago, it doesn't feel quite right in the Composable Architecture and introduces a few problems in how we manage dependencies. Today we'll make a small tweak to the architecture in order to solve them!</itunes:subtitle><itunes:summary>While we love the "environment" approach to dependency injection, which we introduced many episodes ago, it doesn't feel quite right in the Composable Architecture and introduces a few problems in how we manage dependencies. Today we'll make a small tweak to the architecture in order to solve them!</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:32:48</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0091.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>91</itunes:episode><itunes:title>Dependency Injection Made Composable</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0091-720p-b892b611e7ef4b1ba2f222588c52ea15.mp4" length="368848319" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0091-720p-b892b611e7ef4b1ba2f222588c52ea15.mp4" length="368848319" type="video/mp4" medium="video"><media:title>Dependency Injection Made Composable</media:title></media:content></item><item><title>Composing Architecture with Case Paths</title><pubDate>Mon, 10 Feb 2020 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep90-composing-architecture-with-case-paths</link><guid>https://www.pointfree.co/episodes/ep90-composing-architecture-with-case-paths</guid><description>Let's explore a real world application of "case paths," which provide key path-like functionality to enum cases. We'll upgrade our composable architecture to use them and see why they're a better fit than our existing approach.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let's explore a real world application of "case paths," which provide key path-like functionality to enum cases. We'll upgrade our composable architecture to use them and see why they're a better fit than our existing approach.</itunes:subtitle><itunes:summary>Let's explore a real world application of "case paths," which provide key path-like functionality to enum cases. We'll upgrade our composable architecture to use them and see why they're a better fit than our existing approach.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:22:24</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0090.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>90</itunes:episode><itunes:title>Composing Architecture with Case Paths</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0090-720p-675ad9606c0c4e0cb28f806163582dc1.mp4" length="277222911" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0090-720p-675ad9606c0c4e0cb28f806163582dc1.mp4" length="277222911" type="video/mp4" medium="video"><media:title>Composing Architecture with Case Paths</media:title></media:content></item><item><title>Case Paths for Free</title><pubDate>Mon, 03 Feb 2020 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep89-case-paths-for-free</link><guid>https://www.pointfree.co/episodes/ep89-case-paths-for-free</guid><description>Although case paths are powerful and a natural extension of key paths, they are difficult to work with right now. They require either hand-written boilerplate, or code generation. However, there's another way to generate case paths for free, and it will make them just as ergonomic to use as key paths.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Although case paths are powerful and a natural extension of key paths, they are difficult to work with right now. They require either hand-written boilerplate, or code generation. However, there's another way to generate case paths for free, and it will make them just as ergonomic to use as key paths.</itunes:subtitle><itunes:summary>Although case paths are powerful and a natural extension of key paths, they are difficult to work with right now. They require either hand-written boilerplate, or code generation. However, there's another way to generate case paths for free, and it will make them just as ergonomic to use as key paths.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:35:07</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0089.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>89</itunes:episode><itunes:title>Case Paths for Free</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0089-720p-9b280a7b36ef46879b7debaca059e0b4.mp4" length="391551134" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0089-720p-9b280a7b36ef46879b7debaca059e0b4.mp4" length="391551134" type="video/mp4" medium="video"><media:title>Case Paths for Free</media:title></media:content></item><item><title>The Case for Case Paths: Properties</title><pubDate>Mon, 27 Jan 2020 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep88-the-case-for-case-paths-properties</link><guid>https://www.pointfree.co/episodes/ep88-the-case-for-case-paths-properties</guid><description>We've now seen that it's possible to define "case paths": the enum equivalent of key paths. So what are their features? Let's explore a few properties of key paths to see if there are corresponding concepts on case paths.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We've now seen that it's possible to define "case paths": the enum equivalent of key paths. So what are their features? Let's explore a few properties of key paths to see if there are corresponding concepts on case paths.</itunes:subtitle><itunes:summary>We've now seen that it's possible to define "case paths": the enum equivalent of key paths. So what are their features? Let's explore a few properties of key paths to see if there are corresponding concepts on case paths.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:24:55</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0088.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>88</itunes:episode><itunes:title>The Case for Case Paths: Properties</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0088-720p-6b19c82a054143e0a40b6c5434273826.mp4" length="235571586" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0088-720p-6b19c82a054143e0a40b6c5434273826.mp4" length="235571586" type="video/mp4" medium="video"><media:title>The Case for Case Paths: Properties</media:title></media:content></item><item><title>The Case for Case Paths: Introduction</title><pubDate>Mon, 20 Jan 2020 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep87-the-case-for-case-paths-introduction</link><guid>https://www.pointfree.co/episodes/ep87-the-case-for-case-paths-introduction</guid><description>You've heard of key paths, but…case paths!? Today we introduce the concept of "case paths," a tool that helps you generically pick apart an enum just like key paths allow you to do for structs. It's the tool you never knew you needed.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>You've heard of key paths, but…case paths!? Today we introduce the concept of "case paths," a tool that helps you generically pick apart an enum just like key paths allow you to do for structs. It's the tool you never knew you needed.</itunes:subtitle><itunes:summary>You've heard of key paths, but…case paths!? Today we introduce the concept of "case paths," a tool that helps you generically pick apart an enum just like key paths allow you to do for structs. It's the tool you never knew you needed.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:28:58</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0087.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>87</itunes:episode><itunes:title>The Case for Case Paths: Introduction</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0087-720p-62bafd58f77648b28898d5a174cb24eb.mp4" length="143646738" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0087-720p-62bafd58f77648b28898d5a174cb24eb.mp4" length="143646738" type="video/mp4" medium="video"><media:title>The Case for Case Paths: Introduction</media:title></media:content></item><item><title>SwiftUI Snapshot Testing</title><pubDate>Mon, 23 Dec 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep86-swiftui-snapshot-testing</link><guid>https://www.pointfree.co/episodes/ep86-swiftui-snapshot-testing</guid><description>In this week's free holiday episode we show what it looks like to snapshot test a SwiftUI application in our architecture and compare this style of integration testing against XCTest's UI testing tools.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>In this week's free holiday episode we show what it looks like to snapshot test a SwiftUI application in our architecture and compare this style of integration testing against XCTest's UI testing tools.</itunes:subtitle><itunes:summary>In this week's free holiday episode we show what it looks like to snapshot test a SwiftUI application in our architecture and compare this style of integration testing against XCTest's UI testing tools.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:34:13</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0086.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>86</itunes:episode><itunes:title>SwiftUI Snapshot Testing</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0086-720p-a468c30cc8864285b508e66903b315fa.mp4" length="367021495" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0086-720p-a468c30cc8864285b508e66903b315fa.mp4" length="367021495" type="video/mp4" medium="video"><media:title>SwiftUI Snapshot Testing</media:title></media:content></item><item><title>Testable State Management: The Point</title><pubDate>Mon, 16 Dec 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep85-testable-state-management-the-point</link><guid>https://www.pointfree.co/episodes/ep85-testable-state-management-the-point</guid><description>We've made testing in our architecture a joy! We can test deep aspects of our application with minimal ceremony, but it took us a whole 18 episodes to get here! So this week we ask: what's the point!? Can we write these kinds of tests in vanilla SwiftUI?</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We've made testing in our architecture a joy! We can test deep aspects of our application with minimal ceremony, but it took us a whole 18 episodes to get here! So this week we ask: what's the point!? Can we write these kinds of tests in vanilla SwiftUI?</itunes:subtitle><itunes:summary>We've made testing in our architecture a joy! We can test deep aspects of our application with minimal ceremony, but it took us a whole 18 episodes to get here! So this week we ask: what's the point!? Can we write these kinds of tests in vanilla SwiftUI?</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:33:35</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0085.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>85</itunes:episode><itunes:title>Testable State Management: The Point</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0085-720p-c5239c62083b4cdfbdaac1120606fb35.mp4" length="325896989" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0085-720p-c5239c62083b4cdfbdaac1120606fb35.mp4" length="325896989" type="video/mp4" medium="video"><media:title>Testable State Management: The Point</media:title></media:content></item><item><title>Testable State Management: Ergonomics</title><pubDate>Mon, 09 Dec 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep84-testable-state-management-ergonomics</link><guid>https://www.pointfree.co/episodes/ep84-testable-state-management-ergonomics</guid><description>We not only want our architecture to be testable, but we want it to be super easy to write tests, and perhaps even a joy to write tests! Right now there is a bit of ceremony involved in writing tests, so we will show how to hide away those details behind a nice, ergonomic API.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We not only want our architecture to be testable, but we want it to be super easy to write tests, and perhaps even a joy to write tests! Right now there is a bit of ceremony involved in writing tests, so we will show how to hide away those details behind a nice, ergonomic API.</itunes:subtitle><itunes:summary>We not only want our architecture to be testable, but we want it to be super easy to write tests, and perhaps even a joy to write tests! Right now there is a bit of ceremony involved in writing tests, so we will show how to hide away those details behind a nice, ergonomic API.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:42:35</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0084.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>84</itunes:episode><itunes:title>Testable State Management: Ergonomics</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0084-720p-9d5058f0e079452d9dea5219e75def49.mp4" length="450480308" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0084-720p-9d5058f0e079452d9dea5219e75def49.mp4" length="450480308" type="video/mp4" medium="video"><media:title>Testable State Management: Ergonomics</media:title></media:content></item><item><title>Testable State Management: Effects</title><pubDate>Mon, 02 Dec 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep83-testable-state-management-effects</link><guid>https://www.pointfree.co/episodes/ep83-testable-state-management-effects</guid><description>Side effects are by far the hardest thing to test in an application. They speak to the outside world and they tend to be sprinkled around to get the job done. However, we can get broad test coverage of our reducer's effects with very little work, and it will all be thanks to a simple technique we covered in the past.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Side effects are by far the hardest thing to test in an application. They speak to the outside world and they tend to be sprinkled around to get the job done. However, we can get broad test coverage of our reducer's effects with very little work, and it will all be thanks to a simple technique we covered in the past.</itunes:subtitle><itunes:summary>Side effects are by far the hardest thing to test in an application. They speak to the outside world and they tend to be sprinkled around to get the job done. However, we can get broad test coverage of our reducer's effects with very little work, and it will all be thanks to a simple technique we covered in the past.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:50:15</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0083.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>83</itunes:episode><itunes:title>Testable State Management: Effects</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0083-720p-91446f0c51804f6cbd6b7b6e2224e8ae.mp4" length="466047130" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0083-720p-91446f0c51804f6cbd6b7b6e2224e8ae.mp4" length="466047130" type="video/mp4" medium="video"><media:title>Testable State Management: Effects</media:title></media:content></item><item><title>Testable State Management: Reducers</title><pubDate>Mon, 25 Nov 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep82-testable-state-management-reducers</link><guid>https://www.pointfree.co/episodes/ep82-testable-state-management-reducers</guid><description>It's time to see how our architecture handles the fifth and final problem we identified as being important to solve when building a moderately complex application: testing! Let's get our feet wet and write some tests for all of the reducers powering our application.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>It's time to see how our architecture handles the fifth and final problem we identified as being important to solve when building a moderately complex application: testing! Let's get our feet wet and write some tests for all of the reducers powering our application.</itunes:subtitle><itunes:summary>It's time to see how our architecture handles the fifth and final problem we identified as being important to solve when building a moderately complex application: testing! Let's get our feet wet and write some tests for all of the reducers powering our application.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:35:56</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0082.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>82</itunes:episode><itunes:title>Testable State Management: Reducers</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0082-720p-6024b6cdbe774df3ac7b8c3b17042499.mp4" length="434966816" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0082-720p-6024b6cdbe774df3ac7b8c3b17042499.mp4" length="434966816" type="video/mp4" medium="video"><media:title>Testable State Management: Reducers</media:title></media:content></item><item><title>The Combine Framework and Effects: Part 2</title><pubDate>Mon, 18 Nov 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep81-the-combine-framework-and-effects-part-2</link><guid>https://www.pointfree.co/episodes/ep81-the-combine-framework-and-effects-part-2</guid><description>Now that we've explored the Combine framework and identified its correspondence with the `Effect` type, let's refactor our architecture to take full advantage of it.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Now that we've explored the Combine framework and identified its correspondence with the `Effect` type, let's refactor our architecture to take full advantage of it.</itunes:subtitle><itunes:summary>Now that we've explored the Combine framework and identified its correspondence with the `Effect` type, let's refactor our architecture to take full advantage of it.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:38:46</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0081.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>81</itunes:episode><itunes:title>The Combine Framework and Effects: Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0081-720p-0860db0f98b44d029f1dba499e054014.mp4" length="405330619" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0081-720p-0860db0f98b44d029f1dba499e054014.mp4" length="405330619" type="video/mp4" medium="video"><media:title>The Combine Framework and Effects: Part 2</media:title></media:content></item><item><title>The Combine Framework and Effects: Part 1</title><pubDate>Mon, 11 Nov 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep80-the-combine-framework-and-effects-part-1</link><guid>https://www.pointfree.co/episodes/ep80-the-combine-framework-and-effects-part-1</guid><description>Let's explore the Combine framework and its correspondence with the Effect type. Combine introduces several concepts that overlap with how we model effects in our composable architecture. Let's get an understanding of how they work together and compare them to our humble Effect type.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let's explore the Combine framework and its correspondence with the Effect type. Combine introduces several concepts that overlap with how we model effects in our composable architecture. Let's get an understanding of how they work together and compare them to our humble Effect type.</itunes:subtitle><itunes:summary>Let's explore the Combine framework and its correspondence with the Effect type. Combine introduces several concepts that overlap with how we model effects in our composable architecture. Let's get an understanding of how they work together and compare them to our humble Effect type.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:25:10</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0080.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>80</itunes:episode><itunes:title>The Combine Framework and Effects: Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0080-720p-c9f731bd943c49dc9c22bba9a3c41039.mp4" length="269920178" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0080-720p-c9f731bd943c49dc9c22bba9a3c41039.mp4" length="269920178" type="video/mp4" medium="video"><media:title>The Combine Framework and Effects: Part 1</media:title></media:content></item><item><title>Effectful State Management: The Point</title><pubDate>Mon, 04 Nov 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep79-effectful-state-management-the-point</link><guid>https://www.pointfree.co/episodes/ep79-effectful-state-management-the-point</guid><description>We've got the basic story of side effects in our architecture, but the story is far from over. Turns out that even side effects themselves are composable. Base effect functionality can be extracted and shared, and complex effects can be broken down into simpler pieces.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We've got the basic story of side effects in our architecture, but the story is far from over. Turns out that even side effects themselves are composable. Base effect functionality can be extracted and shared, and complex effects can be broken down into simpler pieces.</itunes:subtitle><itunes:summary>We've got the basic story of side effects in our architecture, but the story is far from over. Turns out that even side effects themselves are composable. Base effect functionality can be extracted and shared, and complex effects can be broken down into simpler pieces.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:28:36</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0079.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>79</itunes:episode><itunes:title>Effectful State Management: The Point</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0079-720p-c0397faeadea4f47b82e340193456fd5.mp4" length="378018947" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0079-720p-c0397faeadea4f47b82e340193456fd5.mp4" length="378018947" type="video/mp4" medium="video"><media:title>Effectful State Management: The Point</media:title></media:content></item><item><title>Effectful State Management: Asynchronous Effects</title><pubDate>Mon, 28 Oct 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep78-effectful-state-management-asynchronous-effects</link><guid>https://www.pointfree.co/episodes/ep78-effectful-state-management-asynchronous-effects</guid><description>It's time to finish our architecture's story for side effects. We've described synchronous effects and unidirectional effects, but we still haven't captured the complexity of async effects. Let's fix that with a final, functional refactor.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>It's time to finish our architecture's story for side effects. We've described synchronous effects and unidirectional effects, but we still haven't captured the complexity of async effects. Let's fix that with a final, functional refactor.</itunes:subtitle><itunes:summary>It's time to finish our architecture's story for side effects. We've described synchronous effects and unidirectional effects, but we still haven't captured the complexity of async effects. Let's fix that with a final, functional refactor.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:35:48</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0078.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>78</itunes:episode><itunes:title>Effectful State Management: Asynchronous Effects</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0078-720p-8a6ff24ef0c648e0bf378757a23baebc.mp4" length="285316509" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0078-720p-8a6ff24ef0c648e0bf378757a23baebc.mp4" length="285316509" type="video/mp4" medium="video"><media:title>Effectful State Management: Asynchronous Effects</media:title></media:content></item><item><title>Effectful State Management: Unidirectional Effects</title><pubDate>Mon, 21 Oct 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep77-effectful-state-management-unidirectional-effects</link><guid>https://www.pointfree.co/episodes/ep77-effectful-state-management-unidirectional-effects</guid><description>We've modeled side effects in our architecture, but it's not quite right yet: a reducer can write to the outside world, but it can't read data back in! This week our architecture's dedication to unidirectional data flow will lead us there.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We've modeled side effects in our architecture, but it's not quite right yet: a reducer can write to the outside world, but it can't read data back in! This week our architecture's dedication to unidirectional data flow will lead us there.</itunes:subtitle><itunes:summary>We've modeled side effects in our architecture, but it's not quite right yet: a reducer can write to the outside world, but it can't read data back in! This week our architecture's dedication to unidirectional data flow will lead us there.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:25:24</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0077.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>77</itunes:episode><itunes:title>Effectful State Management: Unidirectional Effects</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0077-720p-bc49a654c54a4b70b7aee8893072ce10.mp4" length="304413663" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0077-720p-bc49a654c54a4b70b7aee8893072ce10.mp4" length="304413663" type="video/mp4" medium="video"><media:title>Effectful State Management: Unidirectional Effects</media:title></media:content></item><item><title>Effectful State Management: Synchronous Effects</title><pubDate>Mon, 14 Oct 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep76-effectful-state-management-synchronous-effects</link><guid>https://www.pointfree.co/episodes/ep76-effectful-state-management-synchronous-effects</guid><description>Side effects are one of the biggest sources of complexity in any application. It's time to figure out how to model effects in our architecture. We begin by adding a few new side effects, and then showing how synchronous effects can be handled by altering the signature of our reducers.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Side effects are one of the biggest sources of complexity in any application. It's time to figure out how to model effects in our architecture. We begin by adding a few new side effects, and then showing how synchronous effects can be handled by altering the signature of our reducers.</itunes:subtitle><itunes:summary>Side effects are one of the biggest sources of complexity in any application. It's time to figure out how to model effects in our architecture. We begin by adding a few new side effects, and then showing how synchronous effects can be handled by altering the signature of our reducers.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:25:24</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0076.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>76</itunes:episode><itunes:title>Effectful State Management: Synchronous Effects</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0076-720p-64583fece156415895fef6d621253281.mp4" length="299359877" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0076-720p-64583fece156415895fef6d621253281.mp4" length="299359877" type="video/mp4" medium="video"><media:title>Effectful State Management: Synchronous Effects</media:title></media:content></item><item><title>Modular State Management: The Point</title><pubDate>Mon, 07 Oct 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep75-modular-state-management-the-point</link><guid>https://www.pointfree.co/episodes/ep75-modular-state-management-the-point</guid><description>We’ve now fully modularized our app by extracting its reducers and views into their own modules. Each screen of our app can be run as a little app on its own so that we can test its functionality, all without needing to know how it's plugged into the app as a whole. And _this_ is the point of modular state management!</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We’ve now fully modularized our app by extracting its reducers and views into their own modules. Each screen of our app can be run as a little app on its own so that we can test its functionality, all without needing to know how it's plugged into the app as a whole. And _this_ is the point of modular state management!</itunes:subtitle><itunes:summary>We’ve now fully modularized our app by extracting its reducers and views into their own modules. Each screen of our app can be run as a little app on its own so that we can test its functionality, all without needing to know how it's plugged into the app as a whole. And _this_ is the point of modular state management!</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:19:59</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0075.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>75</itunes:episode><itunes:title>Modular State Management: The Point</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0075-720p-857c188b87b84f789c04f9124380ea3d.mp4" length="248181758" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0075-720p-857c188b87b84f789c04f9124380ea3d.mp4" length="248181758" type="video/mp4" medium="video"><media:title>Modular State Management: The Point</media:title></media:content></item><item><title>Modular State Management: View Actions</title><pubDate>Mon, 30 Sep 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep74-modular-state-management-view-actions</link><guid>https://www.pointfree.co/episodes/ep74-modular-state-management-view-actions</guid><description>It's time to fully modularize our app! Our views can still send any app action, so let's explore transforming stores to focus in on just the local actions a view cares about.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>It's time to fully modularize our app! Our views can still send any app action, so let's explore transforming stores to focus in on just the local actions a view cares about.</itunes:subtitle><itunes:summary>It's time to fully modularize our app! Our views can still send any app action, so let's explore transforming stores to focus in on just the local actions a view cares about.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:25:54</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0074.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>74</itunes:episode><itunes:title>Modular State Management: View Actions</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0074-720p-89f2e28d72c044b6bb2d0014efebd75a.mp4" length="315110301" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0074-720p-89f2e28d72c044b6bb2d0014efebd75a.mp4" length="315110301" type="video/mp4" medium="video"><media:title>Modular State Management: View Actions</media:title></media:content></item><item><title>Modular State Management: View State</title><pubDate>Mon, 23 Sep 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep73-modular-state-management-view-state</link><guid>https://www.pointfree.co/episodes/ep73-modular-state-management-view-state</guid><description>While we've seen that each reducer we've written is super modular, and we were easily able to extract each one into a separate framework, our views are still far from modular. This week we address this by considering: what does it mean to transform the state a view has access to?</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>While we've seen that each reducer we've written is super modular, and we were easily able to extract each one into a separate framework, our views are still far from modular. This week we address this by considering: what does it mean to transform the state a view has access to?</itunes:subtitle><itunes:summary>While we've seen that each reducer we've written is super modular, and we were easily able to extract each one into a separate framework, our views are still far from modular. This week we address this by considering: what does it mean to transform the state a view has access to?</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:28:16</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0073.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>73</itunes:episode><itunes:title>Modular State Management: View State</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0073-720p-a0344640e01c484192b90cc1ab93410a.mp4" length="284316926" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0073-720p-a0344640e01c484192b90cc1ab93410a.mp4" length="284316926" type="video/mp4" medium="video"><media:title>Modular State Management: View State</media:title></media:content></item><item><title>Modular State Management: Reducers</title><pubDate>Mon, 09 Sep 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep72-modular-state-management-reducers</link><guid>https://www.pointfree.co/episodes/ep72-modular-state-management-reducers</guid><description>In exploring four forms of composition on reducer functions, we made the claim that it gave us the power to fully isolate app logic, making it simpler and easier to understand. This week we put our money where our mouth is and show just how modular these reducers are!</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>In exploring four forms of composition on reducer functions, we made the claim that it gave us the power to fully isolate app logic, making it simpler and easier to understand. This week we put our money where our mouth is and show just how modular these reducers are!</itunes:subtitle><itunes:summary>In exploring four forms of composition on reducer functions, we made the claim that it gave us the power to fully isolate app logic, making it simpler and easier to understand. This week we put our money where our mouth is and show just how modular these reducers are!</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:26:24</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0072.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>72</itunes:episode><itunes:title>Modular State Management: Reducers</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0072-720p-09bbc044cfff4d2a883de6913ed98fee.mp4" length="309667760" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0072-720p-09bbc044cfff4d2a883de6913ed98fee.mp4" length="309667760" type="video/mp4" medium="video"><media:title>Modular State Management: Reducers</media:title></media:content></item><item><title>Composable State Management: Higher-Order Reducers</title><pubDate>Mon, 26 Aug 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep71-composable-state-management-higher-order-reducers</link><guid>https://www.pointfree.co/episodes/ep71-composable-state-management-higher-order-reducers</guid><description>We will explore a form of reducer composition that will take our applications to the _next level_. Higher-order reducers will allow us to implement broad, cross-cutting functionality on top of our applications with very little work, and without littering our application code with unnecessary logic. And, we'll finally answer "what's the point?!"</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We will explore a form of reducer composition that will take our applications to the _next level_. Higher-order reducers will allow us to implement broad, cross-cutting functionality on top of our applications with very little work, and without littering our application code with unnecessary logic. And, we'll finally answer "what's the point?!"</itunes:subtitle><itunes:summary>We will explore a form of reducer composition that will take our applications to the _next level_. Higher-order reducers will allow us to implement broad, cross-cutting functionality on top of our applications with very little work, and without littering our application code with unnecessary logic. And, we'll finally answer "what's the point?!"</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:32:38</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0071.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>71</itunes:episode><itunes:title>Composable State Management: Higher-Order Reducers</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0071-720p-68c22007d03d49a9a8e6f22580348237.mp4" length="485115213" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0071-720p-68c22007d03d49a9a8e6f22580348237.mp4" length="485115213" type="video/mp4" medium="video"><media:title>Composable State Management: Higher-Order Reducers</media:title></media:content></item><item><title>Composable State Management: Action Pullbacks</title><pubDate>Mon, 19 Aug 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep70-composable-state-management-action-pullbacks</link><guid>https://www.pointfree.co/episodes/ep70-composable-state-management-action-pullbacks</guid><description>Turns out, reducers that work on local actions can be _pulled back_ to work on global actions. However, due to an imbalance in how Swift treats enums versus structs it takes a little work to implement. But never fear, a little help from our old friends "enum properties" will carry us a long way.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Turns out, reducers that work on local actions can be _pulled back_ to work on global actions. However, due to an imbalance in how Swift treats enums versus structs it takes a little work to implement. But never fear, a little help from our old friends "enum properties" will carry us a long way.</itunes:subtitle><itunes:summary>Turns out, reducers that work on local actions can be _pulled back_ to work on global actions. However, due to an imbalance in how Swift treats enums versus structs it takes a little work to implement. But never fear, a little help from our old friends "enum properties" will carry us a long way.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:28:16</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0070.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>70</itunes:episode><itunes:title>Composable State Management: Action Pullbacks</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0070-720p-bec49df122d14bc896e783a257caee0d.mp4" length="291792887" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0070-720p-bec49df122d14bc896e783a257caee0d.mp4" length="291792887" type="video/mp4" medium="video"><media:title>Composable State Management: Action Pullbacks</media:title></media:content></item><item><title>Composable State Management: State Pullbacks</title><pubDate>Mon, 12 Aug 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep69-composable-state-management-state-pullbacks</link><guid>https://www.pointfree.co/episodes/ep69-composable-state-management-state-pullbacks</guid><description>So far we have pulled a lot of our application's logic into a reducer, but that reducer is starting to get big. Turns out that reducers emit many types of powerful compositions, and this week we explore two of them: combines and pullbacks.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>So far we have pulled a lot of our application's logic into a reducer, but that reducer is starting to get big. Turns out that reducers emit many types of powerful compositions, and this week we explore two of them: combines and pullbacks.</itunes:subtitle><itunes:summary>So far we have pulled a lot of our application's logic into a reducer, but that reducer is starting to get big. Turns out that reducers emit many types of powerful compositions, and this week we explore two of them: combines and pullbacks.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:25:42</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0069.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>69</itunes:episode><itunes:title>Composable State Management: State Pullbacks</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0069-720p-45854f555b904bdcabadce09b7f6f8d4.mp4" length="293506794" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0069-720p-45854f555b904bdcabadce09b7f6f8d4.mp4" length="293506794" type="video/mp4" medium="video"><media:title>Composable State Management: State Pullbacks</media:title></media:content></item><item><title>Composable State Management: Reducers</title><pubDate>Mon, 05 Aug 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep68-composable-state-management-reducers</link><guid>https://www.pointfree.co/episodes/ep68-composable-state-management-reducers</guid><description>Now that we understand some of the fundamental problems that we will encounter when building a complex application, let's start solving some of them! We will begin by demonstrating a technique for describing the state and actions in your application, as well as a consistent way to apply mutations to your application's state.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Now that we understand some of the fundamental problems that we will encounter when building a complex application, let's start solving some of them! We will begin by demonstrating a technique for describing the state and actions in your application, as well as a consistent way to apply mutations to your application's state.</itunes:subtitle><itunes:summary>Now that we understand some of the fundamental problems that we will encounter when building a complex application, let's start solving some of them! We will begin by demonstrating a technique for describing the state and actions in your application, as well as a consistent way to apply mutations to your application's state.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:41:42</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0068.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>68</itunes:episode><itunes:title>Composable State Management: Reducers</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0068-720p-8f7674d6dee448ae9881c05a897154d4.mp4" length="491572447" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0068-720p-8f7674d6dee448ae9881c05a897154d4.mp4" length="491572447" type="video/mp4" medium="video"><media:title>Composable State Management: Reducers</media:title></media:content></item><item><title>SwiftUI and State Management: Part 3</title><pubDate>Mon, 29 Jul 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep67-swiftui-and-state-management-part-3</link><guid>https://www.pointfree.co/episodes/ep67-swiftui-and-state-management-part-3</guid><description>With our moderately complex SwiftUI application complete we can finally ask ourselves: "what's the point!?" What does SwiftUI have to say about app architecture? What questions are left unanswered? What can we do about it?</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>With our moderately complex SwiftUI application complete we can finally ask ourselves: "what's the point!?" What does SwiftUI have to say about app architecture? What questions are left unanswered? What can we do about it?</itunes:subtitle><itunes:summary>With our moderately complex SwiftUI application complete we can finally ask ourselves: "what's the point!?" What does SwiftUI have to say about app architecture? What questions are left unanswered? What can we do about it?</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:27:02</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0067.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>67</itunes:episode><itunes:title>SwiftUI and State Management: Part 3</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0067-720p-2623de28215c47f5937c700b958198e1.mp4" length="353885387" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0067-720p-2623de28215c47f5937c700b958198e1.mp4" length="353885387" type="video/mp4" medium="video"><media:title>SwiftUI and State Management: Part 3</media:title></media:content></item><item><title>SwiftUI and State Management: Part 2</title><pubDate>Mon, 22 Jul 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep66-swiftui-and-state-management-part-2</link><guid>https://www.pointfree.co/episodes/ep66-swiftui-and-state-management-part-2</guid><description>This week we finish up our moderately complex SwiftUI application by adding more screens, more state, and even sprinkle in a side effect so that we can finally ask: "what's the point!?"</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>This week we finish up our moderately complex SwiftUI application by adding more screens, more state, and even sprinkle in a side effect so that we can finally ask: "what's the point!?"</itunes:subtitle><itunes:summary>This week we finish up our moderately complex SwiftUI application by adding more screens, more state, and even sprinkle in a side effect so that we can finally ask: "what's the point!?"</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:24:26</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0066.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>66</itunes:episode><itunes:title>SwiftUI and State Management: Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0066-720p-513e7d37e7464d3d9c9ac20e2bee2198.mp4" length="199193552" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0066-720p-513e7d37e7464d3d9c9ac20e2bee2198.mp4" length="199193552" type="video/mp4" medium="video"><media:title>SwiftUI and State Management: Part 2</media:title></media:content></item><item><title>SwiftUI and State Management: Part 1</title><pubDate>Mon, 15 Jul 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep65-swiftui-and-state-management-part-1</link><guid>https://www.pointfree.co/episodes/ep65-swiftui-and-state-management-part-1</guid><description>Let's begin exploring application architecture by understanding what are the common problems we encounter when trying to build large, complex applications. We will build an app in SwiftUI to see how Apple's new framework approaches solving these problems.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let's begin exploring application architecture by understanding what are the common problems we encounter when trying to build large, complex applications. We will build an app in SwiftUI to see how Apple's new framework approaches solving these problems.</itunes:subtitle><itunes:summary>Let's begin exploring application architecture by understanding what are the common problems we encounter when trying to build large, complex applications. We will build an app in SwiftUI to see how Apple's new framework approaches solving these problems.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:26:45</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0065.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>65</itunes:episode><itunes:title>SwiftUI and State Management: Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0065-720p-1d677009feda4c14ab162d9feb9ec00d.mp4" length="241590052" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0065-720p-1d677009feda4c14ab162d9feb9ec00d.mp4" length="241590052" type="video/mp4" medium="video"><media:title>SwiftUI and State Management: Part 1</media:title></media:content></item><item><title>Parser Combinators: Part 3</title><pubDate>Mon, 08 Jul 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep64-parser-combinators-part-3</link><guid>https://www.pointfree.co/episodes/ep64-parser-combinators-part-3</guid><description>Now that we've looked at how to parse multiple values given a single parser, let's try to parse a single value using multiple parsers! And after defining a bunch of these parser combinators we'll finally be able to ask: "what's the point!?"</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Now that we've looked at how to parse multiple values given a single parser, let's try to parse a single value using multiple parsers! And after defining a bunch of these parser combinators we'll finally be able to ask: "what's the point!?"</itunes:subtitle><itunes:summary>Now that we've looked at how to parse multiple values given a single parser, let's try to parse a single value using multiple parsers! And after defining a bunch of these parser combinators we'll finally be able to ask: "what's the point!?"</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:19:47</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0064.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>64</itunes:episode><itunes:title>Parser Combinators: Part 3</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0064-720p-824e7992db434872a87ed0709ffbca33.mp4" length="177536444" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0064-720p-824e7992db434872a87ed0709ffbca33.mp4" length="177536444" type="video/mp4" medium="video"><media:title>Parser Combinators: Part 3</media:title></media:content></item><item><title>Parser Combinators: Part 2</title><pubDate>Mon, 01 Jul 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep63-parser-combinators-part-2</link><guid>https://www.pointfree.co/episodes/ep63-parser-combinators-part-2</guid><description>Let's solve another common parsing problem using parser combinators! It's common to want to parse multiple values off a string, and while `zip` gets us part of the way there, it doesn't let us parse _any_ number of values! Luckily there's a parser combinator that can help, and it really packs a punch.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let's solve another common parsing problem using parser combinators! It's common to want to parse multiple values off a string, and while `zip` gets us part of the way there, it doesn't let us parse _any_ number of values! Luckily there's a parser combinator that can help, and it really packs a punch.</itunes:subtitle><itunes:summary>Let's solve another common parsing problem using parser combinators! It's common to want to parse multiple values off a string, and while `zip` gets us part of the way there, it doesn't let us parse _any_ number of values! Luckily there's a parser combinator that can help, and it really packs a punch.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:17:59</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0063.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>63</itunes:episode><itunes:title>Parser Combinators: Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0063-720p-ce92420c9c7c49eb8b64bd9013fca036.mp4" length="135951386" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0063-720p-ce92420c9c7c49eb8b64bd9013fca036.mp4" length="135951386" type="video/mp4" medium="video"><media:title>Parser Combinators: Part 2</media:title></media:content></item><item><title>Parser Combinators: Part 1</title><pubDate>Mon, 24 Jun 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep62-parser-combinators-part-1</link><guid>https://www.pointfree.co/episodes/ep62-parser-combinators-part-1</guid><description>Even though `map`, `flatMap` and `zip` pack a punch, there are still many parsing operations that can't be done using them alone. This is where "parser combinators" come into play. Let's look at a few common parsing problems and solve them using parser combinators!</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Even though `map`, `flatMap` and `zip` pack a punch, there are still many parsing operations that can't be done using them alone. This is where "parser combinators" come into play. Let's look at a few common parsing problems and solve them using parser combinators!</itunes:subtitle><itunes:summary>Even though `map`, `flatMap` and `zip` pack a punch, there are still many parsing operations that can't be done using them alone. This is where "parser combinators" come into play. Let's look at a few common parsing problems and solve them using parser combinators!</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:19:14</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0062.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>62</itunes:episode><itunes:title>Parser Combinators: Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0062-720p-aae5d64834c14960bdb3137a55e2db6e.mp4" length="213878806" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0062-720p-aae5d64834c14960bdb3137a55e2db6e.mp4" length="213878806" type="video/mp4" medium="video"><media:title>Parser Combinators: Part 1</media:title></media:content></item><item><title>Composable Parsing: Zip</title><pubDate>Mon, 10 Jun 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep61-composable-parsing-zip</link><guid>https://www.pointfree.co/episodes/ep61-composable-parsing-zip</guid><description>While `flatMap` allowed us to take our parser type to the next level, it introduced a nesting problem. Isn't `flatMap` all about solving nesting problems!? Well, we have one more operation at our disposal: `zip`! Let's define `zip` on the parser type, see what it brings to the table, and finally ask, "what's the point?"</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>While `flatMap` allowed us to take our parser type to the next level, it introduced a nesting problem. Isn't `flatMap` all about solving nesting problems!? Well, we have one more operation at our disposal: `zip`! Let's define `zip` on the parser type, see what it brings to the table, and finally ask, "what's the point?"</itunes:subtitle><itunes:summary>While `flatMap` allowed us to take our parser type to the next level, it introduced a nesting problem. Isn't `flatMap` all about solving nesting problems!? Well, we have one more operation at our disposal: `zip`! Let's define `zip` on the parser type, see what it brings to the table, and finally ask, "what's the point?"</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:27:22</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0061.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>61</itunes:episode><itunes:title>Composable Parsing: Zip</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0061-720p-3c0637c8081946f8b1ec39e902ef4dc7.mp4" length="353885387" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0061-720p-3c0637c8081946f8b1ec39e902ef4dc7.mp4" length="353885387" type="video/mp4" medium="video"><media:title>Composable Parsing: Zip</media:title></media:content></item><item><title>Composable Parsing: Flat‑Map</title><pubDate>Mon, 03 Jun 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep60-composable-parsing-flat-map</link><guid>https://www.pointfree.co/episodes/ep60-composable-parsing-flat-map</guid><description>The `map` function on parsers is powerful, but there are still a lot of things it cannot do. We will see that in trying to solve some of its limitations we are naturally led to our old friend the `flatMap` function.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>The `map` function on parsers is powerful, but there are still a lot of things it cannot do. We will see that in trying to solve some of its limitations we are naturally led to our old friend the `flatMap` function.</itunes:subtitle><itunes:summary>The `map` function on parsers is powerful, but there are still a lot of things it cannot do. We will see that in trying to solve some of its limitations we are naturally led to our old friend the `flatMap` function.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:14:00</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0060.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>60</itunes:episode><itunes:title>Composable Parsing: Flat‑Map</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0060-720p-e9bf009f7c084aa89d5c54ca37e6d293.mp4" length="189293147" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0060-720p-e9bf009f7c084aa89d5c54ca37e6d293.mp4" length="189293147" type="video/mp4" medium="video"><media:title>Composable Parsing: Flat‑Map</media:title></media:content></item><item><title>Composable Parsing: Map</title><pubDate>Mon, 27 May 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep59-composable-parsing-map</link><guid>https://www.pointfree.co/episodes/ep59-composable-parsing-map</guid><description>We now have a precise, efficient definition for parsing, but we haven't even scratched the surface of its relation to functional programming. In this episode we begin to show how all of the functional operators we know and love come into play, starting with map.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We now have a precise, efficient definition for parsing, but we haven't even scratched the surface of its relation to functional programming. In this episode we begin to show how all of the functional operators we know and love come into play, starting with map.</itunes:subtitle><itunes:summary>We now have a precise, efficient definition for parsing, but we haven't even scratched the surface of its relation to functional programming. In this episode we begin to show how all of the functional operators we know and love come into play, starting with map.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:23:12</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0059.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>59</itunes:episode><itunes:title>Composable Parsing: Map</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0059-720p-d11a40b0a33f4e2c8ad07cde7cc52be4.mp4" length="265826665" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0059-720p-d11a40b0a33f4e2c8ad07cde7cc52be4.mp4" length="265826665" type="video/mp4" medium="video"><media:title>Composable Parsing: Map</media:title></media:content></item><item><title>What Is a Parser?: Part 3</title><pubDate>Mon, 20 May 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep58-what-is-a-parser-part-3</link><guid>https://www.pointfree.co/episodes/ep58-what-is-a-parser-part-3</guid><description>It's time to ask the all important question: what's the point? We now have a properly defined parser type, one that can parse efficiently and incrementally, but does it give us anything new over existing tools?</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>It's time to ask the all important question: what's the point? We now have a properly defined parser type, one that can parse efficiently and incrementally, but does it give us anything new over existing tools?</itunes:subtitle><itunes:summary>It's time to ask the all important question: what's the point? We now have a properly defined parser type, one that can parse efficiently and incrementally, but does it give us anything new over existing tools?</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:20:00</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0058.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>58</itunes:episode><itunes:title>What Is a Parser?: Part 3</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0058-720p-fca5a70aa64142bfb7c7fb6749864b6d.mp4" length="218182533" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0058-720p-fca5a70aa64142bfb7c7fb6749864b6d.mp4" length="218182533" type="video/mp4" medium="video"><media:title>What Is a Parser?: Part 3</media:title></media:content></item><item><title>What Is a Parser?: Part 2</title><pubDate>Mon, 13 May 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep57-what-is-a-parser-part-2</link><guid>https://www.pointfree.co/episodes/ep57-what-is-a-parser-part-2</guid><description>Now that we've looked at a bunch of parsers that are at our disposal, let's ask ourselves what a parser really is from the perspective of functional programming and functions. We'll take a multi-step journey and optimize using Swift language features.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Now that we've looked at a bunch of parsers that are at our disposal, let's ask ourselves what a parser really is from the perspective of functional programming and functions. We'll take a multi-step journey and optimize using Swift language features.</itunes:subtitle><itunes:summary>Now that we've looked at a bunch of parsers that are at our disposal, let's ask ourselves what a parser really is from the perspective of functional programming and functions. We'll take a multi-step journey and optimize using Swift language features.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:20:36</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0057.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>57</itunes:episode><itunes:title>What Is a Parser?: Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0057-720p-e1207e0febfa4a2aa4802798279f54ee.mp4" length="177140506" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0057-720p-e1207e0febfa4a2aa4802798279f54ee.mp4" length="177140506" type="video/mp4" medium="video"><media:title>What Is a Parser?: Part 2</media:title></media:content></item><item><title>What Is a Parser?: Part 1</title><pubDate>Mon, 06 May 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep56-what-is-a-parser-part-1</link><guid>https://www.pointfree.co/episodes/ep56-what-is-a-parser-part-1</guid><description>Parsing is a difficult, but surprisingly ubiquitous programming problem, and functional programming has a lot to say about it. Let's take a moment to understand the problem space of parsing, and see what tools Swift and Apple gives us to parse complex text formats.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Parsing is a difficult, but surprisingly ubiquitous programming problem, and functional programming has a lot to say about it. Let's take a moment to understand the problem space of parsing, and see what tools Swift and Apple gives us to parse complex text formats.</itunes:subtitle><itunes:summary>Parsing is a difficult, but surprisingly ubiquitous programming problem, and functional programming has a lot to say about it. Let's take a moment to understand the problem space of parsing, and see what tools Swift and Apple gives us to parse complex text formats.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:16:44</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0056.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>56</itunes:episode><itunes:title>What Is a Parser?: Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0056-720p-d626f2c46c3149dfa5ff9a0a39d436fc.mp4" length="217336351" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0056-720p-d626f2c46c3149dfa5ff9a0a39d436fc.mp4" length="217336351" type="video/mp4" medium="video"><media:title>What Is a Parser?: Part 1</media:title></media:content></item><item><title>Swift Syntax Command Line Tool</title><pubDate>Mon, 22 Apr 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep55-swift-syntax-command-line-tool</link><guid>https://www.pointfree.co/episodes/ep55-swift-syntax-command-line-tool</guid><description>Today we finally extract our enum property code generator to a Swift Package Manager library and CLI tool. We'll also do some next-level snapshot testing: not only will we snapshot-test our generated code, but we'll leverage the Swift compiler to verify that our snapshot builds.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Today we finally extract our enum property code generator to a Swift Package Manager library and CLI tool. We'll also do some next-level snapshot testing: not only will we snapshot-test our generated code, but we'll leverage the Swift compiler to verify that our snapshot builds.</itunes:subtitle><itunes:summary>Today we finally extract our enum property code generator to a Swift Package Manager library and CLI tool. We'll also do some next-level snapshot testing: not only will we snapshot-test our generated code, but we'll leverage the Swift compiler to verify that our snapshot builds.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:35:16</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0055.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>55</itunes:episode><itunes:title>Swift Syntax Command Line Tool</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0055-720p-e4926b1e3a0e449ab081865a10cb2525.mp4" length="456133747" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0055-720p-e4926b1e3a0e449ab081865a10cb2525.mp4" length="456133747" type="video/mp4" medium="video"><media:title>Swift Syntax Command Line Tool</media:title></media:content></item><item><title>Advanced Swift Syntax Enum Properties</title><pubDate>Mon, 15 Apr 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep54-advanced-swift-syntax-enum-properties</link><guid>https://www.pointfree.co/episodes/ep54-advanced-swift-syntax-enum-properties</guid><description>This week we'll put the finishing touches on our enum property code generation tool. We'll add support for enum cases with multiple associated values and enum cases with no associated values, and we'll add a feature that will make enums even more ergonomic to work with!</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>This week we'll put the finishing touches on our enum property code generation tool. We'll add support for enum cases with multiple associated values and enum cases with no associated values, and we'll add a feature that will make enums even more ergonomic to work with!</itunes:subtitle><itunes:summary>This week we'll put the finishing touches on our enum property code generation tool. We'll add support for enum cases with multiple associated values and enum cases with no associated values, and we'll add a feature that will make enums even more ergonomic to work with!</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:31:20</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0054.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>54</itunes:episode><itunes:title>Advanced Swift Syntax Enum Properties</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0054-720p-a526918899824ebda151ebc01a3042b1.mp4" length="347166357" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0054-720p-a526918899824ebda151ebc01a3042b1.mp4" length="347166357" type="video/mp4" medium="video"><media:title>Advanced Swift Syntax Enum Properties</media:title></media:content></item><item><title>Swift Syntax Enum Properties</title><pubDate>Mon, 08 Apr 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep53-swift-syntax-enum-properties</link><guid>https://www.pointfree.co/episodes/ep53-swift-syntax-enum-properties</guid><description>We've seen how "enum properties" help close the gap between the ergonomics of accessing data on structs and enums, but defining them by hand requires a _lot_ of boilerplate. This week we join forces with Apple's Swift Syntax library to generate this boilerplate automatically!</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We've seen how "enum properties" help close the gap between the ergonomics of accessing data on structs and enums, but defining them by hand requires a _lot_ of boilerplate. This week we join forces with Apple's Swift Syntax library to generate this boilerplate automatically!</itunes:subtitle><itunes:summary>We've seen how "enum properties" help close the gap between the ergonomics of accessing data on structs and enums, but defining them by hand requires a _lot_ of boilerplate. This week we join forces with Apple's Swift Syntax library to generate this boilerplate automatically!</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:23:49</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0053.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>53</itunes:episode><itunes:title>Swift Syntax Enum Properties</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0053-720p-f6fe60bd59244976b1846e98464b87fe.mp4" length="311686014" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0053-720p-f6fe60bd59244976b1846e98464b87fe.mp4" length="311686014" type="video/mp4" medium="video"><media:title>Swift Syntax Enum Properties</media:title></media:content></item><item><title>Enum Properties</title><pubDate>Mon, 01 Apr 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep52-enum-properties</link><guid>https://www.pointfree.co/episodes/ep52-enum-properties</guid><description>Swift makes it easy for us to access the data inside a struct via dot-syntax and key-paths, but enums are provided no such affordances. This week we correct that deficiency by defining the concept of "enum properties", which will give us an expressive way to dive deep into the data inside our enums.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Swift makes it easy for us to access the data inside a struct via dot-syntax and key-paths, but enums are provided no such affordances. This week we correct that deficiency by defining the concept of "enum properties", which will give us an expressive way to dive deep into the data inside our enums.</itunes:subtitle><itunes:summary>Swift makes it easy for us to access the data inside a struct via dot-syntax and key-paths, but enums are provided no such affordances. This week we correct that deficiency by defining the concept of "enum properties", which will give us an expressive way to dive deep into the data inside our enums.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:24:38</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0052.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>52</itunes:episode><itunes:title>Enum Properties</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0052-720p-8b7f4a5a3d5644e1915a81cbc639c712.mp4" length="286572956" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0052-720p-8b7f4a5a3d5644e1915a81cbc639c712.mp4" length="286572956" type="video/mp4" medium="video"><media:title>Enum Properties</media:title></media:content></item><item><title>Structs 🤝 Enums</title><pubDate>Mon, 25 Mar 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep51-structs-enums</link><guid>https://www.pointfree.co/episodes/ep51-structs-enums</guid><description>Name a more iconic duo... We'll wait. Structs and enums go together like peanut butter and jelly, or multiplication and addition. One's no more important than the other: they're completely complementary. This week we'll explore how features on one may surprisingly manifest themselves on the other.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Name a more iconic duo... We'll wait. Structs and enums go together like peanut butter and jelly, or multiplication and addition. One's no more important than the other: they're completely complementary. This week we'll explore how features on one may surprisingly manifest themselves on the other.</itunes:subtitle><itunes:summary>Name a more iconic duo... We'll wait. Structs and enums go together like peanut butter and jelly, or multiplication and addition. One's no more important than the other: they're completely complementary. This week we'll explore how features on one may surprisingly manifest themselves on the other.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:30:50</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0051.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>51</itunes:episode><itunes:title>Structs 🤝 Enums</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0051-720p-2c7c883307e448779b3da2223b72aa11.mp4" length="421877736" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0051-720p-2c7c883307e448779b3da2223b72aa11.mp4" length="421877736" type="video/mp4" medium="video"><media:title>Structs 🤝 Enums</media:title></media:content></item><item><title>Generative Art: Part 2</title><pubDate>Mon, 11 Mar 2019 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep50-generative-art-part-2</link><guid>https://www.pointfree.co/episodes/ep50-generative-art-part-2</guid><description>Let's put some finishing touches to our random artwork generator, incorporate it into an app, and write some snapshot tests to help support us in adding a fun easter egg.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let's put some finishing touches to our random artwork generator, incorporate it into an app, and write some snapshot tests to help support us in adding a fun easter egg.</itunes:subtitle><itunes:summary>Let's put some finishing touches to our random artwork generator, incorporate it into an app, and write some snapshot tests to help support us in adding a fun easter egg.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:27:22</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0050.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>50</itunes:episode><itunes:title>Generative Art: Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0050-720p-2328e10634a54c238367f0f8cef4448d.mp4" length="290467801" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0050-720p-2328e10634a54c238367f0f8cef4448d.mp4" length="290467801" type="video/mp4" medium="video"><media:title>Generative Art: Part 2</media:title></media:content></item><item><title>Generative Art: Part 1</title><pubDate>Mon, 04 Mar 2019 07:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep49-generative-art-part-1</link><guid>https://www.pointfree.co/episodes/ep49-generative-art-part-1</guid><description>Now that we have made randomness both composable _and_ testable, let's have a little fun with it! We are going to explore making some complex generative art that is built from simple, composable units.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Now that we have made randomness both composable _and_ testable, let's have a little fun with it! We are going to explore making some complex generative art that is built from simple, composable units.</itunes:subtitle><itunes:summary>Now that we have made randomness both composable _and_ testable, let's have a little fun with it! We are going to explore making some complex generative art that is built from simple, composable units.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:32:06</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0049.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>49</itunes:episode><itunes:title>Generative Art: Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0049-720p-7dbc53f2d4064ed98142c40f19e168d9.mp4" length="334663601" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0049-720p-7dbc53f2d4064ed98142c40f19e168d9.mp4" length="334663601" type="video/mp4" medium="video"><media:title>Generative Art: Part 1</media:title></media:content></item><item><title>Predictable Randomness: Part 2</title><pubDate>Mon, 25 Feb 2019 07:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep48-predictable-randomness-part-2</link><guid>https://www.pointfree.co/episodes/ep48-predictable-randomness-part-2</guid><description>This week we finally make our untestable Gen type testable. We'll compare several different ways of controlling Gen, consider how they affect Gen's API, and find ourselves face-to-face with yet another `flatMap`.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>This week we finally make our untestable Gen type testable. We'll compare several different ways of controlling Gen, consider how they affect Gen's API, and find ourselves face-to-face with yet another `flatMap`.</itunes:subtitle><itunes:summary>This week we finally make our untestable Gen type testable. We'll compare several different ways of controlling Gen, consider how they affect Gen's API, and find ourselves face-to-face with yet another `flatMap`.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:37:02</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0048.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>48</itunes:episode><itunes:title>Predictable Randomness: Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0048-720p-11684a35a3504921b7b5b8f2e70f62ea.mp4" length="451331042" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0048-720p-11684a35a3504921b7b5b8f2e70f62ea.mp4" length="451331042" type="video/mp4" medium="video"><media:title>Predictable Randomness: Part 2</media:title></media:content></item><item><title>Predictable Randomness: Part 1</title><pubDate>Mon, 18 Feb 2019 07:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep47-predictable-randomness-part-1</link><guid>https://www.pointfree.co/episodes/ep47-predictable-randomness-part-1</guid><description>Let's set out to make the untestable testable. This week we make composable randomness compatible with Swift's new APIs and explore various ways of controlling those APIs, both locally and globally.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let's set out to make the untestable testable. This week we make composable randomness compatible with Swift's new APIs and explore various ways of controlling those APIs, both locally and globally.</itunes:subtitle><itunes:summary>Let's set out to make the untestable testable. This week we make composable randomness compatible with Swift's new APIs and explore various ways of controlling those APIs, both locally and globally.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:32:05</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0047.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>47</itunes:episode><itunes:title>Predictable Randomness: Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0047-720p-bdd723b50d034504a8ee9587246b800c.mp4" length="383951557" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0047-720p-bdd723b50d034504a8ee9587246b800c.mp4" length="383951557" type="video/mp4" medium="video"><media:title>Predictable Randomness: Part 1</media:title></media:content></item><item><title>The Many Faces of Flat‑Map: Part 5</title><pubDate>Mon, 04 Feb 2019 07:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep46-the-many-faces-of-flat-map-part-5</link><guid>https://www.pointfree.co/episodes/ep46-the-many-faces-of-flat-map-part-5</guid><description>Finishing our 3-part answer to the all-important question "what's the point?", we finally show that standing on the foundation of our understanding of `map`, `zip` and `flatMap` we can now ask and concisely answer very complex questions about the nature of these operations.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Finishing our 3-part answer to the all-important question "what's the point?", we finally show that standing on the foundation of our understanding of `map`, `zip` and `flatMap` we can now ask and concisely answer very complex questions about the nature of these operations.</itunes:subtitle><itunes:summary>Finishing our 3-part answer to the all-important question "what's the point?", we finally show that standing on the foundation of our understanding of `map`, `zip` and `flatMap` we can now ask and concisely answer very complex questions about the nature of these operations.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:32:40</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0046.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>46</itunes:episode><itunes:title>The Many Faces of Flat‑Map: Part 5</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0046-720p-9356093619734ad4b16d111541cf5bcf.mp4" length="447905950" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0046-720p-9356093619734ad4b16d111541cf5bcf.mp4" length="447905950" type="video/mp4" medium="video"><media:title>The Many Faces of Flat‑Map: Part 5</media:title></media:content></item><item><title>The Many Faces of Flat‑Map: Part 4</title><pubDate>Mon, 28 Jan 2019 07:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep45-the-many-faces-of-flat-map-part-4</link><guid>https://www.pointfree.co/episodes/ep45-the-many-faces-of-flat-map-part-4</guid><description>Continuing our 3-part answer to the all-important question "what's the point?", we show that the definitions of `map`, `zip` and `flatMap` are precise and concisely describe their purpose. Knowing this we can strengthen our APIs by not smudging their definitions when convenient.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Continuing our 3-part answer to the all-important question "what's the point?", we show that the definitions of `map`, `zip` and `flatMap` are precise and concisely describe their purpose. Knowing this we can strengthen our APIs by not smudging their definitions when convenient.</itunes:subtitle><itunes:summary>Continuing our 3-part answer to the all-important question "what's the point?", we show that the definitions of `map`, `zip` and `flatMap` are precise and concisely describe their purpose. Knowing this we can strengthen our APIs by not smudging their definitions when convenient.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:24:37</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0045.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>45</itunes:episode><itunes:title>The Many Faces of Flat‑Map: Part 4</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0045-720p-7cb6f055d2b04fce9494247783b14d12.mp4" length="498047051" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0045-720p-7cb6f055d2b04fce9494247783b14d12.mp4" length="498047051" type="video/mp4" medium="video"><media:title>The Many Faces of Flat‑Map: Part 4</media:title></media:content></item><item><title>The Many Faces of Flat‑Map: Part 3</title><pubDate>Mon, 21 Jan 2019 07:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep44-the-many-faces-of-flat-map-part-3</link><guid>https://www.pointfree.co/episodes/ep44-the-many-faces-of-flat-map-part-3</guid><description>We are now ready to answer the all-important question: what's the point? We will describe 3 important ideas that are now more accessible due to our deep study of `map`, `zip` and `flatMap`. We will start by showing that this trio of operations forms a kind of functional, domain-specific language for data transformations.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We are now ready to answer the all-important question: what's the point? We will describe 3 important ideas that are now more accessible due to our deep study of `map`, `zip` and `flatMap`. We will start by showing that this trio of operations forms a kind of functional, domain-specific language for data transformations.</itunes:subtitle><itunes:summary>We are now ready to answer the all-important question: what's the point? We will describe 3 important ideas that are now more accessible due to our deep study of `map`, `zip` and `flatMap`. We will start by showing that this trio of operations forms a kind of functional, domain-specific language for data transformations.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:36:52</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0044.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>44</itunes:episode><itunes:title>The Many Faces of Flat‑Map: Part 3</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0044-720p-237d90c2a9bb4556a8507385ace73d5b.mp4" length="405548665" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0044-720p-237d90c2a9bb4556a8507385ace73d5b.mp4" length="405548665" type="video/mp4" medium="video"><media:title>The Many Faces of Flat‑Map: Part 3</media:title></media:content></item><item><title>The Many Faces of Flat‑Map: Part 2</title><pubDate>Wed, 16 Jan 2019 07:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep43-the-many-faces-of-flat-map-part-2</link><guid>https://www.pointfree.co/episodes/ep43-the-many-faces-of-flat-map-part-2</guid><description>Now that we know that `flatMap` is important for flattening nested arrays and optionals, we should feel empowered to define it on our own types. This leads us to understanding its structure more in depth and how it's different from `map` and `zip`.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Now that we know that `flatMap` is important for flattening nested arrays and optionals, we should feel empowered to define it on our own types. This leads us to understanding its structure more in depth and how it's different from `map` and `zip`.</itunes:subtitle><itunes:summary>Now that we know that `flatMap` is important for flattening nested arrays and optionals, we should feel empowered to define it on our own types. This leads us to understanding its structure more in depth and how it's different from `map` and `zip`.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:27:19</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0043.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>43</itunes:episode><itunes:title>The Many Faces of Flat‑Map: Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0043-720p-dd040f6b51154f84be116ee0fec2a9a3.mp4" length="349611382" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0043-720p-dd040f6b51154f84be116ee0fec2a9a3.mp4" length="349611382" type="video/mp4" medium="video"><media:title>The Many Faces of Flat‑Map: Part 2</media:title></media:content></item><item><title>The Many Faces of Flat‑Map: Part 1</title><pubDate>Mon, 07 Jan 2019 07:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep42-the-many-faces-of-flat-map-part-1</link><guid>https://www.pointfree.co/episodes/ep42-the-many-faces-of-flat-map-part-1</guid><description>Previously we've discussed the `map` and `zip` operations in detail, and today we start completing the trilogy by exploring `flatMap`. This operation is precisely the tool needed to solve a nesting problem that `map` and `zip` alone cannot.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Previously we've discussed the `map` and `zip` operations in detail, and today we start completing the trilogy by exploring `flatMap`. This operation is precisely the tool needed to solve a nesting problem that `map` and `zip` alone cannot.</itunes:subtitle><itunes:summary>Previously we've discussed the `map` and `zip` operations in detail, and today we start completing the trilogy by exploring `flatMap`. This operation is precisely the tool needed to solve a nesting problem that `map` and `zip` alone cannot.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:25:09</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0042.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>42</itunes:episode><itunes:title>The Many Faces of Flat‑Map: Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0042-720p-60e13089f95c493eaca97ba65e18a0b0.mp4" length="272258603" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0042-720p-60e13089f95c493eaca97ba65e18a0b0.mp4" length="272258603" type="video/mp4" medium="video"><media:title>The Many Faces of Flat‑Map: Part 1</media:title></media:content></item><item><title>A Tour of Snapshot Testing</title><pubDate>Tue, 18 Dec 2018 07:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep41-a-tour-of-snapshot-testing</link><guid>https://www.pointfree.co/episodes/ep41-a-tour-of-snapshot-testing</guid><description>Our snapshot testing library is now officially open source! In order to show just how easy it is to integrate the library into any existing code base, we add some snapshot tests to a popular open source library for attributed strings. This gives us the chance to see how easy it is to write all new, domain-specific snapshot strategies from scratch.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Our snapshot testing library is now officially open source! In order to show just how easy it is to integrate the library into any existing code base, we add some snapshot tests to a popular open source library for attributed strings. This gives us the chance to see how easy it is to write all new, domain-specific snapshot strategies from scratch.</itunes:subtitle><itunes:summary>Our snapshot testing library is now officially open source! In order to show just how easy it is to integrate the library into any existing code base, we add some snapshot tests to a popular open source library for attributed strings. This gives us the chance to see how easy it is to write all new, domain-specific snapshot strategies from scratch.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:29:16</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0041.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>41</itunes:episode><itunes:title>A Tour of Snapshot Testing</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0041-720p-6dbcd6ae60bc44f99ac58abdea52a1c7.mp4" length="450728966" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0041-720p-6dbcd6ae60bc44f99ac58abdea52a1c7.mp4" length="450728966" type="video/mp4" medium="video"><media:title>A Tour of Snapshot Testing</media:title></media:content></item><item><title>Async Functional Refactoring</title><pubDate>Mon, 17 Dec 2018 07:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep40-async-functional-refactoring</link><guid>https://www.pointfree.co/episodes/ep40-async-functional-refactoring</guid><description>The snapshot testing library we have been designing over the past few weeks has a serious problem: it can't snapshot asynchronous values, like web views and anything that uses delegates or callbacks. Today we embark on a no-regret refactor to fix this problem with the help of a well-studied and well-understood functional type that we have discussed numerous times before.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>The snapshot testing library we have been designing over the past few weeks has a serious problem: it can't snapshot asynchronous values, like web views and anything that uses delegates or callbacks. Today we embark on a no-regret refactor to fix this problem with the help of a well-studied and well-understood functional type that we have discussed numerous times before.</itunes:subtitle><itunes:summary>The snapshot testing library we have been designing over the past few weeks has a serious problem: it can't snapshot asynchronous values, like web views and anything that uses delegates or callbacks. Today we embark on a no-regret refactor to fix this problem with the help of a well-studied and well-understood functional type that we have discussed numerous times before.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:34:08</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0040.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>40</itunes:episode><itunes:title>Async Functional Refactoring</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0040-720p-28c66795323e4cae805d0acdf7e91856.mp4" length="412513663" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0040-720p-28c66795323e4cae805d0acdf7e91856.mp4" length="412513663" type="video/mp4" medium="video"><media:title>Async Functional Refactoring</media:title></media:content></item><item><title>Witness-Oriented Library Design</title><pubDate>Mon, 26 Nov 2018 05:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep39-witness-oriented-library-design</link><guid>https://www.pointfree.co/episodes/ep39-witness-oriented-library-design</guid><description>We previously refactored a library using protocols to make it more flexible and extensible but found that it wasn't quite as flexible or extensible as we wanted it to be. This week we re-refactor our protocols away to concrete datatypes using our learnings from earlier in the series.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We previously refactored a library using protocols to make it more flexible and extensible but found that it wasn't quite as flexible or extensible as we wanted it to be. This week we re-refactor our protocols away to concrete datatypes using our learnings from earlier in the series.</itunes:subtitle><itunes:summary>We previously refactored a library using protocols to make it more flexible and extensible but found that it wasn't quite as flexible or extensible as we wanted it to be. This week we re-refactor our protocols away to concrete datatypes using our learnings from earlier in the series.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:39:01</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0039.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>39</itunes:episode><itunes:title>Witness-Oriented Library Design</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0039-720p-16f1e40bc9554b7da967b2d9b68038c8.mp4" length="521175610" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0039-720p-16f1e40bc9554b7da967b2d9b68038c8.mp4" length="521175610" type="video/mp4" medium="video"><media:title>Witness-Oriented Library Design</media:title></media:content></item><item><title>Protocol-Oriented Library Design: Part 2</title><pubDate>Mon, 19 Nov 2018 06:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep38-protocol-oriented-library-design-part-2</link><guid>https://www.pointfree.co/episodes/ep38-protocol-oriented-library-design-part-2</guid><description>With our library fully generalized using protocols, we show off the flexibility of our abstraction by adding new conformances and functionality. In fleshing out our library we find out why protocols may not be the right tool for the job.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>With our library fully generalized using protocols, we show off the flexibility of our abstraction by adding new conformances and functionality. In fleshing out our library we find out why protocols may not be the right tool for the job.</itunes:subtitle><itunes:summary>With our library fully generalized using protocols, we show off the flexibility of our abstraction by adding new conformances and functionality. In fleshing out our library we find out why protocols may not be the right tool for the job.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:22:22</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0038.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>38</itunes:episode><itunes:title>Protocol-Oriented Library Design: Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0038-720p-495111f2a23f4dea96279a057f6e1349.mp4" length="1538121097" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0038-720p-495111f2a23f4dea96279a057f6e1349.mp4" length="1538121097" type="video/mp4" medium="video"><media:title>Protocol-Oriented Library Design: Part 2</media:title></media:content></item><item><title>Protocol-Oriented Library Design: Part 1</title><pubDate>Mon, 12 Nov 2018 09:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep37-protocol-oriented-library-design-part-1</link><guid>https://www.pointfree.co/episodes/ep37-protocol-oriented-library-design-part-1</guid><description>Perhaps the most popular approach to code reuse and extensibility in Swift is to liberally adopt protocol-oriented programming, and many Swift libraries are designed with protocol-heavy APIs. In today's episode we refactor a sample library to use protocols and examine the pros and cons of this approach.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Perhaps the most popular approach to code reuse and extensibility in Swift is to liberally adopt protocol-oriented programming, and many Swift libraries are designed with protocol-heavy APIs. In today's episode we refactor a sample library to use protocols and examine the pros and cons of this approach.</itunes:subtitle><itunes:summary>Perhaps the most popular approach to code reuse and extensibility in Swift is to liberally adopt protocol-oriented programming, and many Swift libraries are designed with protocol-heavy APIs. In today's episode we refactor a sample library to use protocols and examine the pros and cons of this approach.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:22:59</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0037.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>37</itunes:episode><itunes:title>Protocol-Oriented Library Design: Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0037-720p-232f6a97fcb1488c91e6fc6b7c43e458.mp4" length="354803217" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0037-720p-232f6a97fcb1488c91e6fc6b7c43e458.mp4" length="354803217" type="video/mp4" medium="video"><media:title>Protocol-Oriented Library Design: Part 1</media:title></media:content></item><item><title>Advanced Protocol Witnesses: Part 2</title><pubDate>Mon, 05 Nov 2018 09:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep36-advanced-protocol-witnesses-part-2</link><guid>https://www.pointfree.co/episodes/ep36-advanced-protocol-witnesses-part-2</guid><description>We complete our dictionary for translating Swift protocol concepts into concrete datatypes and functions. This includes protocol inheritance, protocol extensions, default implementations _and_ protocols with associated types. Along the way we will also show how concrete types can express things that are currently impossible with Swift protocols.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We complete our dictionary for translating Swift protocol concepts into concrete datatypes and functions. This includes protocol inheritance, protocol extensions, default implementations _and_ protocols with associated types. Along the way we will also show how concrete types can express things that are currently impossible with Swift protocols.</itunes:subtitle><itunes:summary>We complete our dictionary for translating Swift protocol concepts into concrete datatypes and functions. This includes protocol inheritance, protocol extensions, default implementations _and_ protocols with associated types. Along the way we will also show how concrete types can express things that are currently impossible with Swift protocols.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:37:41</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0036.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>36</itunes:episode><itunes:title>Advanced Protocol Witnesses: Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0036-720p-a144b3a754584ca98b782e4016f07a0d.mp4" length="1741549664" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0036-720p-a144b3a754584ca98b782e4016f07a0d.mp4" length="1741549664" type="video/mp4" medium="video"><media:title>Advanced Protocol Witnesses: Part 2</media:title></media:content></item><item><title>Advanced Protocol Witnesses: Part 1</title><pubDate>Mon, 29 Oct 2018 09:00:00 +0000</pubDate><link>https://www.pointfree.co/episodes/ep35-advanced-protocol-witnesses-part-1</link><guid>https://www.pointfree.co/episodes/ep35-advanced-protocol-witnesses-part-1</guid><description>Now that we know it's possible to replace protocols with concrete datatypes, and now that we've seen how that opens up new ways to compose things that were previously hidden from us, let's go a little deeper. We will show how to improve the ergonomics of writing Swift in this way, and show what Swift's powerful conditional conformance feature is represented by just plain functions.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Now that we know it's possible to replace protocols with concrete datatypes, and now that we've seen how that opens up new ways to compose things that were previously hidden from us, let's go a little deeper. We will show how to improve the ergonomics of writing Swift in this way, and show what Swift's powerful conditional conformance feature is represented by just plain functions.</itunes:subtitle><itunes:summary>Now that we know it's possible to replace protocols with concrete datatypes, and now that we've seen how that opens up new ways to compose things that were previously hidden from us, let's go a little deeper. We will show how to improve the ergonomics of writing Swift in this way, and show what Swift's powerful conditional conformance feature is represented by just plain functions.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:35:18</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0035.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>35</itunes:episode><itunes:title>Advanced Protocol Witnesses: Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0035-720p-3f9143322d804cd7b73f223aa4a28cc9.mp4" length="463437537" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0035-720p-3f9143322d804cd7b73f223aa4a28cc9.mp4" length="463437537" type="video/mp4" medium="video"><media:title>Advanced Protocol Witnesses: Part 1</media:title></media:content></item><item><title>Protocol Witnesses: Part 2</title><pubDate>Mon, 22 Oct 2018 05:48:42 +0000</pubDate><link>https://www.pointfree.co/episodes/ep34-protocol-witnesses-part-2</link><guid>https://www.pointfree.co/episodes/ep34-protocol-witnesses-part-2</guid><description>Last time we covered some basics with protocols, and demonstrated one of their biggest pitfalls: types can only conform to a protocol a single time. Sometimes it's valid and correct for a type to conform to a protocol in many ways. We show how to remedy this by demonstrating that one can scrap any protocol in favor of a simple datatype, and in doing so opens up a whole world of composability.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Last time we covered some basics with protocols, and demonstrated one of their biggest pitfalls: types can only conform to a protocol a single time. Sometimes it's valid and correct for a type to conform to a protocol in many ways. We show how to remedy this by demonstrating that one can scrap any protocol in favor of a simple datatype, and in doing so opens up a whole world of composability.</itunes:subtitle><itunes:summary>Last time we covered some basics with protocols, and demonstrated one of their biggest pitfalls: types can only conform to a protocol a single time. Sometimes it's valid and correct for a type to conform to a protocol in many ways. We show how to remedy this by demonstrating that one can scrap any protocol in favor of a simple datatype, and in doing so opens up a whole world of composability.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:22:41</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0034.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>34</itunes:episode><itunes:title>Protocol Witnesses: Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0034-720p-f7ae65e0e0004cd3ae355a0a5927c6e5.mp4" length="322543916" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0034-720p-f7ae65e0e0004cd3ae355a0a5927c6e5.mp4" length="322543916" type="video/mp4" medium="video"><media:title>Protocol Witnesses: Part 2</media:title></media:content></item><item><title>Protocol Witnesses: Part 1</title><pubDate>Mon, 15 Oct 2018 05:48:42 +0000</pubDate><link>https://www.pointfree.co/episodes/ep33-protocol-witnesses-part-1</link><guid>https://www.pointfree.co/episodes/ep33-protocol-witnesses-part-1</guid><description>Protocols are a great tool for abstraction, but aren't the only one. This week we begin to explore the tradeoffs of using protocols by highlighting a few areas in which they fall short in order to demonstrate how we can recover from these problems using a different tool and different tradeoffs.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Protocols are a great tool for abstraction, but aren't the only one. This week we begin to explore the tradeoffs of using protocols by highlighting a few areas in which they fall short in order to demonstrate how we can recover from these problems using a different tool and different tradeoffs.</itunes:subtitle><itunes:summary>Protocols are a great tool for abstraction, but aren't the only one. This week we begin to explore the tradeoffs of using protocols by highlighting a few areas in which they fall short in order to demonstrate how we can recover from these problems using a different tool and different tradeoffs.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:18:12</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0033.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>33</itunes:episode><itunes:title>Protocol Witnesses: Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0033-720p-28e5fc8b723c4a719f026f28fc72e962.mp4" length="210604240" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0033-720p-28e5fc8b723c4a719f026f28fc72e962.mp4" length="210604240" type="video/mp4" medium="video"><media:title>Protocol Witnesses: Part 1</media:title></media:content></item><item><title>Decodable Randomness: Part 2</title><pubDate>Mon, 01 Oct 2018 05:57:03 +0000</pubDate><link>https://www.pointfree.co/episodes/ep32-decodable-randomness-part-2</link><guid>https://www.pointfree.co/episodes/ep32-decodable-randomness-part-2</guid><description>This week we compare our `Decodable` solution to building random structures with a composable solution involving the `Gen` type, exploring the differences and trade-offs of each approach. Along the way we'll rediscover a familiar old friend with a brand new application.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>This week we compare our `Decodable` solution to building random structures with a composable solution involving the `Gen` type, exploring the differences and trade-offs of each approach. Along the way we'll rediscover a familiar old friend with a brand new application.</itunes:subtitle><itunes:summary>This week we compare our `Decodable` solution to building random structures with a composable solution involving the `Gen` type, exploring the differences and trade-offs of each approach. Along the way we'll rediscover a familiar old friend with a brand new application.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:26:25</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0032.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>32</itunes:episode><itunes:title>Decodable Randomness: Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0032-720p-68e6fa8a12e14d5ebbd34388471976b1.mp4" length="388228848" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0032-720p-68e6fa8a12e14d5ebbd34388471976b1.mp4" length="388228848" type="video/mp4" medium="video"><media:title>Decodable Randomness: Part 2</media:title></media:content></item><item><title>Decodable Randomness: Part 1</title><pubDate>Mon, 24 Sep 2018 05:57:03 +0000</pubDate><link>https://www.pointfree.co/episodes/ep31-decodable-randomness-part-1</link><guid>https://www.pointfree.co/episodes/ep31-decodable-randomness-part-1</guid><description>This week we dive deeper into randomness and composition by looking to a seemingly random place: the `Decodable` protocol. While we're used to using the `Codable` set of protocols when working with JSON serialization and deserialization, it opens the opportunity for so much more.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>This week we dive deeper into randomness and composition by looking to a seemingly random place: the `Decodable` protocol. While we're used to using the `Codable` set of protocols when working with JSON serialization and deserialization, it opens the opportunity for so much more.</itunes:subtitle><itunes:summary>This week we dive deeper into randomness and composition by looking to a seemingly random place: the `Decodable` protocol. While we're used to using the `Codable` set of protocols when working with JSON serialization and deserialization, it opens the opportunity for so much more.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:21:07</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0031.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>31</itunes:episode><itunes:title>Decodable Randomness: Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0031-720p-c2352c3d4599477488918cef827a83e5.mp4" length="292854951" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0031-720p-c2352c3d4599477488918cef827a83e5.mp4" length="292854951" type="video/mp4" medium="video"><media:title>Decodable Randomness: Part 1</media:title></media:content></item><item><title>Composable Randomness</title><pubDate>Mon, 17 Sep 2018 05:57:03 +0000</pubDate><link>https://www.pointfree.co/episodes/ep30-composable-randomness</link><guid>https://www.pointfree.co/episodes/ep30-composable-randomness</guid><description>Randomness is a topic that may not seem so functional, but it gives us a wonderful opportunity to explore composition. After a survey of what randomness looks like in Swift today, we'll build a complex set of random APIs from just a single unit.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Randomness is a topic that may not seem so functional, but it gives us a wonderful opportunity to explore composition. After a survey of what randomness looks like in Swift today, we'll build a complex set of random APIs from just a single unit.</itunes:subtitle><itunes:summary>Randomness is a topic that may not seem so functional, but it gives us a wonderful opportunity to explore composition. After a survey of what randomness looks like in Swift today, we'll build a complex set of random APIs from just a single unit.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:40:30</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0030.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>30</itunes:episode><itunes:title>Composable Randomness</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0030-720p-5c4fac6783064beca04f55ffcf2f414c.mp4" length="385539894" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0030-720p-5c4fac6783064beca04f55ffcf2f414c.mp4" length="385539894" type="video/mp4" medium="video"><media:title>Composable Randomness</media:title></media:content></item><item><title>DSLs vs. Templating Languages</title><pubDate>Mon, 10 Sep 2018 05:57:03 +0000</pubDate><link>https://www.pointfree.co/episodes/ep29-dsls-vs-templating-languages</link><guid>https://www.pointfree.co/episodes/ep29-dsls-vs-templating-languages</guid><description>Templating languages are the most common way to render HTML in web frameworks, but we don't think they are the best way. We compare templating languages to the DSL we previously built, and show that the DSL fixes many problems that templates have, while also revealing amazing compositions that were previously hidden.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Templating languages are the most common way to render HTML in web frameworks, but we don't think they are the best way. We compare templating languages to the DSL we previously built, and show that the DSL fixes many problems that templates have, while also revealing amazing compositions that were previously hidden.</itunes:subtitle><itunes:summary>Templating languages are the most common way to render HTML in web frameworks, but we don't think they are the best way. We compare templating languages to the DSL we previously built, and show that the DSL fixes many problems that templates have, while also revealing amazing compositions that were previously hidden.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:33:17</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0029.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>29</itunes:episode><itunes:title>DSLs vs. Templating Languages</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0029-720p-b02cb4cd722a4fe5bba1db2b94c88fac.mp4" length="476109800" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0029-720p-b02cb4cd722a4fe5bba1db2b94c88fac.mp4" length="476109800" type="video/mp4" medium="video"><media:title>DSLs vs. Templating Languages</media:title></media:content></item><item><title>An HTML DSL</title><pubDate>Mon, 03 Sep 2018 05:57:03 +0000</pubDate><link>https://www.pointfree.co/episodes/ep28-an-html-dsl</link><guid>https://www.pointfree.co/episodes/ep28-an-html-dsl</guid><description>This week we apply domain-specific languages to a very real-world problem: representing and rendering HTML. We code up a simple but powerful solution that forms the foundation of what we use to build the Point-Free website.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>This week we apply domain-specific languages to a very real-world problem: representing and rendering HTML. We code up a simple but powerful solution that forms the foundation of what we use to build the Point-Free website.</itunes:subtitle><itunes:summary>This week we apply domain-specific languages to a very real-world problem: representing and rendering HTML. We code up a simple but powerful solution that forms the foundation of what we use to build the Point-Free website.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:23:06</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0028.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>28</itunes:episode><itunes:title>An HTML DSL</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0028-720p-5744fe6562204d49b7755aea9de5d833.mp4" length="290838562" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0028-720p-5744fe6562204d49b7755aea9de5d833.mp4" length="290838562" type="video/mp4" medium="video"><media:title>An HTML DSL</media:title></media:content></item><item><title>Domain‑Specific Languages: Part 2</title><pubDate>Mon, 27 Aug 2018 05:57:03 +0000</pubDate><link>https://www.pointfree.co/episodes/ep27-domain-specific-languages-part-2</link><guid>https://www.pointfree.co/episodes/ep27-domain-specific-languages-part-2</guid><description>We finish our introduction to DSLs by adding two new features to our toy example: support for multiple variables and support for let-bindings so that we can share subexpressions within a larger expression. With these fundamentals out of the way, we will be ready to tackle a real-world DSL soon!</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We finish our introduction to DSLs by adding two new features to our toy example: support for multiple variables and support for let-bindings so that we can share subexpressions within a larger expression. With these fundamentals out of the way, we will be ready to tackle a real-world DSL soon!</itunes:subtitle><itunes:summary>We finish our introduction to DSLs by adding two new features to our toy example: support for multiple variables and support for let-bindings so that we can share subexpressions within a larger expression. With these fundamentals out of the way, we will be ready to tackle a real-world DSL soon!</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:20:17</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0027.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>27</itunes:episode><itunes:title>Domain‑Specific Languages: Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0027-720p-a9ba524dc8d2402997ecc1618efad4e1.mp4" length="327796396" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0027-720p-a9ba524dc8d2402997ecc1618efad4e1.mp4" length="327796396" type="video/mp4" medium="video"><media:title>Domain‑Specific Languages: Part 2</media:title></media:content></item><item><title>Domain‑Specific Languages: Part 1</title><pubDate>Mon, 20 Aug 2018 05:57:03 +0000</pubDate><link>https://www.pointfree.co/episodes/ep26-domain-specific-languages-part-1</link><guid>https://www.pointfree.co/episodes/ep26-domain-specific-languages-part-1</guid><description>We interact with domain-specific languages on a daily basis, but what does it take to build your own? After introducing the topic, we will begin building a toy example directly in Swift, which will set the foundation for a future DSL with far-reaching applications.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We interact with domain-specific languages on a daily basis, but what does it take to build your own? After introducing the topic, we will begin building a toy example directly in Swift, which will set the foundation for a future DSL with far-reaching applications.</itunes:subtitle><itunes:summary>We interact with domain-specific languages on a daily basis, but what does it take to build your own? After introducing the topic, we will begin building a toy example directly in Swift, which will set the foundation for a future DSL with far-reaching applications.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:24:19</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0026.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>26</itunes:episode><itunes:title>Domain‑Specific Languages: Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0026-720p-485cfd20a83b4f49af7a8cae61e816fb.mp4" length="360379880" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0026-720p-485cfd20a83b4f49af7a8cae61e816fb.mp4" length="360379880" type="video/mp4" medium="video"><media:title>Domain‑Specific Languages: Part 1</media:title></media:content></item><item><title>The Many Faces of Zip: Part 3</title><pubDate>Mon, 06 Aug 2018 05:57:03 +0000</pubDate><link>https://www.pointfree.co/episodes/ep25-the-many-faces-of-zip-part-3</link><guid>https://www.pointfree.co/episodes/ep25-the-many-faces-of-zip-part-3</guid><description>The third, and final, part of our introductory series to `zip` finally answers the question: "What's the point?"</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>The third, and final, part of our introductory series to `zip` finally answers the question: "What's the point?"</itunes:subtitle><itunes:summary>The third, and final, part of our introductory series to `zip` finally answers the question: "What's the point?"</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:24:21</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0025.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>25</itunes:episode><itunes:title>The Many Faces of Zip: Part 3</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0025-720p-273cf96a66e64a50bf2de80281cb4b4a.mp4" length="501551082" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0025-720p-273cf96a66e64a50bf2de80281cb4b4a.mp4" length="501551082" type="video/mp4" medium="video"><media:title>The Many Faces of Zip: Part 3</media:title></media:content></item><item><title>The Many Faces of Zip: Part 2</title><pubDate>Mon, 30 Jul 2018 05:57:03 +0000</pubDate><link>https://www.pointfree.co/episodes/ep24-the-many-faces-of-zip-part-2</link><guid>https://www.pointfree.co/episodes/ep24-the-many-faces-of-zip-part-2</guid><description>In part two of our series on `zip` we will show that many types support a `zip`-like operation, and some even support multiple distinct implementations. However, not all `zip`s are created equal, and understanding this can lead to some illuminating properties of our types.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>In part two of our series on `zip` we will show that many types support a `zip`-like operation, and some even support multiple distinct implementations. However, not all `zip`s are created equal, and understanding this can lead to some illuminating properties of our types.</itunes:subtitle><itunes:summary>In part two of our series on `zip` we will show that many types support a `zip`-like operation, and some even support multiple distinct implementations. However, not all `zip`s are created equal, and understanding this can lead to some illuminating properties of our types.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:36:01</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0024.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>24</itunes:episode><itunes:title>The Many Faces of Zip: Part 2</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0024-720p-d20deb9023044757a4f660c673c6cb90.mp4" length="347712454" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0024-720p-d20deb9023044757a4f660c673c6cb90.mp4" length="347712454" type="video/mp4" medium="video"><media:title>The Many Faces of Zip: Part 2</media:title></media:content></item><item><title>The Many Faces of Zip: Part 1</title><pubDate>Mon, 23 Jul 2018 09:57:03 +0000</pubDate><link>https://www.pointfree.co/episodes/ep23-the-many-faces-of-zip-part-1</link><guid>https://www.pointfree.co/episodes/ep23-the-many-faces-of-zip-part-1</guid><description>The `zip` function comes with the Swift standard library, but its utility goes far beyond what we can see there. Turns out, `zip` generalizes a function that we are all familiar with, and it can unify many seemingly disparate concepts. Today we begin a multipart journey into exploring the power behind `zip`.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>The `zip` function comes with the Swift standard library, but its utility goes far beyond what we can see there. Turns out, `zip` generalizes a function that we are all familiar with, and it can unify many seemingly disparate concepts. Today we begin a multipart journey into exploring the power behind `zip`.</itunes:subtitle><itunes:summary>The `zip` function comes with the Swift standard library, but its utility goes far beyond what we can see there. Turns out, `zip` generalizes a function that we are all familiar with, and it can unify many seemingly disparate concepts. Today we begin a multipart journey into exploring the power behind `zip`.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:28:53</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0023.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>23</itunes:episode><itunes:title>The Many Faces of Zip: Part 1</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0023-720p-b247505281c8453d9507f22063a4077c.mp4" length="145414671" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0023-720p-b247505281c8453d9507f22063a4077c.mp4" length="145414671" type="video/mp4" medium="video"><media:title>The Many Faces of Zip: Part 1</media:title></media:content></item><item><title>A Tour of Point-Free</title><pubDate>Mon, 16 Jul 2018 09:57:03 +0000</pubDate><link>https://www.pointfree.co/episodes/ep22-a-tour-of-point-free</link><guid>https://www.pointfree.co/episodes/ep22-a-tour-of-point-free</guid><description>Join us for a tour of the code base that powers this very site and see what functional programming can look like in a production code base! We'll walk through cloning the repo and getting the site running on your local machine before showing off some of the fun functional programming we do on a daily basis.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Join us for a tour of the code base that powers this very site and see what functional programming can look like in a production code base! We'll walk through cloning the repo and getting the site running on your local machine before showing off some of the fun functional programming we do on a daily basis.</itunes:subtitle><itunes:summary>Join us for a tour of the code base that powers this very site and see what functional programming can look like in a production code base! We'll walk through cloning the repo and getting the site running on your local machine before showing off some of the fun functional programming we do on a daily basis.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:39:21</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0022.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>22</itunes:episode><itunes:title>A Tour of Point-Free</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0022-720p-8793fae0ead64a90a3c3b5853d438107.mp4" length="325311571" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0022-720p-8793fae0ead64a90a3c3b5853d438107.mp4" length="325311571" type="video/mp4" medium="video"><media:title>A Tour of Point-Free</media:title></media:content></item><item><title>Playground Driven Development</title><pubDate>Mon, 09 Jul 2018 09:57:03 +0000</pubDate><link>https://www.pointfree.co/episodes/ep21-playground-driven-development</link><guid>https://www.pointfree.co/episodes/ep21-playground-driven-development</guid><description>We use Swift playgrounds on this series as a tool to dive deep into functional programming concepts, but they can be so much more. Today we demonstrate a few tricks to allow you to use playgrounds for everyday development, allowing for a faster iteration cycle.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We use Swift playgrounds on this series as a tool to dive deep into functional programming concepts, but they can be so much more. Today we demonstrate a few tricks to allow you to use playgrounds for everyday development, allowing for a faster iteration cycle.</itunes:subtitle><itunes:summary>We use Swift playgrounds on this series as a tool to dive deep into functional programming concepts, but they can be so much more. Today we demonstrate a few tricks to allow you to use playgrounds for everyday development, allowing for a faster iteration cycle.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:24:50</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0021.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>21</itunes:episode><itunes:title>Playground Driven Development</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0021-720p-e910e2d4fb3e45419e177459e200fcbc.mp4" length="464205934" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0021-720p-e910e2d4fb3e45419e177459e200fcbc.mp4" length="464205934" type="video/mp4" medium="video"><media:title>Playground Driven Development</media:title></media:content></item><item><title>NonEmpty</title><pubDate>Mon, 25 Jun 2018 09:57:03 +0000</pubDate><link>https://www.pointfree.co/episodes/ep20-nonempty</link><guid>https://www.pointfree.co/episodes/ep20-nonempty</guid><description>We often deal with collections that we know can never be empty, yet we use arrays to model them. Using the ideas from our last episode on algebraic data types, we develop a `NonEmpty` type that can be used to transform any collection into a non-empty version of itself.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We often deal with collections that we know can never be empty, yet we use arrays to model them. Using the ideas from our last episode on algebraic data types, we develop a `NonEmpty` type that can be used to transform any collection into a non-empty version of itself.</itunes:subtitle><itunes:summary>We often deal with collections that we know can never be empty, yet we use arrays to model them. Using the ideas from our last episode on algebraic data types, we develop a `NonEmpty` type that can be used to transform any collection into a non-empty version of itself.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:49:02</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0020.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>20</itunes:episode><itunes:title>NonEmpty</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0020-720p-b09e7880c2a2407da9f601eb71b791eb.mp4" length="480161017" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0020-720p-b09e7880c2a2407da9f601eb71b791eb.mp4" length="480161017" type="video/mp4" medium="video"><media:title>NonEmpty</media:title></media:content></item><item><title>Algebraic Data Types: Generics and Recursion</title><pubDate>Mon, 11 Jun 2018 09:57:03 +0000</pubDate><link>https://www.pointfree.co/episodes/ep19-algebraic-data-types-generics-and-recursion</link><guid>https://www.pointfree.co/episodes/ep19-algebraic-data-types-generics-and-recursion</guid><description>Our third installment of algebraic data types explores how generics and recursive data types manifest themselves in algebra. This exploration allows us to construct a useful, precise type that can be useful in everyday programming.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Our third installment of algebraic data types explores how generics and recursive data types manifest themselves in algebra. This exploration allows us to construct a useful, precise type that can be useful in everyday programming.</itunes:subtitle><itunes:summary>Our third installment of algebraic data types explores how generics and recursive data types manifest themselves in algebra. This exploration allows us to construct a useful, precise type that can be useful in everyday programming.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:47:01</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0019.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>19</itunes:episode><itunes:title>Algebraic Data Types: Generics and Recursion</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0019-720p-415a74ec284a41abbff29da14e3426f2.mp4" length="594455010" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0019-720p-415a74ec284a41abbff29da14e3426f2.mp4" length="594455010" type="video/mp4" medium="video"><media:title>Algebraic Data Types: Generics and Recursion</media:title></media:content></item><item><title>Dependency Injection Made Comfortable</title><pubDate>Mon, 04 Jun 2018 09:57:03 +0000</pubDate><link>https://www.pointfree.co/episodes/ep18-dependency-injection-made-comfortable</link><guid>https://www.pointfree.co/episodes/ep18-dependency-injection-made-comfortable</guid><description>Let's have some fun with the "environment" form of dependency injection we previously explored. We're going to extract out a few more dependencies, strengthen our mocks, and use our Overture library to make manipulating the environment friendlier.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let's have some fun with the "environment" form of dependency injection we previously explored. We're going to extract out a few more dependencies, strengthen our mocks, and use our Overture library to make manipulating the environment friendlier.</itunes:subtitle><itunes:summary>Let's have some fun with the "environment" form of dependency injection we previously explored. We're going to extract out a few more dependencies, strengthen our mocks, and use our Overture library to make manipulating the environment friendlier.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:28:36</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0018.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>18</itunes:episode><itunes:title>Dependency Injection Made Comfortable</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0018-720p-e77aa0413f104e6586818aa5ea2a8f50.mp4" length="430653380" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0018-720p-e77aa0413f104e6586818aa5ea2a8f50.mp4" length="430653380" type="video/mp4" medium="video"><media:title>Dependency Injection Made Comfortable</media:title></media:content></item><item><title>Styling with Overture</title><pubDate>Mon, 28 May 2018 09:57:03 +0000</pubDate><link>https://www.pointfree.co/episodes/ep17-styling-with-overture</link><guid>https://www.pointfree.co/episodes/ep17-styling-with-overture</guid><description>We revisit an old topic: styling UIKit components. Using some of the machinery we have built from previous episodes, in particular setters and function composition, we refactor a screen's styles to be more modular and composable.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We revisit an old topic: styling UIKit components. Using some of the machinery we have built from previous episodes, in particular setters and function composition, we refactor a screen's styles to be more modular and composable.</itunes:subtitle><itunes:summary>We revisit an old topic: styling UIKit components. Using some of the machinery we have built from previous episodes, in particular setters and function composition, we refactor a screen's styles to be more modular and composable.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:29:20</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0017.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>17</itunes:episode><itunes:title>Styling with Overture</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0017-720p-8bc4c4415f614e5999d21184a66f9d1c.mp4" length="413466413" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0017-720p-8bc4c4415f614e5999d21184a66f9d1c.mp4" length="413466413" type="video/mp4" medium="video"><media:title>Styling with Overture</media:title></media:content></item><item><title>Dependency Injection Made Easy</title><pubDate>Mon, 21 May 2018 09:57:03 +0000</pubDate><link>https://www.pointfree.co/episodes/ep16-dependency-injection-made-easy</link><guid>https://www.pointfree.co/episodes/ep16-dependency-injection-made-easy</guid><description>Today we're going to control the world! Well, dependencies to the outside world, at least. We'll define the "dependency injection" problem and show a lightweight solution that can be implemented in your code base with little work and no third party library.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Today we're going to control the world! Well, dependencies to the outside world, at least. We'll define the "dependency injection" problem and show a lightweight solution that can be implemented in your code base with little work and no third party library.</itunes:subtitle><itunes:summary>Today we're going to control the world! Well, dependencies to the outside world, at least. We'll define the "dependency injection" problem and show a lightweight solution that can be implemented in your code base with little work and no third party library.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:35:14</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0016.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>16</itunes:episode><itunes:title>Dependency Injection Made Easy</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0016-720p-edbd911a57544c84ba8a5eb69fe2e432.mp4" length="570918970" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0016-720p-edbd911a57544c84ba8a5eb69fe2e432.mp4" length="570918970" type="video/mp4" medium="video"><media:title>Dependency Injection Made Easy</media:title></media:content></item><item><title>Setters: Ergonomics &amp; Performance</title><pubDate>Mon, 14 May 2018 09:57:03 +0000</pubDate><link>https://www.pointfree.co/episodes/ep15-setters-ergonomics-performance</link><guid>https://www.pointfree.co/episodes/ep15-setters-ergonomics-performance</guid><description>Functional setters can be very powerful, but the way we have defined them so far is not super ergonomic or performant. We will provide a friendlier API to use setters and take advantage of Swift's value mutation semantics to make setters a viable tool to bring into your code base _today_.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Functional setters can be very powerful, but the way we have defined them so far is not super ergonomic or performant. We will provide a friendlier API to use setters and take advantage of Swift's value mutation semantics to make setters a viable tool to bring into your code base _today_.</itunes:subtitle><itunes:summary>Functional setters can be very powerful, but the way we have defined them so far is not super ergonomic or performant. We will provide a friendlier API to use setters and take advantage of Swift's value mutation semantics to make setters a viable tool to bring into your code base _today_.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:34:19</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0015.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>15</itunes:episode><itunes:title>Setters: Ergonomics &amp; Performance</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0015-720p-a8101d1daea04dff9fae25285b69abf9.mp4" length="342321416" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0015-720p-a8101d1daea04dff9fae25285b69abf9.mp4" length="342321416" type="video/mp4" medium="video"><media:title>Setters: Ergonomics &amp; Performance</media:title></media:content></item><item><title>Contravariance</title><pubDate>Mon, 30 Apr 2018 09:57:03 +0000</pubDate><link>https://www.pointfree.co/episodes/ep14-contravariance</link><guid>https://www.pointfree.co/episodes/ep14-contravariance</guid><description>Let's explore a type of composition that defies our intuitions. It appears to go in the opposite direction than we are used to. We'll show that this composition is completely natural, hiding right in plain sight, and in fact related to the Liskov Substitution Principle.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Let's explore a type of composition that defies our intuitions. It appears to go in the opposite direction than we are used to. We'll show that this composition is completely natural, hiding right in plain sight, and in fact related to the Liskov Substitution Principle.</itunes:subtitle><itunes:summary>Let's explore a type of composition that defies our intuitions. It appears to go in the opposite direction than we are used to. We'll show that this composition is completely natural, hiding right in plain sight, and in fact related to the Liskov Substitution Principle.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:38:39</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0014.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>14</itunes:episode><itunes:title>Contravariance</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0014-720p-6523a01fea3d4f4a961ff50b964440cb.mp4" length="383000102" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0014-720p-6523a01fea3d4f4a961ff50b964440cb.mp4" length="383000102" type="video/mp4" medium="video"><media:title>Contravariance</media:title></media:content></item><item><title>The Many Faces of Map</title><pubDate>Mon, 23 Apr 2018 09:57:03 +0000</pubDate><link>https://www.pointfree.co/episodes/ep13-the-many-faces-of-map</link><guid>https://www.pointfree.co/episodes/ep13-the-many-faces-of-map</guid><description>Why does the `map` function appear in every programming language supporting "functional" concepts? And why does Swift have _two_ `map` functions? We will answer these questions and show that `map` has many universal properties, and is in some sense unique.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Why does the `map` function appear in every programming language supporting "functional" concepts? And why does Swift have _two_ `map` functions? We will answer these questions and show that `map` has many universal properties, and is in some sense unique.</itunes:subtitle><itunes:summary>Why does the `map` function appear in every programming language supporting "functional" concepts? And why does Swift have _two_ `map` functions? We will answer these questions and show that `map` has many universal properties, and is in some sense unique.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:31:48</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0013.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>13</itunes:episode><itunes:title>The Many Faces of Map</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0013-720p-c8418c78170b46908c2faf8269e6fcec.mp4" length="406463753" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0013-720p-c8418c78170b46908c2faf8269e6fcec.mp4" length="406463753" type="video/mp4" medium="video"><media:title>The Many Faces of Map</media:title></media:content></item><item><title>Tagged</title><pubDate>Mon, 16 Apr 2018 09:57:03 +0000</pubDate><link>https://www.pointfree.co/episodes/ep12-tagged</link><guid>https://www.pointfree.co/episodes/ep12-tagged</guid><description>We typically model our data with very general types, like strings and ints, but the values themselves are often far more specific, like emails and ids. We'll explore how this can lead to subtle runtime bugs and how we can strengthen these types in an ergonomic way using several features new to Swift 4.1.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We typically model our data with very general types, like strings and ints, but the values themselves are often far more specific, like emails and ids. We'll explore how this can lead to subtle runtime bugs and how we can strengthen these types in an ergonomic way using several features new to Swift 4.1.</itunes:subtitle><itunes:summary>We typically model our data with very general types, like strings and ints, but the values themselves are often far more specific, like emails and ids. We'll explore how this can lead to subtle runtime bugs and how we can strengthen these types in an ergonomic way using several features new to Swift 4.1.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:26:49</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0012.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>12</itunes:episode><itunes:title>Tagged</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0012-720p-88843cd0117e42bf9617b173b4b2e6c5.mp4" length="344862151" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0012-720p-88843cd0117e42bf9617b173b4b2e6c5.mp4" length="344862151" type="video/mp4" medium="video"><media:title>Tagged</media:title></media:content></item><item><title>Composition without Operators</title><pubDate>Mon, 09 Apr 2018 09:57:03 +0000</pubDate><link>https://www.pointfree.co/episodes/ep11-composition-without-operators</link><guid>https://www.pointfree.co/episodes/ep11-composition-without-operators</guid><description>While we unabashedly promote custom operators in this series, we understand that not every codebase can adopt them. Composition is too important to miss out on due to operators, so we want to explore some alternatives to unlock these benefits.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>While we unabashedly promote custom operators in this series, we understand that not every codebase can adopt them. Composition is too important to miss out on due to operators, so we want to explore some alternatives to unlock these benefits.</itunes:subtitle><itunes:summary>While we unabashedly promote custom operators in this series, we understand that not every codebase can adopt them. Composition is too important to miss out on due to operators, so we want to explore some alternatives to unlock these benefits.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:21:05</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0011.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>11</itunes:episode><itunes:title>Composition without Operators</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0011-720p-9c6f103258de4089860a704676d8fe41.mp4" length="202964939" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0011-720p-9c6f103258de4089860a704676d8fe41.mp4" length="202964939" type="video/mp4" medium="video"><media:title>Composition without Operators</media:title></media:content></item><item><title>A Tale of Two Flat‑Maps</title><pubDate>Tue, 27 Mar 2018 09:57:03 +0000</pubDate><link>https://www.pointfree.co/episodes/ep10-a-tale-of-two-flat-maps</link><guid>https://www.pointfree.co/episodes/ep10-a-tale-of-two-flat-maps</guid><description>Swift 4.1 deprecated and renamed a particular overload of `flatMap`. What made this `flatMap` different from the others? We'll explore this and how understanding that difference helps us explore generalizations of the operation to other structures and derive new, useful code!</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Swift 4.1 deprecated and renamed a particular overload of `flatMap`. What made this `flatMap` different from the others? We'll explore this and how understanding that difference helps us explore generalizations of the operation to other structures and derive new, useful code!</itunes:subtitle><itunes:summary>Swift 4.1 deprecated and renamed a particular overload of `flatMap`. What made this `flatMap` different from the others? We'll explore this and how understanding that difference helps us explore generalizations of the operation to other structures and derive new, useful code!</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:25:04</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0010.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>10</itunes:episode><itunes:title>A Tale of Two Flat‑Maps</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0010-720p-e9a302614ab44c4ba7199874d0865d18.mp4" length="164582242" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0010-720p-e9a302614ab44c4ba7199874d0865d18.mp4" length="164582242" type="video/mp4" medium="video"><media:title>A Tale of Two Flat‑Maps</media:title></media:content></item><item><title>Algebraic Data Types: Exponents</title><pubDate>Mon, 26 Mar 2018 09:57:03 +0000</pubDate><link>https://www.pointfree.co/episodes/ep9-algebraic-data-types-exponents</link><guid>https://www.pointfree.co/episodes/ep9-algebraic-data-types-exponents</guid><description>We continue our explorations into algebra and the Swift type system. We show that exponents correspond to functions in Swift, and that by using the properties of exponents we can better understand what makes some functions more complex than others.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We continue our explorations into algebra and the Swift type system. We show that exponents correspond to functions in Swift, and that by using the properties of exponents we can better understand what makes some functions more complex than others.</itunes:subtitle><itunes:summary>We continue our explorations into algebra and the Swift type system. We show that exponents correspond to functions in Swift, and that by using the properties of exponents we can better understand what makes some functions more complex than others.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:38:21</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0009.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>9</itunes:episode><itunes:title>Algebraic Data Types: Exponents</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0009-720p-9fc9e43998e74203a5027accecc67657.mp4" length="273387721" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0009-720p-9fc9e43998e74203a5027accecc67657.mp4" length="273387721" type="video/mp4" medium="video"><media:title>Algebraic Data Types: Exponents</media:title></media:content></item><item><title>Getters and Key Paths</title><pubDate>Mon, 19 Mar 2018 09:57:03 +0000</pubDate><link>https://www.pointfree.co/episodes/ep8-getters-and-key-paths</link><guid>https://www.pointfree.co/episodes/ep8-getters-and-key-paths</guid><description>Key paths aren’t just for setting. They also assist in getting values inside nested structures in a composable way. This can be powerful, allowing us to make the Swift standard library more expressive with no boilerplate.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Key paths aren’t just for setting. They also assist in getting values inside nested structures in a composable way. This can be powerful, allowing us to make the Swift standard library more expressive with no boilerplate.</itunes:subtitle><itunes:summary>Key paths aren’t just for setting. They also assist in getting values inside nested structures in a composable way. This can be powerful, allowing us to make the Swift standard library more expressive with no boilerplate.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:28:31</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0008.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>8</itunes:episode><itunes:title>Getters and Key Paths</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0008-720p-56bdb9bce459438b9a344bd60bae4acd.mp4" length="227334456" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0008-720p-56bdb9bce459438b9a344bd60bae4acd.mp4" length="227334456" type="video/mp4" medium="video"><media:title>Getters and Key Paths</media:title></media:content></item><item><title>Setters and Key Paths</title><pubDate>Mon, 12 Mar 2018 09:57:03 +0000</pubDate><link>https://www.pointfree.co/episodes/ep7-setters-and-key-paths</link><guid>https://www.pointfree.co/episodes/ep7-setters-and-key-paths</guid><description>This week we explore how functional setters can be used with the types we build and use everyday. It turns out that Swift generates a whole set of functional setters for you to use, but it can be hard to see just how powerful they are without a little help.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>This week we explore how functional setters can be used with the types we build and use everyday. It turns out that Swift generates a whole set of functional setters for you to use, but it can be hard to see just how powerful they are without a little help.</itunes:subtitle><itunes:summary>This week we explore how functional setters can be used with the types we build and use everyday. It turns out that Swift generates a whole set of functional setters for you to use, but it can be hard to see just how powerful they are without a little help.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:31:12</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0007.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>7</itunes:episode><itunes:title>Setters and Key Paths</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0007-720p-3b341d9faa0b42f199be802cc20451c8.mp4" length="294033356" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0007-720p-3b341d9faa0b42f199be802cc20451c8.mp4" length="294033356" type="video/mp4" medium="video"><media:title>Setters and Key Paths</media:title></media:content></item><item><title>Functional Setters</title><pubDate>Mon, 05 Mar 2018 10:57:03 +0000</pubDate><link>https://www.pointfree.co/episodes/ep6-functional-setters</link><guid>https://www.pointfree.co/episodes/ep6-functional-setters</guid><description>The programs we write can be reduced to transforming data from one form into another. We’re used to transforming this data imperatively, with setters. There’s a strange world of composition hiding here in plain sight, and it has a surprising link to a familiar functional friend.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>The programs we write can be reduced to transforming data from one form into another. We’re used to transforming this data imperatively, with setters. There’s a strange world of composition hiding here in plain sight, and it has a surprising link to a familiar functional friend.</itunes:subtitle><itunes:summary>The programs we write can be reduced to transforming data from one form into another. We’re used to transforming this data imperatively, with setters. There’s a strange world of composition hiding here in plain sight, and it has a surprising link to a familiar functional friend.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:20:38</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0006.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>6</itunes:episode><itunes:title>Functional Setters</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0006-720p-a7b3a96ac5f1416bab04e1fba4c50363.mp4" length="199277712" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0006-720p-a7b3a96ac5f1416bab04e1fba4c50363.mp4" length="199277712" type="video/mp4" medium="video"><media:title>Functional Setters</media:title></media:content></item><item><title>Higher-Order Functions</title><pubDate>Mon, 26 Feb 2018 13:57:03 +0000</pubDate><link>https://www.pointfree.co/episodes/ep5-higher-order-functions</link><guid>https://www.pointfree.co/episodes/ep5-higher-order-functions</guid><description>Most of the time we interact with code we did not write, and it doesn’t always play nicely with the types of compositions we have developed in previous episodes. We explore how higher-order functions can help unlock even more composability in our everyday code.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Most of the time we interact with code we did not write, and it doesn’t always play nicely with the types of compositions we have developed in previous episodes. We explore how higher-order functions can help unlock even more composability in our everyday code.</itunes:subtitle><itunes:summary>Most of the time we interact with code we did not write, and it doesn’t always play nicely with the types of compositions we have developed in previous episodes. We explore how higher-order functions can help unlock even more composability in our everyday code.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:22:30</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0005.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>5</itunes:episode><itunes:title>Higher-Order Functions</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0005-720p-2fd9b154a1ce4648b9cb96563dbf3250.mp4" length="216381579" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0005-720p-2fd9b154a1ce4648b9cb96563dbf3250.mp4" length="216381579" type="video/mp4" medium="video"><media:title>Higher-Order Functions</media:title></media:content></item><item><title>Algebraic Data Types</title><pubDate>Mon, 19 Feb 2018 13:12:31 +0000</pubDate><link>https://www.pointfree.co/episodes/ep4-algebraic-data-types</link><guid>https://www.pointfree.co/episodes/ep4-algebraic-data-types</guid><description>What does the Swift type system have to do with algebra? A lot! We’ll begin to explore this correspondence and see how it can help us create type-safe data structures that can catch runtime errors at compile time.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>What does the Swift type system have to do with algebra? A lot! We’ll begin to explore this correspondence and see how it can help us create type-safe data structures that can catch runtime errors at compile time.</itunes:subtitle><itunes:summary>What does the Swift type system have to do with algebra? A lot! We’ll begin to explore this correspondence and see how it can help us create type-safe data structures that can catch runtime errors at compile time.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:36:12</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0004.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>4</itunes:episode><itunes:title>Algebraic Data Types</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0004-720p-062b964b22b44488bbbd4683988548c3.mp4" length="194777227" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0004-720p-062b964b22b44488bbbd4683988548c3.mp4" length="194777227" type="video/mp4" medium="video"><media:title>Algebraic Data Types</media:title></media:content></item><item><title>UIKit Styling with Functions</title><pubDate>Mon, 12 Feb 2018 13:12:31 +0000</pubDate><link>https://www.pointfree.co/episodes/ep3-uikit-styling-with-functions</link><guid>https://www.pointfree.co/episodes/ep3-uikit-styling-with-functions</guid><description>We bring tools from previous episodes down to earth and apply them to an everyday task: UIKit styling. Plain functions unlock worlds of composability and reusability in styling of UI components. Have we finally solved the styling problem?</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>We bring tools from previous episodes down to earth and apply them to an everyday task: UIKit styling. Plain functions unlock worlds of composability and reusability in styling of UI components. Have we finally solved the styling problem?</itunes:subtitle><itunes:summary>We bring tools from previous episodes down to earth and apply them to an everyday task: UIKit styling. Plain functions unlock worlds of composability and reusability in styling of UI components. Have we finally solved the styling problem?</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:27:14</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0003.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>3</itunes:episode><itunes:title>UIKit Styling with Functions</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0003-720p-db25f205768d4cbd8c6e698099e3942e.mp4" length="324873341" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0003-720p-db25f205768d4cbd8c6e698099e3942e.mp4" length="324873341" type="video/mp4" medium="video"><media:title>UIKit Styling with Functions</media:title></media:content></item><item><title>Side Effects</title><pubDate>Mon, 05 Feb 2018 06:11:09 +0000</pubDate><link>https://www.pointfree.co/episodes/ep2-side-effects</link><guid>https://www.pointfree.co/episodes/ep2-side-effects</guid><description>Side effects: can’t live with ’em; can’t write a program without ’em. Let’s explore a few kinds of side effects we encounter every day, why they make code difficult to reason about and test, and how we can control them without losing composition.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Side effects: can’t live with ’em; can’t write a program without ’em. Let’s explore a few kinds of side effects we encounter every day, why they make code difficult to reason about and test, and how we can control them without losing composition.</itunes:subtitle><itunes:summary>Side effects: can’t live with ’em; can’t write a program without ’em. Let’s explore a few kinds of side effects we encounter every day, why they make code difficult to reason about and test, and how we can control them without losing composition.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:44:36</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0002.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>2</itunes:episode><itunes:title>Side Effects</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0002-720p-161f2904f8a24b33b21695df3555cfae.mp4" length="238376744" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0002-720p-161f2904f8a24b33b21695df3555cfae.mp4" length="238376744" type="video/mp4" medium="video"><media:title>Side Effects</media:title></media:content></item><item><title>Functions</title><pubDate>Mon, 29 Jan 2018 06:11:09 +0000</pubDate><link>https://www.pointfree.co/episodes/ep1-functions</link><guid>https://www.pointfree.co/episodes/ep1-functions</guid><description>Our first episode is all about functions! We talk a bit about what makes functions special, contrasting them with the way we usually write code, and have some exploratory discussions about operators and composition.</description><dc:creator>Brandon Williams</dc:creator><dc:creator>Stephen Celis</dc:creator><itunes:author>Brandon Williams &amp; Stephen Celis</itunes:author><itunes:subtitle>Our first episode is all about functions! We talk a bit about what makes functions special, contrasting them with the way we usually write code, and have some exploratory discussions about operators and composition.</itunes:subtitle><itunes:summary>Our first episode is all about functions! We talk a bit about what makes functions special, contrasting them with the way we usually write code, and have some exploratory discussions about operators and composition.</itunes:summary><itunes:explicit>no</itunes:explicit><itunes:duration>00:20:19</itunes:duration><itunes:image>https://d3rccdn33rt8ze.cloudfront.net/episodes/0001.jpeg</itunes:image><itunes:season>1</itunes:season><itunes:episode>1</itunes:episode><itunes:title>Functions</itunes:title><itunes:episodeType>full</itunes:episodeType><enclosure url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0001-720p-b4472975549c4a0b9a3e0d1eba144ec5.mp4" length="197667168" type="video/mp4"></enclosure><media:content url="https://pointfreeco-episodes-processed.s3.amazonaws.com/0001-720p-b4472975549c4a0b9a3e0d1eba144ec5.mp4" length="197667168" type="video/mp4" medium="video"><media:title>Functions</media:title></media:content></item></channel></rss>