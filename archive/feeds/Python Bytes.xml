<?xml version="1.0" encoding="UTF-8"?>
<rss
        xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
        xmlns:podcast="https://podcastindex.org/namespace/1.0"
        xmlns:atom="http://www.w3.org/2005/Atom"
        version="2.0">
    <channel>
        <title>Python Bytes</title>
        <itunes:subtitle>Developer headlines delivered directly to your earbuds</itunes:subtitle>
        <itunes:summary>Python Bytes is a weekly podcast hosted by Michael Kennedy and Brian Okken. The show is a short discussion on the headlines and noteworthy news in the Python, developer, and data science space.</itunes:summary>
        <description>Python Bytes is a weekly podcast hosted by Michael Kennedy and Brian Okken. The show is a short discussion on the headlines and noteworthy news in the Python, developer, and data science space.</description>
        <link>https://pythonbytes.fm/</link>
        <language>en-us</language>
        <copyright>Copyright 2016-2025</copyright>
        <lastBuildDate>Mon, 23 Jun 2025 00:00:00 -0800</lastBuildDate>
        <pubDate>Mon, 23 Jun 2025 00:00:00 -0800</pubDate>
        <docs>https://pythonbytes.fm</docs>
        <webMaster>michael@pythonbytes.fm (Michael Kennedy)</webMaster>
        <ttl>60</ttl>
        <itunes:author>Michael Kennedy and Brian Okken</itunes:author>
        <itunes:owner>
            <itunes:name>Michael Kennedy</itunes:name>
            <itunes:email>mikeckennedy@gmail.com</itunes:email>
        </itunes:owner>
        <itunes:explicit>false</itunes:explicit>
        <itunes:image href="https://cdn.pythonbytes.fm/static/img/podcast-theme-img_1400.jpg"/>
        <atom:link href="https://pythonbytes.fm/episodes/rss" rel="self" type="application/rss+xml"/>
        <itunes:category text="Technology"/>
        <itunes:category text="News">
            <itunes:category text="Tech News"/>
        </itunes:category>
        <itunes:type>episodic</itunes:type>
        <podcast:locked owner="mikeckennedy@gmail.com">yes</podcast:locked>
        <podcast:guid>c39e616f-74f1-52c5-90fb-ac094bffd068</podcast:guid>
        <item>
            <title>#437 Python Language Summit 2025 Highlights</title>
            <link>https://pythonbytes.fm/episodes/show/437/python-language-summit-2025-highlights</link>
            <guid isPermaLink="false">a1b2cb9d-eb7a-4c7e-9e3e-1151403286b1</guid>
            <enclosure
                    url="https://pythonbytes.fm/episodes/download/437/python-language-summit-2025-highlights.mp3"
                    length="33233174"
                    type="audio/mpeg"/>
            <itunes:category text="Technology"/>
            <itunes:category text="News">
                <itunes:category text="Tech News"/>
            </itunes:category>
            <pubDate>Mon, 23 Jun 2025 00:00:00 -0800</pubDate>
            <itunes:author>Michael Kennedy and Brian Okken</itunes:author>
            <itunes:title>#437: Python Language Summit 2025 Highlights</itunes:title>
            <itunes:episode>437</itunes:episode>
            <itunes:explicit>false</itunes:explicit>
            <itunes:subtitle></itunes:subtitle>
            <itunes:summary><![CDATA[Topics include The Python Language Summit 2025, Fixing Python Properties, complexipy, and juvio.]]></itunes:summary>
            <itunes:duration>00:34:28</itunes:duration>
            <itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide, podcast, open source, news, headlines, education, software developer, data science, science, cloud computing</itunes:keywords>
            <description><![CDATA[<strong>Topics covered in this episode:</strong><br>

<ul>
	<li><em>* <a href="https://pyfound.blogspot.com/2025/06/python-language-summit-2025.html?featured_on=pythonbytes">The Python Language Summit 2025</a></em>*</li>
<li><strong><a href="https://willmcgugan.github.io/fixing-python-properties/?featured_on=pythonbytes">Fixing Python Properties</a></strong></li>
<li><em>* <a href="https://github.com/rohaquinlop/complexipy?featured_on=pythonbytes">complexipy</a></em>*</li>
<li><em>* <a href="https://github.com/OKUA1/juvio?featured_on=pythonbytes">juvio</a></em>*</li>
<li><strong>Extras</strong></li>
<li><strong>Joke</strong></li>

</ul><a href='https://www.youtube.com/watch?v=sOJf3iBM6Tg' style='font-weight: bold;'data-umami-event="Livestream-Past" data-umami-event-episode="437">Watch on YouTube</a><br>

<p><strong>About the show</strong></p>

<p><strong>Sponsored by Posit:</strong> <a href="https://pythonbytes.fm/connect">pythonbytes.fm/connect</a></p>

<p><strong>Connect with the hosts</strong></p>

<ul>
<li>Michael: <a href="https://fosstodon.org/@mkennedy">@mkennedy@fosstodon.org</a> / <a href="https://bsky.app/profile/mkennedy.codes?featured_on=pythonbytes">@mkennedy.codes</a> (bsky)</li>
<li>Brian: <a href="https://fosstodon.org/@brianokken">@brianokken@fosstodon.org</a> / <a href="https://bsky.app/profile/brianokken.bsky.social?featured_on=pythonbytes">@brianokken.bsky.social</a></li>
<li>Show: <a href="https://fosstodon.org/@pythonbytes">@pythonbytes@fosstodon.org</a> / <a href="https://bsky.app/profile/pythonbytes.fm">@pythonbytes.fm</a> (bsky)</li>
</ul>

<p>Join us on YouTube at <a href="https://pythonbytes.fm/stream/live"><strong>pythonbytes.fm/live</strong></a> to be part of the audience. Usually <strong>Monday</strong> at 10am PT. Older video versions available there too.</p>

<p>Finally, if you want an artisanal, hand-crafted digest of every week of the show notes in email form? Add your name and email to <a href="https://pythonbytes.fm/friends-of-the-show">our friends of the show list</a>, we'll never share it.</p>

<p><strong>Michael #1: <a href="https://pyfound.blogspot.com/2025/06/python-language-summit-2025.html?featured_on=pythonbytes">The Python Language Summit 2025</a></strong></p>

<ul>
<li>Write up by Seth Michael Larson</li>
<li><a href="https://pyfound.blogspot.com/2025/06/python-language-summit-2025-how-can-we-make-breaking-changes-less-painful.html?featured_on=pythonbytes">How can we make breaking changes less painful?</a>: talk by Itamar Oren</li>
<li><a href="https://pyfound.blogspot.com/2025/06/python-language-summit-2025-uncontentious-talk-about-contention.html?featured_on=pythonbytes">An Uncontentious Talk about Contention</a>: talk by Mark Shannon</li>
<li><a href="https://pyfound.blogspot.com/2025/06/python-language-summit-2025-state-of-free-threaded-python.html?featured_on=pythonbytes">State of Free-Threaded Python</a>: talk by Matt Page</li>
<li><a href="https://pyfound.blogspot.com/2025/06/python-language-summit-2025-fearless-concurrency.html?featured_on=pythonbytes">Fearless Concurrency</a>: talk by Matthew Parkinson, Tobias Wrigstad, and Fridtjof Stoldt</li>
<li><a href="https://pyfound.blogspot.com/2025/06/python-language-summit-2025-challenges-of-the-steering-council.html?featured_on=pythonbytes">Challenges of the Steering Council</a>: talk by Eric Snow</li>
<li><a href="https://pyfound.blogspot.com/2025/06/python-language-summit-2025-docs-editorial-board.html?featured_on=pythonbytes">Updates from the Python Docs Editorial Board</a>: talk by Mariatta</li>
<li><a href="https://pyfound.blogspot.com/2025/06/python-language-summit-2025-packaging-governance-process.html?featured_on=pythonbytes">PEP 772 - Packaging Governance Process</a>: talk by Barry Warsaw and Pradyun Gedam</li>
<li><a href="https://pyfound.blogspot.com/2025/06/python-language-summit-2025-python-on-mobile.html?featured_on=pythonbytes">Python on Mobile - Next Steps</a>: talk by Russell Keith-Magee</li>
<li><a href="https://pyfound.blogspot.com/2025/06/python-language-summit-2025-what-do-core-developers-want-from-rust.html?featured_on=pythonbytes">What do Python core developers want from Rust?</a>: talk by David Hewitt</li>
<li><a href="https://pyfound.blogspot.com/2025/06/python-language-summit-upstreaming-the-pyodide-js-ffi.html?featured_on=pythonbytes">Upstreaming the Pyodide JS FFI</a>: talk by Hood Chatham</li>
<li><a href="https://pyfound.blogspot.com/2025/06/python-language-summit-2025-lightning-talks.html?featured_on=pythonbytes">Lightning Talks</a>: talks by Martin DeMello, Mark Shannon, Noah Kim, Gregory Smith, Guido van Rossum, Pablo Galindo Salgado, and Lysandros Nikolaou</li>
</ul>

<p><strong>Brian #2:</strong> <a href="https://willmcgugan.github.io/fixing-python-properties/?featured_on=pythonbytes">Fixing Python Properties</a></p>

<ul>
<li>Will McGugan</li>
<li>“Python properties work well with type checkers such Mypy and friends. … The type of your property is taken from the getter only. Even if your setter accepts different types, the type checker will complain on assignment.”</li>
<li>Will describes a way to get around this and make type checkers happy.</li>
<li>He replaces <code>@property</code> with a descriptor. It’s a cool technique.</li>
<li>I also like the way Will is allowing different ways to use a property such that it’s more convenient for the user. This is a cool deverloper usability trick.</li>
</ul>

<p><strong>Brian #3: <a href="https://github.com/rohaquinlop/complexipy?featured_on=pythonbytes">complexipy</a></strong></p>

<ul>
<li>Calculates the cognitive complexity of Python files, written in Rust.</li>
<li>Based on the cognitive complexity measurement described in a white paper by Sonar</li>
<li>Cognitive complexity builds on the idea of cyclomatic complexity.</li>
<li>Cyclomatic complexity was intended to measure the “testability and maintainability” of the control flow of a module. Sonar argues that it’s fine for testability, but doesn’t do well with measuring the “maintainability” part. So they came up with a new measure.</li>
<li>Cognitive complexity is intended to reflects the relative difficulty of understanding, and therefore of maintaining methods, classes, and applications.</li>
<li>complexipy essentially does that, but also has a really nice color output.</li>
<li>Note: at the very least, you should be using “cyclomatic complexity”
<ul>
<li>try with <code>ruff check --select C901</code></li>
</ul></li>
<li>But also try complexipy.</li>
<li>Great for understanding which functions might be ripe for refactoring, adding more documentation, surrounding with more tests, etc.</li>
</ul>

<p><strong>Michael #4: <a href="https://github.com/OKUA1/juvio?featured_on=pythonbytes">juvio</a></strong></p>

<ul>
<li>uv kernel for Jupyter</li>
<li>⚙️ <strong>Automatic Environment Setup:</strong> When the notebook is opened, Juvio installs the dependencies automatically in an ephemeral virtual environment (using <code>uv</code>), ensuring that the notebook runs with the correct versions of the packages and Python</li>
<li>📁 <strong>Git-Friendly Format:</strong> Notebooks are converted on the fly to a script-style format using <code># %%</code> markers, making diffs and version control painless</li>
<li>Why Use Juvio?
<ul>
<li>No additional lock or requirements files are needed</li>
<li>Guaranteed reproducibility</li>
<li>Cleaner Git diffs</li>
</ul></li>
<li>Powered By
<ul>
<li><code>uv</code> – ultra-fast Python package management</li>
<li><code>PEP 723</code> – Python inline dependency standards</li>
</ul></li>
</ul>

<p><strong>Extras</strong></p>

<p>Brian:</p>

<ul>
<li><a href="https://testandcode.com?featured_on=pythonbytes">Test &amp; Code</a> in slow mode currently. But will be back with some awesome interviews.</li>
</ul>

<p><strong>Joke: <a href="https://www.youtube.com/watch?v=hwG89HH0VcM">The 0.1x Engineer</a></strong></p>

<ul>
<li>via Balázs</li>
<li>Also
<ul>
<li><a href="https://www.youtube.com/watch?v=NY2nnsAplSo&ab_channel=StormtrooperVlogs">StormTrooper vlog</a></li>
<li><a href="https://www.youtube.com/watch?v=oHYaOdIyuQA">BIGFOOT VLOG - ATTACKED BY WENDIGO!</a></li>
</ul></li>
</ul>
]]></description>
            
            <podcast:transcript url="https://pythonbytes.fm/episodes/vtt_transcript/437/python-language-summit-2025-highlights.vtt" type="text/vtt"/>
            <itunes:image href="https://cdn.pythonbytes.fm/static/img/podcast-theme-img_1400.jpg"/>
        </item>
        <item>
            <title>#436 Slow tests go last</title>
            <link>https://pythonbytes.fm/episodes/show/436/slow-tests-go-last</link>
            <guid isPermaLink="false">4627868e-2518-470a-b6af-3c0639b75fed</guid>
            <enclosure
                    url="https://pythonbytes.fm/episodes/download/436/slow-tests-go-last.mp3"
                    length="35418046"
                    type="audio/mpeg"/>
            <itunes:category text="Technology"/>
            <itunes:category text="News">
                <itunes:category text="Tech News"/>
            </itunes:category>
            <pubDate>Mon, 16 Jun 2025 00:00:00 -0800</pubDate>
            <itunes:author>Michael Kennedy and Brian Okken</itunes:author>
            <itunes:title>#436: Slow tests go last</itunes:title>
            <itunes:episode>436</itunes:episode>
            <itunes:explicit>false</itunes:explicit>
            <itunes:subtitle></itunes:subtitle>
            <itunes:summary><![CDATA[Topics include , typed-ffmpeg, pyleak, and Optimizing Test Execution: Running live_server Tests Last with pytest.]]></itunes:summary>
            <itunes:duration>00:36:43</itunes:duration>
            <itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide, podcast, open source, news, headlines, education, software developer, data science, science, cloud computing</itunes:keywords>
            <description><![CDATA[<strong>Topics covered in this episode:</strong><br>

<ul>
	<li><em>* Free-threaded Python no longer “experimental” as of Python 3.14</em>*</li>
<li><strong><a href="https://github.com/livingbio/typed-ffmpeg?featured_on=pythonbytes">typed-ffmpeg</a></strong></li>
<li><strong><a href="https://github.com/deepankarm/pyleak?featured_on=pythonbytes">pyleak</a></strong></li>
<li><em>* <a href="https://timonweb.com/django/optimizing-test-execution-running-live_server-tests-last-with-pytest/?featured_on=pythonbytes">Optimizing Test Execution: Running live_server Tests Last with pytest</a></em>*</li>
<li><strong>Extras</strong></li>
<li><strong>Joke</strong></li>

</ul><a href='https://www.youtube.com/watch?v=Mt7X3Q54lU4' style='font-weight: bold;'data-umami-event="Livestream-Past" data-umami-event-episode="436">Watch on YouTube</a><br>

<p><strong>About the show</strong></p>

<p>Sponsored by <strong>PropelAuth</strong>: <a href="https://pythonbytes.fm/propelauth66">pythonbytes.fm/propelauth66</a></p>

<p><strong>Connect with the hosts</strong></p>

<ul>
<li>Michael: <a href="https://fosstodon.org/@mkennedy">@mkennedy@fosstodon.org</a> / <a href="https://bsky.app/profile/mkennedy.codes?featured_on=pythonbytes">@mkennedy.codes</a> (bsky)</li>
<li>Brian: <a href="https://fosstodon.org/@brianokken">@brianokken@fosstodon.org</a> / <a href="https://bsky.app/profile/brianokken.bsky.social?featured_on=pythonbytes">@brianokken.bsky.social</a></li>
<li>Show: <a href="https://fosstodon.org/@pythonbytes">@pythonbytes@fosstodon.org</a> / <a href="https://bsky.app/profile/pythonbytes.fm">@pythonbytes.fm</a> (bsky)</li>
</ul>

<p>Join us on YouTube at <a href="https://pythonbytes.fm/stream/live"><strong>pythonbytes.fm/live</strong></a> to be part of the audience. Usually <strong>Monday</strong> at 10am PT. Older video versions available there too.</p>

<p>Finally, if you want an artisanal, hand-crafted digest of every week of the show notes in email form? Add your name and email to <a href="https://pythonbytes.fm/friends-of-the-show">our friends of the show list</a>, we'll never share it.</p>

<p><strong>Brian #1: Free-threaded Python no longer “experimental” as of Python 3.14</strong></p>

<ul>
<li>“PEP 779 ("Criteria for supported status for free-threaded Python") has been accepted, which means free-threaded Python is now a supported build!” <a href="https://fosstodon.org/@hugovk@mastodon.social/114689715316210829">- Hugo van Kemenade</a></li>
<li><a href="https://peps.python.org/pep-0779/?featured_on=pythonbytes">PEP 779 – Criteria for supported status for free-threaded Python</a></li>
<li>As noted in the <a href="https://discuss.python.org/t/pep-779-criteria-for-supported-status-for-free-threaded-python/84319/123?featured_on=pythonbytes">discussion of PEP 779</a>, “The Steering Council (SC) approves PEP 779, with the effect of removing the “experimental” tag from the free-threaded build of Python 3.14.”</li>
<li>We are in Phase II then.</li>
<li>“We are confident that the project is on the right path, and we appreciate the continued dedication from everyone working to make free-threading ready for broader adoption across the Python community.”</li>
<li>“Keep in mind that any decision to transition to Phase III, with free-threading as the default or sole build of Python is still undecided, and dependent on many factors both within CPython itself and the community. We leave that decision for the future.”</li>
<li>How long will all this take? According to Thomas Wouters, <a href="https://social.coop/@Yhg1s/114692495471337607?featured_on=pythonbytes">a few years, at least</a>: “In other words: it'll be a few years at least. It can't happen before 3.16 (because we won't have Stable ABI support until 15) and may well take longer.”</li>
</ul>

<p><strong>Michael #2:</strong> <a href="https://github.com/livingbio/typed-ffmpeg?featured_on=pythonbytes">typed-ffmpeg</a></p>

<ul>
<li><p><strong>typed-ffmpeg</strong> offers a modern, Pythonic interface to FFmpeg, providing extensive support for complex filters with detailed typing and documentation.</p></li>
<li><p>Inspired by ffmpeg-python, this package enhances functionality by addressing common limitations, such as lack of IDE integration and comprehensive typing, while also introducing new features like JSON serialization of filter graphs and automatic FFmpeg validation.</p></li>
<li><p>Features :</p>

<ul>
<li><strong>Zero Dependencies:</strong> Built purely with the Python standard library, ensuring maximum compatibility and security.</li>
<li><strong>User-Friendly:</strong> Simplifies the construction of filter graphs with an intuitive Pythonic interface.</li>
<li><strong>Comprehensive FFmpeg Filter Support:</strong> Out-of-the-box support for most FFmpeg filters, with IDE auto-completion.</li>
<li><strong>Integrated Documentation:</strong> In-line docstrings provide immediate reference for filter usage, reducing the need to consult external documentation.</li>
<li><strong>Robust Typing:</strong> Offers static and dynamic type checking, enhancing code reliability and development experience.</li>
<li><strong>Filter Graph Serialization:</strong> Enables saving and reloading of filter graphs in JSON format for ease of use and repeatability.</li>
<li><strong>Graph Visualization:</strong> Leverages graphviz for visual representation, aiding in understanding and debugging.</li>
<li><strong>Validation and Auto-correction:</strong> Assists in identifying and fixing errors within filter graphs.</li>
<li><strong>Input and Output Options Support:</strong> Provide a more comprehensive interface for input and output options, including support for additional codecs and formats.</li>
<li><strong>Partial Evaluation:</strong> Enhance the flexibility of filter graphs by enabling partial evaluation, allowing for modular construction and reuse.</li>
<li><strong>Media File Analysis:</strong> Built-in support for analyzing media files using FFmpeg's ffprobe utility, providing detailed metadata extraction with both dictionary and dataclass interfaces.</li>
</ul></li>
</ul>

<p><strong>Michael #3:</strong> <a href="https://github.com/deepankarm/pyleak?featured_on=pythonbytes">pyleak</a></p>

<ul>
<li>Detect leaked asyncio tasks, threads, and event loop blocking with stack trace in Python. Inspired by goleak.</li>
<li>Use as context managers or function dectorators</li>
<li>When using no_task_leaks, you get detailed stack trace information showing exactly where leaked tasks are executing and where they were created.</li>
<li>Even has great examples and a pytest plugin.</li>
</ul>

<p><strong>Brian #4: <a href="https://timonweb.com/django/optimizing-test-execution-running-live_server-tests-last-with-pytest/?featured_on=pythonbytes">Optimizing Test Execution: Running live_server Tests Last with pytest</a></strong></p>

<ul>
<li><p>Tim Kamanin</p></li>
<li><p>“When working with <strong>Django</strong> applications, it's common to have a mix of fast unit tests and slower end-to-end (E2E) tests that use p<strong>ytest</strong>'s <code>live_server</code> fixture and browser automation tools like <strong>Playwright</strong> or <strong>Selenium</strong>. ”</p></li>
<li><p>Tim is running E2E tests last for</p>

<ul>
<li>Faster feedback from quick tests</li>
<li>To not tie up resources early in the test suite.</li>
</ul></li>
<li><p>He did this with</p>

<ul>
<li><p>custom “e2e” marker</p></li>
<li><p>Implementing a </p>

<pre><code>pytest_collection_modifyitems
</code></pre>

<p>hook function to look for tests using the </p>

<pre><code>live_server
</code></pre>

<p>fixture, and for them</p>

<ul>
<li>automatically add the <code>e2e</code> marker to those tests</li>
<li>move those tests to the end</li>
</ul></li>
</ul></li>
<li><p>The reason for the marker is to be able to</p>

<ul>
<li>Just run e2e tests with <code>-m e2e</code></li>
<li>Avoid running them sometimes with <code>-m "not e2e"</code></li>
</ul></li>
<li><p>Cool small writeup.</p>

<ul>
<li>The technique works for any system that has some tests that are slower or resource bound based on a particular fixture or set of fixtures.</li>
</ul></li>
</ul>

<p><strong>Extras</strong></p>

<p>Brian:</p>

<ul>
<li><a href="https://discuss.python.org/t/is-free-threading-our-only-option/91775?featured_on=pythonbytes">Is Free-Threading Our Only Option?</a> - Interesting discussion started by Eric Snow and recommended by John Hagen</li>
<li><a href="https://hugovk.dev/blog/2025/free-threaded-python-on-github-actions/?featured_on=pythonbytes">Free-threaded Python on GitHub Actions</a> - How to add FT tests to your projects, by Hugo van Kemenade</li>
</ul>

<p>Michael:</p>

<ul>
<li>New course! <a href="https://training.talkpython.fm/courses/llm-building-blocks-for-python?featured_on=pythonbytes">LLM Building Blocks in Python</a></li>
<li><a href="https://talkpython.fm/blog/posts/deep-dive-retrospective-at-talk-python/?featured_on=pythonbytes">Talk Python Deep Dives Complete: 600K Words of Talk Python Insights</a></li>
<li>.folders on Linux
<ul>
<li>Write up on <a href="https://blobs.pythonbytes.fm/xdg-config-home-v2.html">XDG for Python devs</a>.</li>
</ul></li>
<li><a href="https://blobs.pythonbytes.fm/keep-pulling-back-in.jpg">They keep pulling me back</a> - <a href="https://help.openai.com/en/articles/9624314-model-release-notes?featured_on=pythonbytes">ChatGPT Pro with o3-pro</a></li>
<li>Python Bytes is the <a href="https://goodpods.com/leaderboard/top-100-shows-by-category/news/tech-news?period=month#67232899">#1 Python news podcast and #17 of all tech news podcasts</a>.</li>
<li><a href="https://pythoninsider.blogspot.com/2025/06/python-3134-31211-31113-31018-and-3923.html?featured_on=pythonbytes">Python 3.13.4, 3.12.11, 3.11.13, 3.10.18 and 3.9.23 are now available</a></li>
<li><a href="https://pythoninsider.blogspot.com/2025/06/python-3135-is-now-available.html?featured_on=pythonbytes">Python 3.13.5 is now available!</a></li>
</ul>

<p><strong>Joke:</strong> <a href="https://x.com/PR0GRAMMERHUM0R/status/1930655881718382721?featured_on=pythonbytes">Naming is hard</a></p>
]]></description>
            
            <podcast:transcript url="https://pythonbytes.fm/episodes/vtt_transcript/436/slow-tests-go-last.vtt" type="text/vtt"/>
            <itunes:image href="https://cdn.pythonbytes.fm/static/img/podcast-theme-img_1400.jpg"/>
        </item>
        <item>
            <title>#435 Stop with .folders in my ~/</title>
            <link>https://pythonbytes.fm/episodes/show/435/stop-with-.folders-in-my</link>
            <guid isPermaLink="false">8496cc05-7d90-4627-8ad6-711c706a72b5</guid>
            <enclosure
                    url="https://pythonbytes.fm/episodes/download/435/stop-with-.folders-in-my.mp3"
                    length="24681687"
                    type="audio/mpeg"/>
            <itunes:category text="Technology"/>
            <itunes:category text="News">
                <itunes:category text="Tech News"/>
            </itunes:category>
            <pubDate>Mon, 09 Jun 2025 00:00:00 -0800</pubDate>
            <itunes:author>Michael Kennedy and Brian Okken</itunes:author>
            <itunes:title>#435: Stop with .folders in my ~/</itunes:title>
            <itunes:episode>435</itunes:episode>
            <itunes:explicit>false</itunes:explicit>
            <itunes:subtitle></itunes:subtitle>
            <itunes:summary><![CDATA[Topics include platformdirs, poethepoet, Python Pandas Ditches NumPy for Speedier PyArrow, and pointblank: Data validation made beautiful and powerful.]]></itunes:summary>
            <itunes:duration>00:25:34</itunes:duration>
            <itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide, podcast, open source, news, headlines, education, software developer, data science, science, cloud computing</itunes:keywords>
            <description><![CDATA[<strong>Topics covered in this episode:</strong><br>

<ul>
	<li><a href="https://pypi.org/project/platformdirs/?featured_on=pythonbytes"><strong>platformdirs</strong></a></li>
<li><a href="https://poethepoet.natn.io/index.html?featured_on=pythonbytes"><strong>poethepoet</strong></a> <strong>-</strong> <strong>“</strong>Poe the Poet is a batteries included task runner that works well with poetry or with uv.”</li>
<li><strong><a href="https://thenewstack.io/python-pandas-ditches-numpy-for-speedier-pyarrow/?featured_on=pythonbytes">Python Pandas Ditches NumPy for Speedier PyArrow</a></strong></li>
<li><a href="https://posit-dev.github.io/pointblank/?featured_on=pythonbytes"><strong>pointblank:</strong> </a><a href="https://posit-dev.github.io/pointblank/?featured_on=pythonbytes"><em>Data validation made beautiful and powerful</em></a></li>
<li><strong>Extras</strong></li>
<li><strong>Joke</strong></li>

</ul><a href='https://www.youtube.com/watch?v=noyERa6SccQ' style='font-weight: bold;'data-umami-event="Livestream-Past" data-umami-event-episode="435">Watch on YouTube</a><br>

<p><strong>About the show</strong></p>

<p>Sponsored by us! Support our work through:</p>

<ul>
<li>Our <a href="https://training.talkpython.fm/?featured_on=pythonbytes"><strong>courses at Talk Python Training</strong></a></li>
<li><a href="https://courses.pythontest.com/p/the-complete-pytest-course?featured_on=pythonbytes"><strong>The Complete pytest Course</strong></a></li>
<li><a href="https://www.patreon.com/pythonbytes"><strong>Patreon Support</strong></a><a href="https://www.patreon.com/pythonbytes"><strong>ers</strong></a></li>
</ul>

<p><strong>Connect with the hosts</strong></p>

<ul>
<li>Michael: <a href="https://fosstodon.org/@mkennedy"><strong>@mkennedy@fosstodon.org</strong></a> <strong>/</strong> <a href="https://bsky.app/profile/mkennedy.codes?featured_on=pythonbytes"><strong>@mkennedy.codes</strong></a> <strong>(bsky)</strong></li>
<li>Brian: <a href="https://fosstodon.org/@brianokken"><strong>@brianokken@fosstodon.org</strong></a> <strong>/</strong> <a href="https://bsky.app/profile/brianokken.bsky.social?featured_on=pythonbytes"><strong>@brianokken.bsky.social</strong></a></li>
<li>Show: <a href="https://fosstodon.org/@pythonbytes"><strong>@pythonbytes@fosstodon.org</strong></a> <strong>/</strong> <a href="https://bsky.app/profile/pythonbytes.fm"><strong>@pythonbytes.fm</strong></a> <strong>(bsky)</strong></li>
</ul>

<p>Join us on YouTube at <a href="https://pythonbytes.fm/stream/live"><strong>pythonbytes.fm/live</strong></a> to be part of the audience. Usually <strong>Monday</strong> at 10am PT. Older video versions available there too.</p>

<p>Finally, if you want an artisanal, hand-crafted digest of every week of the show notes in email form? Add your name and email to <a href="https://pythonbytes.fm/friends-of-the-show">our friends of the show list</a>, we'll never share it.</p>

<p><strong>Michael #1:</strong> <a href="https://pypi.org/project/platformdirs/?featured_on=pythonbytes"><strong>platformdirs</strong></a></p>

<ul>
<li>A small Python module for determining appropriate platform-specific dirs, e.g. a "user data dir".</li>
<li><strong>Why the community moved on from</strong> <strong>appdirs</strong> <strong>to</strong> <strong>platformdirs</strong></li>
<li>At AppDirs:
<ul>
<li>Note: This project has been officially deprecated. You may want to check out <a href="https://pypi.org/project/platformdirs/?featured_on=pythonbytes">pypi.org/project/platformdirs/</a> which is a more active fork of appdirs. Thanks to everyone who has used appdirs. Shout out to ActiveState for the time they gave their employees to work on this over the years.</li>
</ul></li>
<li>Better than AppDirs:
<ul>
<li><strong>Works today, works tomorrow</strong> – new Python releases sometimes change low-level APIs (win32com, pathlib, Apple sandbox rules). platformdirs tracks those changes so your code keeps running.</li>
<li><strong>First-class typing</strong> – no more types-appdirs stubs; editors autocomplete paths as Path objects.</li>
<li><strong>Richer directory set</strong> – if you need a user’s <strong>Downloads</strong> folder or a per-session <strong>runtime dir</strong>, there’s a helper for it.</li>
<li><strong>Cleaner internals</strong> – rewritten to use pathlib, caching, and extensive test coverage; all platforms are exercised in CI.</li>
<li><strong>Community stewardship</strong> – the project lives in the PyPA orbit and gets security/compatibility patches quickly.</li>
</ul></li>
</ul>

<p><strong>Brian #2:</strong> <a href="https://poethepoet.natn.io/index.html?featured_on=pythonbytes"><strong>poethepoet</strong></a> <strong>-</strong> <strong>“</strong>Poe the Poet is a batteries included task runner that works well with poetry or with uv.”</p>

<ul>
<li>from <a href="https://www.linkedin.com/posts/bbelderbos_i-love-makefiles-they-save-me-time-and-help-activity-7335215074938089473-4sOm/?utm_source=share&utm_medium=member_ios&rcm=ACoAAAD3mh8BiKsgWuoxCvrNNA1YysaKpZ6oaS0&featured_on=pythonbytes">Bob Belderbos</a></li>
<li>Tasks are <a href="https://poethepoet.natn.io/tasks/index.html?featured_on=pythonbytes">easy to define</a> and are defined in pyproject.toml</li>
</ul>

<p><strong>Michael #3:</strong> <a href="https://thenewstack.io/python-pandas-ditches-numpy-for-speedier-pyarrow/?featured_on=pythonbytes">Python Pandas Ditches NumPy for Speedier PyArrow</a></p>

<ul>
<li>Pandas 3.0 will significantly boost performance by replacing NumPy with PyArrow as its default engine, enabling faster loading and reading of columnar data.</li>
<li>Recently <a href="https://talkpython.fm/episodes/show/503/the-pyarrow-revolution?featured_on=pythonbytes">talked with Reuven Lerner about this on Talk Python too</a>.</li>
<li>In the next version, v3.0, PyArrow <a href="https://pandas.pydata.org/pdeps/0010-required-pyarrow-dependency.html?featured_on=pythonbytes">will be a required dependency</a>, with <em>pyarrow.string</em> being the default type inferred for string data.</li>
<li>PyArrow is 10 times faster.</li>
<li><a href="https://arrow.apache.org/docs/python/index.html?featured_on=pythonbytes">PyArrow</a> offers <a href="https://thenewstack.io/apache-arrow-designed-accelerate-hadoop-spark-columnar-layouts-data/?featured_on=pythonbytes">columnar storage</a>, which eliminates all that computational back and forth that comes with NumPy. </li>
<li>PyArrow paves the way for running Pandas, by default, on <a href="https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html?featured_on=pythonbytes">Copy on Write</a> mode, which improves memory and performance usage.</li>
</ul>

<p><strong>Brian #4:</strong> <a href="https://posit-dev.github.io/pointblank/?featured_on=pythonbytes"><strong>pointblank:</strong> </a><a href="https://posit-dev.github.io/pointblank/?featured_on=pythonbytes"><em>Data validation made beautiful and powerful</em></a></p>

<ul>
<li>“With its … chainable API, you can … validate your data against comprehensive quality checks …” </li>
</ul>

<p><strong>Extras</strong> </p>

<p>Brian:</p>

<ul>
<li><a href="https://docs.astral.sh/ruff/rules/?featured_on=pythonbytes">Ruff rules</a></li>
<li><a href="https://old.reddit.com/r/Python/comments/1kttfst/ruff_users_what_rules_are_using_and_what_are_you/?featured_on=pythonbytes">Ruff users, what rules are using and what are you ignoring?</a></li>
<li><a href="https://www.python.org/downloads/release/python-3140b2/?featured_on=pythonbytes">Python 3.14.0b2</a> - did we already cover this?</li>
<li><a href="https://fedi.tips/transferring-your-mastodon-account-to-another-server/?featured_on=pythonbytes">Transferring your Mastodon account to another server</a>, in case anyone was <a href="https://coreysnipes.com/thoughts-on-fosstodon.html">thinking about doing that</a></li>
<li>I’m trying out <a href="https://usefathom.com?featured_on=pythonbytes">Fathom Analytics</a> for privacy friendly analytics</li>
</ul>

<p>Michael:</p>

<ul>
<li><a href="https://training.talkpython.fm/courses/polars-for-power-users?featured_on=pythonbytes">Polars for Power Users: Transform Your Data Analysis Game Course</a></li>
</ul>

<p><strong>Joke:</strong> <a href="https://x.com/PR0GRAMMERHUM0R/status/1915465792684015991?featured_on=pythonbytes"><strong>Does your dog bite</strong></a>?</p>
]]></description>
            
            <podcast:transcript url="https://pythonbytes.fm/episodes/vtt_transcript/435/stop-with-.folders-in-my.vtt" type="text/vtt"/>
            <itunes:image href="https://cdn.pythonbytes.fm/static/img/podcast-theme-img_1400.jpg"/>
        </item>
        <item>
            <title>#434 Most of OpenAI’s tech stack runs on Python</title>
            <link>https://pythonbytes.fm/episodes/show/434/most-of-openai-s-tech-stack-runs-on-python</link>
            <guid isPermaLink="false">bb51b99e-a758-4fdd-9a7f-79dfcfb2d307</guid>
            <enclosure
                    url="https://pythonbytes.fm/episodes/download/434/most-of-openai-s-tech-stack-runs-on-python.mp3"
                    length="28051852"
                    type="audio/mpeg"/>
            <itunes:category text="Technology"/>
            <itunes:category text="News">
                <itunes:category text="Tech News"/>
            </itunes:category>
            <pubDate>Mon, 02 Jun 2025 00:00:00 -0800</pubDate>
            <itunes:author>Michael Kennedy and Brian Okken</itunes:author>
            <itunes:title>#434: Most of OpenAI’s tech stack runs on Python</itunes:title>
            <itunes:episode>434</itunes:episode>
            <itunes:explicit>false</itunes:explicit>
            <itunes:subtitle></itunes:subtitle>
            <itunes:summary><![CDATA[Topics include Making PyPI’s test suite 81% faster, People aren’t talking enough about how most of OpenAI’s tech stack runs on Python, PyCon Talks on YouTube, and Optimizing Python Import Performance.]]></itunes:summary>
            <itunes:duration>00:29:01</itunes:duration>
            <itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide, podcast, open source, news, headlines, education, software developer, data science, science, cloud computing</itunes:keywords>
            <description><![CDATA[<strong>Topics covered in this episode:</strong><br>

<ul>
	<li><a href="https://blog.trailofbits.com/2025/05/01/making-pypis-test-suite-81-faster/?featured_on=pythonbytes"><strong>Making PyPI’s test suite 81% faster</strong></a></li>
<li><strong><a href="https://x.com/skirano/status/1922651912156897284?featured_on=pythonbytes">People aren’t talking enough about how most of OpenAI’s tech stack runs on Python</a></strong></li>
<li><a href="https://www.youtube.com/playlist?list=PL2Uw4_HvXqvb98mQjN0-rYQjdDxJ_hcrs"><strong>PyCon Talks on YouTube</strong></a></li>
<li><a href="https://pytutorial.com/optimize-python-import-performance/?featured_on=pythonbytes"><strong>Optimizing Python Import Performance</strong></a></li>
<li><strong>Extras</strong></li>
<li><strong>Joke</strong></li>

</ul><a href='https://www.youtube.com/watch?v=uOoDLOYMdDk' style='font-weight: bold;'data-umami-event="Livestream-Past" data-umami-event-episode="434">Watch on YouTube</a><br>

<p><strong>About the show</strong></p>

<p>Sponsored by Digital Ocean: <a href="https://pythonbytes.fm/digitalocean-gen-ai"><strong>pythonbytes.fm/digitalocean-gen-ai</strong></a> Use code <strong>DO4BYTES</strong> and get $200 in free credit</p>

<p><strong>Connect with the hosts</strong></p>

<ul>
<li>Michael: <a href="https://fosstodon.org/@mkennedy"><strong>@mkennedy@fosstodon.org</strong></a> <strong>/</strong> <a href="https://bsky.app/profile/mkennedy.codes?featured_on=pythonbytes"><strong>@mkennedy.codes</strong></a> <strong>(bsky)</strong></li>
<li>Brian: <a href="https://fosstodon.org/@brianokken"><strong>@brianokken@fosstodon.org</strong></a> <strong>/</strong> <a href="https://bsky.app/profile/brianokken.bsky.social?featured_on=pythonbytes"><strong>@brianokken.bsky.social</strong></a></li>
<li>Show: <a href="https://fosstodon.org/@pythonbytes"><strong>@pythonbytes@fosstodon.org</strong></a> <strong>/</strong> <a href="https://bsky.app/profile/pythonbytes.fm"><strong>@pythonbytes.fm</strong></a> <strong>(bsky)</strong></li>
</ul>

<p>Join us on YouTube at <a href="https://pythonbytes.fm/stream/live"><strong>pythonbytes.fm/live</strong></a> to be part of the audience. Usually <strong>Monday</strong> at 10am PT. Older video versions available there too.</p>

<p>Finally, if you want an artisanal, hand-crafted digest of every week of the show notes in email form? Add your name and email to <a href="https://pythonbytes.fm/friends-of-the-show">our friends of the show list</a>, we'll never share it. </p>

<p><strong>Brian #1:</strong> <a href="https://blog.trailofbits.com/2025/05/01/making-pypis-test-suite-81-faster/?featured_on=pythonbytes"><strong>Making PyPI’s test suite 81% faster</strong></a></p>

<ul>
<li>Alexis Challande</li>
<li>The PyPI backend is a project called Warehouse</li>
<li>It’s tested with pytest, and it’s a large project, thousands of tests.</li>
<li>Steps for speedup
<ul>
<li>Parallelizing test execution with pytest-xdist 
<ul>
<li>67% time reduction</li>
<li>--numprocesses=auto allows for using all cores</li>
<li>DB isolation - cool example of how to config postgress to give each test worker it’s on db</li>
<li>They used pytest-sugar to help with visualization, as xdist defaults to quite terse output</li>
</ul></li>
<li>Use Python 3.12’s sys.monitoring to speed up coverage instrumentation 
<ul>
<li>53% time reduction</li>
<li>Nice example of using COVERAGE_CORE=sysmon</li>
</ul></li>
<li>Optimize test discovery
<ul>
<li>Always use testpaths</li>
<li>Sped up collection time. 66% reduction (collection was 10% of time)</li>
<li>Not a huge savings, but it’s 1 line of config</li>
</ul></li>
<li>Eliminate unnecessary imports
<ul>
<li>Use python -X importtime</li>
<li>Examine dependencies not used in testing.</li>
<li>Their example: ddtrace
<ul>
<li>A tool they use in production, but it also has a couple pytest plugins included</li>
<li>Those plugins caused ddtrace to get imported </li>
<li>Using -p:no ddtrace turns off the plugin bits</li>
</ul></li>
</ul></li>
</ul></li>
<li>Notes from Brian:
<ul>
<li>I often get questions about if pytest is useful for large projects.</li>
<li>Short answer: Yes!</li>
<li>Longer answer: But you’ll probably want to speed it up</li>
<li>I need to extend this article with a general purpose “speeding up pytest” post or series. </li>
<li>-p:no can also be used to turn off any plugin, even builtin ones.
<ul>
<li>Examples include 
<ul>
<li>nice to have developer focused pytest plugins that may not be necessary in CI</li>
<li>CI reporting plugins that aren’t needed by devs running tests locally</li>
</ul></li>
</ul></li>
</ul></li>
</ul>

<p><strong>Michael #2:</strong> <a href="https://x.com/skirano/status/1922651912156897284?featured_on=pythonbytes">People aren’t talking enough about how most of OpenAI’s tech stack runs on Python</a></p>

<ul>
<li>Original article: <a href="https://newsletter.pragmaticengineer.com/p/chatgpt-images?featured_on=pythonbytes">Building, launching, and scaling ChatGPT Images</a></li>
<li><strong>Tech stack:</strong> The technology choices behind the product are surprisingly simple; dare I say, pragmatic!
<ul>
<li><strong>Python:</strong> most of the product’s code is written in this language.</li>
<li><a href="https://fastapi.tiangolo.com/?featured_on=pythonbytes"><strong>FastAPI</strong></a><strong>:</strong> the Python framework used for building APIs quickly, using standard Python type hints. As the name suggests, FastAPI’s strength is that it takes less effort to create functional, production-ready APIs to be consumed by other services.</li>
<li><strong>C:</strong> for parts of the code that need to be highly optimized, the team uses the lower-level C programming language</li>
<li><a href="https://temporal.io/?featured_on=pythonbytes"><strong>Temporal</strong></a>: used for asynchronous workflows and operations inside OpenAI. <em>Temporal is a neat workflow solution that makes multi-step workflows reliable even when individual steps crash, without much effort by developers. It’s particularly useful for longer-running workflows like image generation at scale</em></li>
</ul></li>
</ul>

<p><strong>Michael #3:</strong> <a href="https://www.youtube.com/playlist?list=PL2Uw4_HvXqvb98mQjN0-rYQjdDxJ_hcrs"><strong>PyCon Talks on YouTube</strong></a></p>

<ul>
<li>Some talks that jumped out to me:
<ul>
<li><a href="https://www.youtube.com/watch?v=ydVmzg_SJLw&list=PL2Uw4_HvXqvb98mQjN0-rYQjdDxJ_hcrs&index=1&t=8s&pp=iAQB">Keynote by Cory Doctorow</a></li>
<li><a href="https://www.youtube.com/watch?v=iURLDirfmno&list=PL2Uw4_HvXqvb98mQjN0-rYQjdDxJ_hcrs&index=6&pp=iAQB">503 days working full-time on FOSS: lessons learned</a></li>
<li><a href="https://www.youtube.com/watch?v=o4hyA4hotxw&list=PL2Uw4_HvXqvb98mQjN0-rYQjdDxJ_hcrs&index=21&t=1434s&pp=iAQB">Going From Notebooks to Scalable Systems</a>
<ul>
<li>And <a href="https://www.youtube.com/watch?v=n2WFfVIqlDw">my Talk Python conversation</a> around it. (edited episode pending)</li>
</ul></li>
<li><a href="https://www.youtube.com/watch?v=sFAxHLaVKxk&list=PL2Uw4_HvXqvb98mQjN0-rYQjdDxJ_hcrs&index=29&pp=iAQB">Unlearning SQL</a></li>
<li><a href="https://www.youtube.com/watch?v=gM2J5plaDmw&list=PL2Uw4_HvXqvb98mQjN0-rYQjdDxJ_hcrs&index=32&pp=iAQB">The Most Bizarre Software Bugs in History </a></li>
<li><a href="https://www.youtube.com/watch?v=Cpr0wbopYvU&list=PL2Uw4_HvXqvb98mQjN0-rYQjdDxJ_hcrs&index=36&pp=iAQB">The PyArrow revolution in Pandas</a>
<ul>
<li>And <a href="https://talkpython.fm/episodes/show/503/the-pyarrow-revolution?featured_on=pythonbytes">my Talk Python episode</a> about it.</li>
</ul></li>
<li><a href="https://www.youtube.com/watch?v=NE-Oq8I3X_w&list=PL2Uw4_HvXqvb98mQjN0-rYQjdDxJ_hcrs&index=41&t=1322s&pp=iAQB">What they don't tell you about building a JIT compiler for CPython</a>
<ul>
<li>And <a href="https://www.youtube.com/watch?v=abNY_RcO-BU&t=2s&pp=0gcJCbAJAYcqIYzv">my Talk Python conversation</a> around it (edited episode pending)</li>
</ul></li>
<li><a href="https://www.youtube.com/watch?v=IhNSINolcSM&list=PL2Uw4_HvXqvb98mQjN0-rYQjdDxJ_hcrs&index=45&pp=iAQB0gcJCY0JAYcqIYzv">Design Pressure: The Invisible Hand That Shapes Your Code </a></li>
<li><a href="https://www.youtube.com/watch?v=3-3zy5W2SOw&list=PL2Uw4_HvXqvb98mQjN0-rYQjdDxJ_hcrs&index=55&pp=iAQB">Marimo: A Notebook that</a><a href="https://www.youtube.com/watch?v=3-3zy5W2SOw&list=PL2Uw4_HvXqvb98mQjN0-rYQjdDxJ_hcrs&index=55&pp=iAQB"> </a><a href="https://www.youtube.com/watch?v=3-3zy5W2SOw&list=PL2Uw4_HvXqvb98mQjN0-rYQjdDxJ_hcrs&index=55&pp=iAQB">"Compiles"</a><a href="https://www.youtube.com/watch?v=3-3zy5W2SOw&list=PL2Uw4_HvXqvb98mQjN0-rYQjdDxJ_hcrs&index=55&pp=iAQB"> Python for Reproducibility and Reusability</a>
<ul>
<li>And <a href="https://talkpython.fm/episodes/show/501/marimo-reactive-notebooks-for-python?featured_on=pythonbytes">my Talk Python episode</a> about it.</li>
</ul></li>
<li><a href="https://www.youtube.com/watch?v=8utSRblGEB0&list=PL2Uw4_HvXqvb98mQjN0-rYQjdDxJ_hcrs&index=58&pp=iAQB">GPU Programming in Pure Python </a>
<ul>
<li>And my <a href="https://www.youtube.com/watch?v=57POBhLVbcc&t=2906s">Talk Python conversation</a> around it (edited episode pending)</li>
</ul></li>
<li><a href="https://www.youtube.com/watch?v=0mZ0AkLimDg&list=PL2Uw4_HvXqvb98mQjN0-rYQjdDxJ_hcrs&index=59&pp=iAQB">Scaling the Mountain: A Framework for Tackling Large-Scale Tech Debt</a></li>
</ul></li>
</ul>

<p><strong>Brian #4:</strong> <a href="https://pytutorial.com/optimize-python-import-performance/?featured_on=pythonbytes"><strong>Optimizing Python Import Performance</strong></a></p>

<ul>
<li>Mostly pay attention to #'s 1-3</li>
<li>This is related to speeding up a test suite, speeding up necessary imports.</li>
<li>Finding what’s slow
<ul>
<li>Use python -X importtime &lt;the reset of the command</li>
<li>Ex: python -X importtime ptyest</li>
</ul></li>
<li>Techniques
<ul>
<li>Lazy imports 
<ul>
<li>move slow-to-import imports into functions/methods</li>
</ul></li>
<li>Avoiding circular imports 
<ul>
<li>hopefully you’re doing that already</li>
</ul></li>
<li>Optimize __init__.py files 
<ul>
<li>Avoid unnecessary imports, heavy computations, complex logic</li>
</ul></li>
</ul></li>
<li>Notes from Brian
<ul>
<li>Some questions remain open for me
<ul>
<li>Does module aliasing really help much?</li>
</ul></li>
<li>This applies to testing in a big way
<ul>
<li>Test collection imports your test suite, so anything imported at the top level of a file gets imported at test collection time, even if you only are running a subset of tests using filtering like -x or -m or other filter methods.</li>
<li>Run -X importtime  on test collection.</li>
<li>Move slow imports into fixtures, so they get imported when needed, but NOT at collection.</li>
</ul></li>
</ul></li>
<li>See also: 
<ul>
<li><a href="https://docs.python.org/3/using/cmdline.html#cmdoption-X">option</a><a href="https://docs.python.org/3/using/cmdline.html#cmdoption-X"> </a><a href="https://docs.python.org/3/using/cmdline.html#cmdoption-X">-X</a><a href="https://docs.python.org/3/using/cmdline.html#cmdoption-X"> in the standard docs</a></li>
<li>Consider using <a href="https://pypi.org/project/import-profile/?featured_on=pythonbytes">import_profile</a></li>
</ul></li>
</ul>

<p><strong>Extras</strong> </p>

<p>Brian:</p>

<ul>
<li><a href="https://hugovk.dev/blog/2025/peps-and-co/?featured_on=pythonbytes">PEPs &amp; Co.</a> 
<ul>
<li>PEP is a ‘backronym”, an acronym where the words it stands for are filled in after the acronym is chosen. Barry Warsaw made this one up.</li>
<li>There are a lot of “enhancement proposal” and “improvement proposal” acronyms now from other communities</li>
</ul></li>
<li><a href="https://pythontest.com?featured_on=pythonbytes">pythontest.com</a> has a new theme
<ul>
<li>More colorful. Neat search feature</li>
<li>Now it’s excruciatingly obvious that I haven’t blogged regularly in a while
<ul>
<li>I gotta get on that</li>
</ul></li>
<li>Code highlighting might need tweaked for dark mode</li>
</ul></li>
</ul>

<p>Michael: </p>

<ul>
<li><a href="https://github.com/git-bug/git-bug?featured_on=pythonbytes">git-bug</a></li>
<li><a href="https://www.youtube.com/watch?v=gFiSkcu4kU4&lc=UgxkRBMDgfv8PqbE1iN4AaABAg">Pyrefly follow up</a></li>
</ul>

<p><strong>Joke:</strong> <a href="https://x.com/PR0GRAMMERHUM0R/status/1637167010365812737?featured_on=pythonbytes">There is hope</a>.</p>
]]></description>
            
            <podcast:transcript url="https://pythonbytes.fm/episodes/vtt_transcript/434/most-of-openai-s-tech-stack-runs-on-python.vtt" type="text/vtt"/>
            <itunes:image href="https://cdn.pythonbytes.fm/static/img/podcast-theme-img_1400.jpg"/>
        </item>
        <item>
            <title>#433 Dev in the Arena</title>
            <link>https://pythonbytes.fm/episodes/show/433/dev-in-the-arena</link>
            <guid isPermaLink="false">f01afd2f-efc9-4969-b39a-d7b0aa45c4af</guid>
            <enclosure
                    url="https://pythonbytes.fm/episodes/download/433/dev-in-the-arena.mp3"
                    length="41402462"
                    type="audio/mpeg"/>
            <itunes:category text="Technology"/>
            <itunes:category text="News">
                <itunes:category text="Tech News"/>
            </itunes:category>
            <pubDate>Mon, 26 May 2025 00:00:00 -0800</pubDate>
            <itunes:author>Michael Kennedy and Brian Okken</itunes:author>
            <itunes:title>#433: Dev in the Arena</itunes:title>
            <itunes:episode>433</itunes:episode>
            <itunes:explicit>false</itunes:explicit>
            <itunes:subtitle></itunes:subtitle>
            <itunes:summary><![CDATA[Topics include git-flight-rules, Uravelling t-strings, neohtop, and Introducing Pyrefly: A new type checker and IDE experience for Python.]]></itunes:summary>
            <itunes:duration>00:28:40</itunes:duration>
            <itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide, podcast, open source, news, headlines, education, software developer, data science, science, cloud computing</itunes:keywords>
            <description><![CDATA[<strong>Topics covered in this episode:</strong><br>

<ul>
	<li><a href="https://github.com/k88hudson/git-flight-rules?featured_on=pythonbytes"><strong>git-flight-rules</strong></a></li>
<li><a href="https://snarky.ca/unravelling-t-strings/?featured_on=pythonbytes"><strong>Uravelling t-strings</strong></a></li>
<li><a href="https://github.com/Abdenasser/neohtop?featured_on=pythonbytes"><strong>neohtop</strong></a></li>
<li><strong><a href="https://engineering.fb.com/2025/05/15/developer-tools/introducing-pyrefly-a-new-type-checker-and-ide-experience-for-python/?featured_on=pythonbytes">Introducing Pyrefly: A new type checker and IDE experience for Python</a></strong></li>
<li><strong>Extras</strong></li>
<li><strong>Joke</strong></li>

</ul><a href='https://www.youtube.com/watch?v=gFiSkcu4kU4' style='font-weight: bold;'data-umami-event="Livestream-Past" data-umami-event-episode="433">Watch on YouTube</a><br>

<p><strong>About the show</strong></p>

<p>Sponsored by us! Support our work through:</p>

<ul>
<li>Our <a href="https://training.talkpython.fm/?featured_on=pythonbytes"><strong>courses at Talk Python Training</strong></a></li>
<li><a href="https://courses.pythontest.com/p/the-complete-pytest-course?featured_on=pythonbytes"><strong>The Complete pytest Course</strong></a></li>
<li><a href="https://www.patreon.com/pythonbytes"><strong>Patreon Supporters</strong></a></li>
</ul>

<p><strong>Connect with the hosts</strong></p>

<ul>
<li>Michael: <a href="https://fosstodon.org/@mkennedy"><strong>@mkennedy@fosstodon.org</strong></a> <strong>/</strong> <a href="https://bsky.app/profile/mkennedy.codes?featured_on=pythonbytes"><strong>@mkennedy.codes</strong></a> <strong>(bsky)</strong></li>
<li>Brian: <a href="https://fosstodon.org/@brianokken"><strong>@brianokken@fosstodon.org</strong></a> <strong>/</strong> <a href="https://bsky.app/profile/brianokken.bsky.social?featured_on=pythonbytes"><strong>@brianokken.bsky.social</strong></a></li>
<li>Show: <a href="https://fosstodon.org/@pythonbytes"><strong>@pythonbytes@fosstodon.org</strong></a> <strong>/</strong> <a href="https://bsky.app/profile/pythonbytes.fm"><strong>@pythonbytes.fm</strong></a> <strong>(bsky)</strong></li>
</ul>

<p>Join us on YouTube at <a href="https://pythonbytes.fm/stream/live"><strong>pythonbytes.fm/live</strong></a> to be part of the audience. Usually <strong>Monday</strong> at 10am PT. Older video versions available there too.</p>

<p>Finally, if you want an artisanal, hand-crafted digest of every week of the show notes in email form? Add your name and email to <a href="https://pythonbytes.fm/friends-of-the-show">our friends of the show list</a>, we'll never share it.</p>

<p><strong>Michael #1:</strong> <a href="https://github.com/k88hudson/git-flight-rules?featured_on=pythonbytes"><strong>git-flight-rules</strong></a></p>

<ul>
<li>What are "flight rules"?
<ul>
<li>A guide for astronauts (now, programmers using Git) about what to do when things go wrong.</li>
<li>Flight Rules are the hard-earned body of knowledge recorded in manuals that list, step-by-step, what to do if X occurs, and why. Essentially, they are extremely detailed, scenario-specific standard operating procedures. [...]</li>
<li>NASA has been capturing our missteps, disasters and solutions since the early 1960s, when Mercury-era ground teams first started gathering "lessons learned" into a compendium that now lists thousands of problematic situations, from engine failure to busted hatch handles to computer glitches, and their solutions.</li>
</ul></li>
<li>Steps for common operations and actions
<ul>
<li><a href="https://github.com/k88hudson/git-flight-rules?tab=readme-ov-file#i-want-to-start-a-local-repository">I want to start a local repository</a></li>
<li><a href="https://github.com/k88hudson/git-flight-rules?tab=readme-ov-file#what-did-i-just-commit">What did I just commit?</a></li>
<li><a href="https://github.com/k88hudson/git-flight-rules?tab=readme-ov-file#i-want-to-discard-specific-unstaged-changes">I want to discard specific unstaged changes</a></li>
<li><a href="https://github.com/k88hudson/git-flight-rules?tab=readme-ov-file#restore-a-deleted-file">Restore a deleted file</a></li>
</ul></li>
</ul>

<p><strong>Brian #2:</strong> <a href="https://snarky.ca/unravelling-t-strings/?featured_on=pythonbytes"><strong>Uravelling t-strings</strong></a></p>

<ul>
<li>Brett Cannon</li>
<li>Article walks through
<ul>
<li>Evaluating the Python expression</li>
<li>Applying specified conversions</li>
<li>Applying format specs</li>
<li>Using an Interpolation class to hold details of replacement fields</li>
<li>Using Template class to hold parsed data</li>
</ul></li>
<li>Plus, you don’t have to have Python 3.14.0b1 to try this out.</li>
<li>The end result is very close to an <a href="https://peps.python.org/pep-0750/#example-implementing-f-strings-with-t-strings">example used in PEP 750</a>, which you do need 3.14.0b1 to try out.</li>
<li>See also:
<ul>
<li>I’ve written a pytest version, <a href="https://pythontest.com/unravelling-t-strings-pytest/?featured_on=pythonbytes">Unravelling t-strings with pytest</a>, if you want to run all the examples with one file.</li>
</ul></li>
</ul>

<p><strong>Michael #3:</strong> <a href="https://github.com/Abdenasser/neohtop?featured_on=pythonbytes"><strong>neohtop</strong></a></p>

<ul>
<li>Blazing-fast system monitoring for your desktop</li>
<li>Features
<ul>
<li>Real-time process monitoring</li>
<li>CPU and Memory usage tracking</li>
<li>Beautiful, modern UI with dark/light themes</li>
<li>Advanced process search and filtering</li>
<li>Pin important processes</li>
<li>Process management (kill processes)</li>
<li>Sort by any column</li>
<li>Auto-refresh system stats</li>
</ul></li>
</ul>

<p><img src="https://blobs.pythonbytes.fm/neohop.png" alt="" /></p>

<p><strong>Brian #4:</strong> <a href="https://engineering.fb.com/2025/05/15/developer-tools/introducing-pyrefly-a-new-type-checker-and-ide-experience-for-python/?featured_on=pythonbytes">Introducing Pyrefly: A new type checker and IDE experience for Python</a></p>

<ul>
<li>From Facebook / Meta</li>
<li>Another Python type checker written in Rust</li>
<li>Built with IDE integration in mind from the beginning</li>
<li>Principles
<ul>
<li>Performance</li>
<li>IDE first</li>
<li>Inference (inferring types in untyped code)</li>
<li>Open source</li>
</ul></li>
<li>I mistakenly tried this on the project I support with the most horrible abuses of the dynamic nature of Python, <a href="https://github.com/okken/pytest-check?featured_on=pythonbytes">pytest-check</a>. It didn’t go well. But perhaps the project is ready for some refactoring. I’d like to try it soon on a more well behaved project.</li>
</ul>

<p><strong>Extras</strong> </p>

<p>Brian:</p>

<ul>
<li><a href="https://www.youtube.com/watch?v=pqBqdNIPrbo">Python: The Documentary Official Trailer</a></li>
<li>Tim Hopper added <a href="https://pydevtools.com/handbook/tutorial/setting-up-testing-with-pytest-and-uv/?featured_on=pythonbytes">Setting up testing with ptyest and uv</a> to his “Python Developer Tooling Handbook”</li>
<li>For a more thorough intro on pytest, check out <a href="https://courses.pythontest.com?featured_on=pythonbytes">courses.pythontest.com</a></li>
<li><a href="https://getpocket.com/farewell?featured_on=pythonbytes">pocket is closing</a>, I’m switching to <a href="https://raindrop.io?featured_on=pythonbytes">Raindrop</a>
<ul>
<li>I got one question about code formatting. It’s not highlighted, but otherwise not bad.</li>
</ul></li>
</ul>

<p>Michael:</p>

<ul>
<li>New course! <a href="https://training.talkpython.fm/courses/polars-for-power-users?featured_on=pythonbytes">Polars for Power Users: Transform Your Data Analysis Game</a></li>
<li><a href="https://github.com/apache/airflow/releases/tag/3.0.0?featured_on=pythonbytes">Apache Airflow 3.0 Released</a></li>
<li><a href="https://pasteapp.io/paste-5?featured_on=pythonbytes">Paste 5</a></li>
</ul>

<p><strong>Joke</strong>: <a href="https://mkennedy.codes/posts/roosevelt-s-man-in-the-arena-but-for-developers/?featured_on=pythonbytes">Theodore Roosevelt’s </a><a href="https://mkennedy.codes/posts/roosevelt-s-man-in-the-arena-but-for-developers/?featured_on=pythonbytes"><strong>Man in the Arena</strong></a><a href="https://mkennedy.codes/posts/roosevelt-s-man-in-the-arena-but-for-developers/?featured_on=pythonbytes">, but for programming</a></p>
]]></description>
            
            <podcast:transcript url="https://pythonbytes.fm/episodes/vtt_transcript/433/dev-in-the-arena.vtt" type="text/vtt"/>
            <itunes:image href="https://cdn.pythonbytes.fm/static/img/podcast-theme-img_1400.jpg"/>
        </item>
        <item>
            <title>#432 How To Fix Your Computer</title>
            <link>https://pythonbytes.fm/episodes/show/432/how-to-fix-your-computer</link>
            <guid isPermaLink="false">acf1af7c-1233-4330-aef7-ea2237c3f96d</guid>
            <enclosure
                    url="https://pythonbytes.fm/episodes/download/432/how-to-fix-your-computer.mp3"
                    length="24958140"
                    type="audio/mpeg"/>
            <itunes:category text="Technology"/>
            <itunes:category text="News">
                <itunes:category text="Tech News"/>
            </itunes:category>
            <pubDate>Mon, 19 May 2025 00:00:00 -0800</pubDate>
            <itunes:author>Michael Kennedy and Brian Okken</itunes:author>
            <itunes:title>#432: How To Fix Your Computer</itunes:title>
            <itunes:episode>432</itunes:episode>
            <itunes:explicit>false</itunes:explicit>
            <itunes:subtitle></itunes:subtitle>
            <itunes:summary><![CDATA[Topics include pre-commit: install with uv, PEP 773, Changes for Textual, and The Best Programmers I Know.]]></itunes:summary>
            <itunes:duration>00:25:48</itunes:duration>
            <itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide, podcast, open source, news, headlines, education, software developer, data science, science, cloud computing</itunes:keywords>
            <description><![CDATA[<strong>Topics covered in this episode:</strong><br>

<ul>
	<li><strong><a href="https://adamj.eu/tech/2025/05/07/pre-commit-install-uv/?featured_on=pythonbytes">pre-commit: install with uv</a></strong></li>
<li><strong><a href="https://peps.python.org/pep-0773/?featured_on=pythonbytes">PEP 773</a>: A Python Installation Manager for Windows (Accepted)</strong></li>
<li><a href="https://textual.textualize.io/blog/2025/05/07/the-future-of-textualize/?featured_on=pythonbytes"><strong>Changes for Textual</strong></a></li>
<li><strong><a href="https://endler.dev/2025/best-programmers/?featured_on=pythonbytes">The Best Programmers I Know</a></strong></li>
<li><strong>Extras</strong></li>
<li><strong>Joke</strong></li>

</ul><a href='https://www.youtube.com/watch?v=eNH8L1voK9s' style='font-weight: bold;'data-umami-event="Livestream-Past" data-umami-event-episode="432">Watch on YouTube</a><br>

<p><strong>About the show</strong></p>

<p>Sponsored by <strong>NordLayer</strong>: <a href="https://pythonbytes.fm/nordlayer"><strong>pythonbytes.fm/nordlayer</strong></a></p>

<p><strong>Connect with the hosts</strong></p>

<ul>
<li>Michael: <a href="https://fosstodon.org/@mkennedy"><strong>@mkennedy@fosstodon.org</strong></a> <strong>/</strong> <a href="https://bsky.app/profile/mkennedy.codes?featured_on=pythonbytes"><strong>@mkennedy.codes</strong></a> <strong>(bsky)</strong></li>
<li>Brian: <a href="https://fosstodon.org/@brianokken"><strong>@brianokken@fosstodon.org</strong></a> <strong>/</strong> <a href="https://bsky.app/profile/brianokken.bsky.social?featured_on=pythonbytes"><strong>@brianokken.bsky.social</strong></a></li>
<li>Show: <a href="https://fosstodon.org/@pythonbytes"><strong>@pythonbytes@fosstodon.org</strong></a> <strong>/</strong> <a href="https://bsky.app/profile/pythonbytes.fm"><strong>@pythonbytes.fm</strong></a> <strong>(bsky)</strong></li>
</ul>

<p>Join us on YouTube at <a href="https://pythonbytes.fm/stream/live"><strong>pythonbytes.fm/live</strong></a> to be part of the audience. Usually <strong>Monday</strong> at 10am PT. Older video versions available there too.</p>

<p>Finally, if you want an artisanal, hand-crafted digest of every week of the show notes in email form? Add your name and email to <a href="https://pythonbytes.fm/friends-of-the-show">our friends of the show list</a>, we'll never share it. </p>

<p><strong>Brian #1:</strong> <a href="https://adamj.eu/tech/2025/05/07/pre-commit-install-uv/?featured_on=pythonbytes">pre-commit: install with uv</a></p>

<ul>
<li>Adam Johnson</li>
<li>uv tool works great at keeping tools you use on lots of projects up to date quickly, why not use it for pre-commit.</li>
<li>The extension of <a href="https://pypi.org/project/pre-commit-uv/?featured_on=pythonbytes">pre-commit-uv</a> will use uv to create virtual environments and install packages fore pre-commit. This speeds up initial pre-commit cache creation. </li>
<li>However, Adam is recommending this flavor of using pre-commit because it’s just plain easier to install pre-commit and dependencies than the official pre-commit install guide.</li>
<li>Win-win.</li>
<li>Side note: No Adam, I’m not going to pronounce uv “uhv”, I’ll stick with “you vee”, even Astral tells me I’m wrong </li>
</ul>

<p><strong>Michael #2:</strong> <a href="https://peps.python.org/pep-0773/?featured_on=pythonbytes">PEP 773</a>: A Python Installation Manager for Windows (Accepted)</p>

<ul>
<li>via pycoders newsletter</li>
<li>One manager to rule them all – PyManager.</li>
<li>PEP 773 replaces all existing Windows installers (.exe “traditional” bundle, per-version Windows Store apps, and the separate py.exe launcher) with a single MSIX app called Python Install Manager (nick-named PyManager).</li>
<li>PyManager should be mainstream by CPython 3.15, and the traditional installer disappears no earlier than 3.16 (≈ mid-2027).</li>
<li><strong>Simple, predictable commands.</strong>
<ul>
<li>python → launches “the best” runtime already present or auto-installs the latest CPython if none is found.</li>
<li>py → same launcher as today <strong>plus</strong> management sub-commands:</li>
<li>py install, py uninstall, py list, py exec, py help.</li>
<li>Optional python3 and python3.x aliases can be enabled by adding one extra PATH entry.</li>
</ul></li>
</ul>

<p><strong>Michael #3:</strong> <a href="https://textual.textualize.io/blog/2025/05/07/the-future-of-textualize/?featured_on=pythonbytes"><strong>Changes for Textual</strong></a></p>

<ul>
<li><strong>Bittersweet news: the business experiment ends, but the code lives on.</strong></li>
<li>Textual began as a hobby project layered on top of Rich, but it has grown into a mature, “makes-the-terminal-do-the-impossible” TUI framework with an active community and standout documentation.</li>
<li>Despite Textual’s technical success, the team couldn’t pinpoint a single pain-point big enough to sustain a business model, so <strong>the company will wind down in the coming weeks</strong>.</li>
<li><strong>The projects themselves aren’t going anywhere</strong>: they’re stable, battle-tested, and will continue under the stewardship of the original author and the broader community.</li>
</ul>

<p><strong>Brian #4:</strong> <a href="https://endler.dev/2025/best-programmers/?featured_on=pythonbytes">The Best Programmers I Know</a></p>

<ul>
<li>Matthias Endler</li>
<li>“I have met a lot of developers in my life. Lately, I asked myself: “What does it take to be one of the best? What do they all have in common?””</li>
<li>The list
<ul>
<li>Read the reference</li>
<li>Know your tools really well</li>
<li>Read the error message</li>
<li>Break down problems</li>
<li>Don’t be afraid to get your hands dirty</li>
<li>Always help others</li>
<li>Write</li>
<li>Never stop learning</li>
<li>Status doesn’t matter</li>
<li>Build a reputation</li>
<li>Have patience</li>
<li>Never blame the computer</li>
<li>Don’t be afraid to say “I don’t know”</li>
<li>Don’t guess</li>
<li>Keep it simple</li>
</ul></li>
<li>Each topic has a short discussion. So don’t just ready the bullet points, check out the article.</li>
</ul>

<p><strong>Extras</strong> </p>

<p>Brian:</p>

<ul>
<li>I had a great time in Munich last week. I a talk at a company event, met with tons of people, and had a great time. 
<ul>
<li>The best part was connecting with people from different divisions working on similar problems.</li>
<li>I love the idea of internal conferences to get people to self organize by topic and meet people they wouldn’t otherwise, to share ideas.</li>
<li>Also got started working on a second book on the plane trip back. </li>
</ul></li>
</ul>

<p>Michael:</p>

<ul>
<li>Talk Python Clips (e.g. <a href="https://www.youtube.com/shorts/cARHSv-CwaE">mullet</a>)</li>
<li>Embrace your cloud firewall (<a href="https://blobs.pythonbytes.fm/cloud-firewall-example.jpg">example</a>).</li>
<li><a href="https://pythoninsider.blogspot.com/2025/05/python-3140-beta-1-is-here.html?featured_on=pythonbytes">Python 3.14.0 beta 1</a> is here</li>
<li>Congrats to the <a href="https://pyfound.blogspot.com/2025/05/announcing-python-software-foundation.html?featured_on=pythonbytes">new PSF Fellows</a>.</li>
<li><a href="https://www.linkedin.com/posts/mdboom_its-been-a-tough-couple-of-days-microsofts-activity-7328583333536268289-p4Lp/?rcm=ACoAAABOjqABPkOWTTbZXV9tmnQohvpkplQOibU&featured_on=pythonbytes">Cancelled faster CPython</a></li>
<li><a href="https://bsky.app/profile/snarky.ca/post/3lp5w5j5tws2i?featured_on=pythonbytes">bsky.app/profile/snarky.ca post</a></li>
</ul>

<p><strong>Joke:</strong> <a href="https://x.com/PR0GRAMMERHUM0R/status/1559253623397404673?featured_on=pythonbytes">How To Fix Your Computer</a></p>
]]></description>
            
            <podcast:transcript url="https://pythonbytes.fm/episodes/vtt_transcript/432/how-to-fix-your-computer.vtt" type="text/vtt"/>
            <itunes:image href="https://cdn.pythonbytes.fm/static/img/podcast-theme-img_1400.jpg"/>
        </item>
        <item>
            <title>#431 Nerd Gas</title>
            <link>https://pythonbytes.fm/episodes/show/431/nerd-gas</link>
            <guid isPermaLink="false">b0c477e7-7d85-40d8-a874-2b7aa94711c1</guid>
            <enclosure
                    url="https://pythonbytes.fm/episodes/download/431/nerd-gas.mp3"
                    length="28412171"
                    type="audio/mpeg"/>
            <itunes:category text="Technology"/>
            <itunes:category text="News">
                <itunes:category text="Tech News"/>
            </itunes:category>
            <pubDate>Mon, 05 May 2025 00:00:00 -0800</pubDate>
            <itunes:author>Michael Kennedy and Brian Okken</itunes:author>
            <itunes:title>#431: Nerd Gas</itunes:title>
            <itunes:episode>431</itunes:episode>
            <itunes:explicit>false</itunes:explicit>
            <itunes:subtitle></itunes:subtitle>
            <itunes:summary><![CDATA[Topics include pirel: Python release cycle in your terminal, FastAPI Cloud, and Python's new t-strings.]]></itunes:summary>
            <itunes:duration>00:29:27</itunes:duration>
            <itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide, podcast, open source, news, headlines, education, software developer, data science, science, cloud computing</itunes:keywords>
            <description><![CDATA[<strong>Topics covered in this episode:</strong><br>

<ul>
	<li><strong><a href="https://github.com/RafaelWO/pirel?featured_on=pythonbytes"> pirel: Python release cycle in your terminal</a></strong></li>
<li><a href="https://fastapicloud.com?featured_on=pythonbytes"><strong>FastAPI Cloud</strong></a></li>
<li><strong><a href="https://davepeck.org/2025/04/11/pythons-new-t-strings/?featured_on=pythonbytes">Python's new t-strings</a></strong></li>
<li><strong>Extras</strong></li>
<li><strong>Joke</strong></li>

</ul><a href='https://www.youtube.com/watch?v=WaWjUlgWpBo' style='font-weight: bold;'data-umami-event="Livestream-Past" data-umami-event-episode="431">Watch on YouTube</a><br>

<p><strong>About the show</strong></p>

<p>Sponsored by <strong>NordLayer</strong>: <a href="https://pythonbytes.fm/nordlayer"><strong>pythonbytes.fm/nordlayer</strong></a></p>

<p><strong>Connect with the hosts</strong></p>

<ul>
<li>Michael: <a href="https://fosstodon.org/@mkennedy"><strong>@mkennedy@fosstodon.org</strong></a> <strong>/</strong> <a href="https://bsky.app/profile/mkennedy.codes?featured_on=pythonbytes"><strong>@mkennedy.codes</strong></a> <strong>(bsky)</strong></li>
<li>Brian: <a href="https://fosstodon.org/@brianokken"><strong>@brianokken@fosstodon.org</strong></a> <strong>/</strong> <a href="https://bsky.app/profile/brianokken.bsky.social?featured_on=pythonbytes"><strong>@brianokken.bsky.social</strong></a></li>
<li>Show: <a href="https://fosstodon.org/@pythonbytes"><strong>@pythonbytes@fosstodon.org</strong></a> <strong>/</strong> <a href="https://bsky.app/profile/pythonbytes.fm"><strong>@pythonbytes.fm</strong></a> <strong>(bsky)</strong></li>
</ul>

<p>Join us on YouTube at <a href="https://pythonbytes.fm/stream/live"><strong>pythonbytes.fm/live</strong></a> to be part of the audience. Usually <strong>Monday</strong> at 10am PT. Older video versions available there too.</p>

<p>Finally, if you want an artisanal, hand-crafted digest of every week of the show notes in email form? Add your name and email to <a href="https://pythonbytes.fm/friends-of-the-show">our friends of the show list</a>, we'll never share it.</p>

<p><strong>Michael #1:</strong><a href="https://github.com/RafaelWO/pirel?featured_on=pythonbytes"> pirel: Python release cycle in your terminal</a></p>

<ul>
<li>pirel check shows release information about your active Python interpreter.</li>
<li>If the active version is end-of-life, the program exits with code 1. If no active Python interpreter is found, the program exits with code 2.</li>
<li>pirel list lists all Python releases in a table. Your active Python interpreter is highlighted.</li>
<li>A picture is worth many words</li>
</ul>

<p><img src="https://blobs.pythonbytes.fm/pirel-cli-demo.gif" alt="" /></p>

<p><strong>Brian #2:</strong>  <a href="https://fastapicloud.com?featured_on=pythonbytes"><strong>FastAPI Cloud</strong></a></p>

<ul>
<li>Sebastián Ramírez, creator of FastAPI, <a href="https://bsky.app/profile/tiangolo.com/post/3lognxjvw4225?featured_on=pythonbytes">announced today</a> the formation of a new Company, FastAPI Cloud.</li>
<li>Here’s the announcement blog post: <a href="https://fastapicloud.com/blog/fastapi-cloud-by-the-same-team-behind-fastapi?featured_on=pythonbytes">FastAPI Cloud - By The Same Team Behind FastAPI</a></li>
<li>There’s a wait list to try it out.</li>
<li>Promises to turns deployment into fastapi login; fastapi deploy</li>
<li>Side note: announcement includes quote from Daft Punk: Build Harder, Better, Faster, Stronger
<ul>
<li>I just included this in a talk I’m gave last week (and will again next week), where I modify this to “Build Easier, Better, Faster, Stronger”</li>
<li>Sebastian and I are both fans of the rocket emoji.</li>
</ul></li>
<li>BTW, <a href="https://pythonbytes.fm/episodes/show/123/time-to-right-the-py-wrongs">we first covered FastAPI on episode 123 in 2019</a></li>
</ul>

<p><strong>Brian #3:</strong> <a href="https://davepeck.org/2025/04/11/pythons-new-t-strings/?featured_on=pythonbytes">Python's new t-strings</a></p>

<ul>
<li>Dave Peck, one of the authors of PEP 750, which will go into Python 3.14</li>
<li>We covered t-strings in <a href="https://pythonbytes.fm/episodes/show/428/how-old-is-your-python">ep 428</a></li>
<li>In article
<ul>
<li>t-strings security benefits over f-strings</li>
<li>How to work with t-strings</li>
<li>A Pig Latin example
<ul>
<li>Also, I think I have always done this wrong</li>
<li>Is it the first consonant to the end? or the first consonant cluster?</li>
<li>So… Brian → Rianbay? or Ianbray?</li>
<li>BTW, this is an example of nerdgassing</li>
</ul></li>
<li>What’s next once t-strings ship?</li>
</ul></li>
<li>On thing that’s next (in Python 3.15, maybe, is using t-strings in shlex and subprocess)
<ul>
<li><a href="https://peps.python.org/pep-0787/?featured_on=pythonbytes">PEP 787 – Safer subprocess usage using t-strings</a> deferred to 3.15</li>
</ul></li>
</ul>

<p><strong>Michael #4</strong>: <a href="https://github.com/dtnewman/zev?featured_on=pythonbytes">zev</a></p>

<ul>
<li>A simple CLI tool to help you remember terminal commands.</li>
<li><p>Examples:</p>

<pre><code># Find running processes
zev 'show all running python processes'
# File operations
zev 'find all .py files modified in the last 24 hours'
# System information
zev 'show disk usage for current directory'
# Network commands
zev 'check if google.com is reachable'
# Git operations
zev 'show uncommitted changes in git'
</code></pre></li>
<li><p>Again, picture worth many words:</p></li>
</ul>

<p><img src="https://blobs.pythonbytes.fm/zev-demo.gif" alt="" /></p>

<p><strong>Extras</strong> </p>

<p>Brian:</p>

<ul>
<li><a href="https://arstechnica.com/culture/2025/04/monty-python-and-the-holy-grail-turns-50/?featured_on=pythonbytes">Holy Grail turns 50</a></li>
<li><a href="https://whatever.scalzi.com/2008/06/03/nerdgassing-i-coin-this-word-in-the-name-of-humanity/?featured_on=pythonbytes">nerdgassing</a></li>
</ul>

<p>Michael:</p>

<ul>
<li>Transcripts are a bit better now.</li>
<li>Zen <a href="https://zen-browser.app/release-notes/#1.12.1b">is better now</a></li>
</ul>

<p><strong>Joke:</strong> <a href="https://x.com/PR0GRAMMERHUM0R/status/1915103409062978033?featured_on=pythonbytes">Can my friend come in?</a></p>
]]></description>
            
            <podcast:transcript url="https://pythonbytes.fm/episodes/vtt_transcript/431/nerd-gas.vtt" type="text/vtt"/>
            <itunes:image href="https://cdn.pythonbytes.fm/static/img/podcast-theme-img_1400.jpg"/>
        </item>
        <item>
            <title>#430 Or you go to jail</title>
            <link>https://pythonbytes.fm/episodes/show/430/or-you-go-to-jail</link>
            <guid isPermaLink="false">9b65bbb7-cfe7-4f1a-801a-ea9da4856d0b</guid>
            <enclosure
                    url="https://pythonbytes.fm/episodes/download/430/or-you-go-to-jail.mp3"
                    length="28398628"
                    type="audio/mpeg"/>
            <itunes:category text="Technology"/>
            <itunes:category text="News">
                <itunes:category text="Tech News"/>
            </itunes:category>
            <pubDate>Mon, 28 Apr 2025 00:00:00 -0800</pubDate>
            <itunes:author>Michael Kennedy and Brian Okken</itunes:author>
            <itunes:title>#430: Or you go to jail</itunes:title>
            <itunes:episode>430</itunes:episode>
            <itunes:explicit>false</itunes:explicit>
            <itunes:subtitle></itunes:subtitle>
            <itunes:summary><![CDATA[Topics include pip 25.1 has dependency groups, pylock.toml, plus more, aiohttp goes free threaded, uv 0.6.15 supports pylock.toml, and Whenever.]]></itunes:summary>
            <itunes:duration>00:29:11</itunes:duration>
            <itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide, podcast, open source, news, headlines, education, software developer, data science, science, cloud computing</itunes:keywords>
            <description><![CDATA[<strong>Topics covered in this episode:</strong><br>

<ul>
	<li><strong><a href="https://ichard26.github.io/blog/2025/04/whats-new-in-pip-25.1/?featured_on=pythonbytes">pip 25.1 has dependency groups, pylock.toml, plus more</a></strong></li>
<li><strong><a href="https://bsky.app/profile/aiohttp.org/post/3lmyhz6uhks2u?featured_on=pythonbytes">aiohttp goes free threaded</a></strong></li>
<li><strong><a href="https://github.com/astral-sh/uv/releases/tag/0.6.15?featured_on=pythonbytes">uv 0.6.15 supports pylock.toml</a></strong></li>
<li><a href="https://github.com/ariebovenberg/whenever?featured_on=pythonbytes"><strong>Whenever</strong></a></li>
<li><strong>Extras</strong></li>
<li><strong>Joke</strong></li>

</ul><a href='https://www.youtube.com/watch?v=BGhDge-iUTw' style='font-weight: bold;'data-umami-event="Livestream-Past" data-umami-event-episode="430">Watch on YouTube</a><br>

<p><strong>About the show</strong></p>

<p>Sponsored by <a href="https://pythonbytes.fm/porkbun"><strong>Porkbun</strong></a>! Use our link <a href="https://pythonbytes.fm/porkbun"><strong>pythonbytes.fm/porkbun</strong></a> and get a .app or .dev domain for $5.99 at Porkbun.</p>

<p><strong>Connect with the hosts</strong></p>

<ul>
<li>Michael: <a href="https://fosstodon.org/@mkennedy"><strong>@mkennedy@fosstodon.org</strong></a> <strong>/</strong> <a href="https://bsky.app/profile/mkennedy.codes?featured_on=pythonbytes"><strong>@mkennedy.codes</strong></a> <strong>(bsky)</strong></li>
<li>Brian: <a href="https://fosstodon.org/@brianokken"><strong>@brianokken@fosstodon.org</strong></a> <strong>/</strong> <a href="https://bsky.app/profile/brianokken.bsky.social?featured_on=pythonbytes"><strong>@brianokken.bsky.social</strong></a></li>
<li>Show: <a href="https://fosstodon.org/@pythonbytes"><strong>@pythonbytes@fosstodon.org</strong></a> <strong>/</strong> <a href="https://bsky.app/profile/pythonbytes.fm"><strong>@pythonbytes.fm</strong></a> <strong>(bsky)</strong></li>
</ul>

<p>Join us on YouTube at <a href="https://pythonbytes.fm/stream/live"><strong>pythonbytes.fm/live</strong></a> to be part of the audience. Usually <strong>Monday</strong> at 10am PT. Older video versions available there too.</p>

<p>Finally, if you want an artisanal, hand-crafted digest of every week of the show notes in email form? Add your name and email to <a href="https://pythonbytes.fm/friends-of-the-show">our friends of the show list</a>, we'll never share it. </p>

<p><strong>Brian #1:</strong> <a href="https://ichard26.github.io/blog/2025/04/whats-new-in-pip-25.1/?featured_on=pythonbytes">pip 25.1 has dependency groups, pylock.toml, plus more</a></p>

<ul>
<li>post <a href="https://ichard26.github.io/blog/2025/04/whats-new-in-pip-25.1/?utm_source=pocket_shared&featured_on=pythonbytes">What's new in pip 25.1 - Dependency groups!</a></li>
<li>Richard Si</li>
<li>Discovered this through <a href="https://bsky.app/profile/hugovk.dev/post/3lnqd2fosq224?featured_on=pythonbytes">Hugo van Kemenade</a></li>
<li><p>Dependency groups, PEP 735, supported</p>

<pre><code># pyproject.toml
[dependency-groups]
test = ["pytest", "pytest-xdist"]
lint = ["mypy", "isort"]
# Dependency Groups can include other groups! ✨
dev = [ {include-group = "test"}, {include-group = "lint"} ]
</code></pre></li>
<li><p>Package installation progress bar</p></li>
<li>Resumable downloads</li>
<li>Experimental lockfile generation, PEP 751, with pip lock
<ul>
<li>so cool</li>
</ul></li>
<li>pip index versions is stable, no longer experimental
<ul>
<li>use this to get a list of available versions</li>
<li>ex: python3 -m pip index versions pytest-check</li>
<li>combine with --json to get a nice script readable output</li>
</ul></li>
</ul>

<p><strong>Michael #2:</strong> <a href="https://bsky.app/profile/aiohttp.org/post/3lmyhz6uhks2u?featured_on=pythonbytes">aiohttp goes free threaded</a></p>

<ul>
<li>Thanks to months of consistent contributions by Lysandros Nikolaou, all of the mandatory dependencies of <a href="https://www.dropbox.com/?q=%23aiohttp&featured_on=pythonbytes">#aiohttp</a> now ship free-threaded variants of <a href="https://www.dropbox.com/?q=%23wheels&featured_on=pythonbytes">#wheels</a>!</li>
<li>This unlocks the same in <a href="https://github.com/aio-libs/aiohttp?featured_on=pythonbytes">aiohttp</a>!</li>
</ul>

<p><strong>Brian #3:</strong> <a href="https://github.com/astral-sh/uv/releases/tag/0.6.15?featured_on=pythonbytes">uv 0.6.15 supports pylock.toml</a></p>

<ul>
<li>Discovered through <a href="https://bsky.app/profile/snarky.ca/post/3lngwrbkbm22g?featured_on=pythonbytes">Brett Cannon</a></li>
<li>So far, these projects support pylock.toml
<ul>
<li>pip</li>
<li>pip-audit</li>
<li>pdm</li>
<li>uv</li>
</ul></li>
<li>With uv
<ul>
<li>To export a uv.lock to the pylock.toml format, 
<ul>
<li>run: uv export -o pylock.toml</li>
</ul></li>
<li>To generate a pylock.toml file from a set of requirements, 
<ul>
<li>run: uv pip compile -o pylock.toml -r requirements.in</li>
</ul></li>
<li>To install from a pylock.toml file, 
<ul>
<li>run: uv pip sync pylock.toml or uv pip install -r pylock.toml</li>
</ul></li>
</ul></li>
</ul>

<p><strong>Michael #4:</strong> <a href="https://github.com/ariebovenberg/whenever?featured_on=pythonbytes"><strong>Whenever</strong></a></p>

<ul>
<li>via Pat Decker</li>
<li>Typed and DST-safe datetimes for Python, available in Rust or pure Python.</li>
<li><em>Whenever</em> helps you write <strong>correct</strong> and <strong>type checked</strong> datetime code.</li>
<li>It's also <strong>way faster</strong> than other third-party libraries—and usually the standard library as well.</li>
</ul>

<p><strong>Extras</strong> </p>

<p>Brian:</p>

<ul>
<li><a href="https://everyuuid.com?featured_on=pythonbytes">Every UUID</a> </li>
</ul>

<p>Michael:</p>

<ul>
<li><a href="https://www.pillar.security/blog/new-vulnerability-in-github-copilot-and-cursor-how-hackers-can-weaponize-code-agents?featured_on=pythonbytes">New Vulnerability in GitHub Copilot and Cursor: How Hackers Can Weaponize Code Agents</a> via Brian Skinn</li>
<li>And <a href="https://www.darkreading.com/application-security/ai-code-tools-widely-hallucinate-packages?featured_on=pythonbytes">typosquatting in the AI age</a></li>
<li>Firefox Send alternatives
<ul>
<li><a href="https://github.com/kern/filepizza?featured_on=pythonbytes">file.pizza</a> via <a href="https://social.tchncs.de/@rafaelwo/114393487740735715?featured_on=pythonbytes">@rafaelwo</a> </li>
<li><a href="https://bitwarden.com/products/send/?featured_on=pythonbytes">bitwarden send</a></li>
</ul></li>
</ul>

<p><strong>Joke:</strong> <strong>Can you Vibe?</strong></p>

<ul>
<li><a href="https://www.youtube.com/watch?v=JeNS1ZNHQs8"><strong>Interview with Vibe Coder in 2025</strong></a></li>
<li><a href="https://www.youtube.com/watch?v=_2C2CNmK7dQ"><strong>Senior Engineer tries Vibe Coding</strong></a></li>
</ul>
]]></description>
            
            <podcast:transcript url="https://pythonbytes.fm/episodes/vtt_transcript/430/or-you-go-to-jail.vtt" type="text/vtt"/>
            <itunes:image href="https://cdn.pythonbytes.fm/static/img/podcast-theme-img_1400.jpg"/>
        </item>
        <item>
            <title>#429 Nitpicking Python</title>
            <link>https://pythonbytes.fm/episodes/show/429/nitpicking-python</link>
            <guid isPermaLink="false">362b1715-3a50-4525-baa2-66e36baf0ece</guid>
            <enclosure
                    url="https://pythonbytes.fm/episodes/download/429/nitpicking-python.mp3"
                    length="26433724"
                    type="audio/mpeg"/>
            <itunes:category text="Technology"/>
            <itunes:category text="News">
                <itunes:category text="Tech News"/>
            </itunes:category>
            <pubDate>Mon, 21 Apr 2025 00:00:00 -0800</pubDate>
            <itunes:author>Michael Kennedy and Brian Okken</itunes:author>
            <itunes:title>#429: Nitpicking Python</itunes:title>
            <itunes:episode>429</itunes:episode>
            <itunes:explicit>false</itunes:explicit>
            <itunes:subtitle></itunes:subtitle>
            <itunes:summary><![CDATA[Topics include Huly, CVE Foundation, drawdb, and 14 Advanced Python Features.]]></itunes:summary>
            <itunes:duration>00:27:24</itunes:duration>
            <itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide, podcast, open source, news, headlines, education, software developer, data science, science, cloud computing</itunes:keywords>
            <description><![CDATA[<strong>Topics covered in this episode:</strong><br>

<ul>
	<li><strong><a href="https://github.com/hcengineering/platform?featured_on=pythonbytes">Huly</a></strong></li>
<li><a href="https://www.thecvefoundation.org/?featured_on=pythonbytes"><strong>CVE Foundation</strong></a> formed to take over CVE program from MITRE</li>
<li><strong><a href="https://www.drawdb.app/?featured_on=pythonbytes">drawdb</a></strong></li>
<li><strong><a href="https://blog.edward-li.com/tech/advanced-python-features/?featured_on=pythonbytes">14 Advanced Python Features</a></strong></li>
<li><strong>Extras</strong></li>
<li><strong>Joke</strong></li>

</ul><a href='https://www.youtube.com/watch?v=ddnRex0fsNw' style='font-weight: bold;'data-umami-event="Livestream-Past" data-umami-event-episode="429">Watch on YouTube</a><br>

<p><strong>About the show</strong></p>

<p>Sponsored by Posit Workbench: <a href="https://pythonbytes.fm/workbench">pythonbytes.fm/workbench</a></p>

<p><strong>Connect with the hosts</strong></p>

<ul>
<li>Michael: <a href="https://fosstodon.org/@mkennedy"><strong>@mkennedy@fosstodon.org</strong></a> <strong>/</strong> <a href="https://bsky.app/profile/mkennedy.codes?featured_on=pythonbytes"><strong>@mkennedy.codes</strong></a> <strong>(bsky)</strong></li>
<li>Brian: <a href="https://fosstodon.org/@brianokken"><strong>@brianokken@fosstodon.org</strong></a> <strong>/</strong> <a href="https://bsky.app/profile/brianokken.bsky.social?featured_on=pythonbytes"><strong>@brianokken.bsky.social</strong></a></li>
<li>Show: <a href="https://fosstodon.org/@pythonbytes"><strong>@pythonbytes@fosstodon.org</strong></a> <strong>/</strong> <a href="https://bsky.app/profile/pythonbytes.fm"><strong>@pythonbytes.fm</strong></a> <strong>(bsky)</strong></li>
</ul>

<p>Join us on YouTube at <a href="https://pythonbytes.fm/stream/live"><strong>pythonbytes.fm/live</strong></a> to be part of the audience. Usually <strong>Monday</strong> at 10am PT. Older video versions available there too.</p>

<p>Finally, if you want an artisanal, hand-crafted digest of every week of the show notes in email form? Add your name and email to <a href="https://pythonbytes.fm/friends-of-the-show">our friends of the show list</a>, we'll never share it.</p>

<p><strong>Michael #1:</strong> <a href="https://github.com/hcengineering/platform?featured_on=pythonbytes">Huly</a></p>

<ul>
<li>All-in-One Project Management Platform (alternative to Linear, Jira, Slack, Notion, Motion) </li>
<li>If you're primarily interested in self-hosting Huly without the intention to modify or contribute to its development, please use <a href="https://github.com/hcengineering/huly-selfhost?featured_on=pythonbytes">huly-selfhost</a>.</li>
<li>Manage your tasks efficiently with Huly's bidirectional GitHub synchronization. Use Huly as an advanced front-end for GitHub Issues and GitHub Projects.</li>
<li>Connect every element of your workflow to build a dynamic knowledge base.</li>
<li>Everything you need for productive team work: Team Planner • Project Management • Virtual Office • Chat • Documents • Inbox</li>
<li>Self hosting as a service: <a href="https://elest.io/?featured_on=pythonbytes"><strong>elest.io</strong></a></li>
</ul>

<p><strong>Brian #2:</strong>  <a href="https://www.thecvefoundation.org/?featured_on=pythonbytes"><strong>CVE Foundation</strong></a> formed to take over CVE program from MITRE</p>

<ul>
<li>Back story: <a href="https://arstechnica.com/security/2025/04/crucial-cve-flaw-tracking-database-narrowly-avoids-closure-to-dhs-cuts/?featured_on=pythonbytes">CVE, global source of cybersecurity info, was hours from being cut by DHS</a>
<ul>
<li>The 25-year-old CVE program, an essential part of global cybersecurity, is cited in nearly any discussion or response to a computer security issue.</li>
<li>CVE was at real risk of closure after its contract was set to expire on April 16.</li>
<li>The nonprofit MITRE runs CVE on a contract with the DHS.</li>
<li>A letter last Tuesday sent Tuesday by Yosry Barsoum, vice president of MITRE, gave notice of the potential halt to operations.</li>
<li>Another possible victim of the current administration.</li>
</ul></li>
<li><a href="https://www.thecvefoundation.org/?featured_on=pythonbytes">CVE Foundation Launched to Secure the Future of the CVE Program</a>
<ul>
<li>CVE Board members have spent the past year developing a strategy to transition CVE to a dedicated, non-profit foundation. The new CVE Foundation will focus solely on continuing the mission of delivering high-quality vulnerability identification and maintaining the integrity and availability of CVE data for defenders worldwide.</li>
<li>Over the coming days, the Foundation will release more information about its structure, transition planning, and opportunities for involvement from the broader community.</li>
</ul></li>
</ul>

<p><strong>Michael #3:</strong> <a href="https://www.drawdb.app/?featured_on=pythonbytes">drawdb</a></p>

<ul>
<li>Free and open source, simple, and intuitive database design editor, data-modeler, and SQL generator.</li>
<li>Great drag-drop relationship manager</li>
<li>Define your DB visually, export as SQL create scripts</li>
<li>Or import existing SQL to kickstart the diagramming.</li>
</ul>

<p><strong>Brian #4:</strong> <a href="https://blog.edward-li.com/tech/advanced-python-features/?featured_on=pythonbytes">14 Advanced Python Features</a></p>

<ul>
<li>Edward Li</li>
<li>Picking some favorites
<ul>
<li><a href="https://blog.edward-li.com/tech/advanced-python-features/?utm_source=pocket_shared#1-typing-overloads">1. Typing Overloads</a></li>
<li><a href="https://blog.edward-li.com/tech/advanced-python-features/?utm_source=pocket_shared#2-keyword-only-and-positional-only-arguments">2. Keyword-only and Positional-only Arguments</a></li>
<li><a href="https://blog.edward-li.com/tech/advanced-python-features/?utm_source=pocket_shared#9-python-nitpicks">9. Python Nitpicks</a>
<ul>
<li>For-else statements</li>
<li>Walrus operator</li>
<li>Short Circuit Evaluation</li>
<li>Operator Chaining</li>
</ul></li>
</ul></li>
</ul>

<p><strong>Extras</strong> </p>

<p>Michael:</p>

<ul>
<li><a href="https://blog.thunderbird.net/2025/04/thundermail-and-thunderbird-pro-services/?featured_on=pythonbytes">Thunderbird send / other firefox things</a>.</li>
</ul>

<p><strong>Joke:</strong> <a href="https://news.ycombinator.com/item?id=43681752&featured_on=pythonbytes">Python Tariffs</a></p>

<ul>
<li>Thanks <a href="https://bsky.app/profile/wagenrace.bsky.social/post/3lmtps57oes2f?featured_on=pythonbytes">wagenrace</a></li>
<li>Thanks <a href="https://campfire.whereismytribe.net/o/d3f2b6e1dd11413d98a883e1c209ae78?featured_on=pythonbytes">Campfire Tales</a></li>
</ul>
]]></description>
            
            <podcast:transcript url="https://pythonbytes.fm/episodes/vtt_transcript/429/nitpicking-python.vtt" type="text/vtt"/>
            <itunes:image href="https://cdn.pythonbytes.fm/static/img/podcast-theme-img_1400.jpg"/>
        </item>
        <item>
            <title>#428 How old is your Python?</title>
            <link>https://pythonbytes.fm/episodes/show/428/how-old-is-your-python</link>
            <guid isPermaLink="false">f8a0eeee-3e15-4d5a-be29-9c732eee91e6</guid>
            <enclosure
                    url="https://pythonbytes.fm/episodes/download/428/how-old-is-your-python.mp3"
                    length="29887898"
                    type="audio/mpeg"/>
            <itunes:category text="Technology"/>
            <itunes:category text="News">
                <itunes:category text="Tech News"/>
            </itunes:category>
            <pubDate>Mon, 14 Apr 2025 00:00:00 -0800</pubDate>
            <itunes:author>Michael Kennedy and Brian Okken</itunes:author>
            <itunes:title>#428: How old is your Python?</itunes:title>
            <itunes:episode>428</itunes:episode>
            <itunes:explicit>false</itunes:explicit>
            <itunes:subtitle></itunes:subtitle>
            <itunes:summary><![CDATA[Topics include How to Write a Git Commit Message, Caddy Web Server, , and juv.]]></itunes:summary>
            <itunes:duration>00:31:00</itunes:duration>
            <itunes:keywords>python, pycharm, python3,software, programming, web, web development, developer, ide, podcast, open source, news, headlines, education, software developer, data science, science, cloud computing</itunes:keywords>
            <description><![CDATA[<strong>Topics covered in this episode:</strong><br>

<ul>
	<li><a href="https://cbea.ms/git-commit/?featured_on=pythonbytes"><strong>How to Write a Git Commit Message</strong></a></li>
<li><a href="https://caddyserver.com?featured_on=pythonbytes"><strong>Caddy Web Server</strong></a></li>
<li><strong>Some new PEPs approved</strong></li>
<li><strong><a href="https://github.com/manzt/juv?featured_on=pythonbytes">juv</a></strong></li>
<li><strong>Extras</strong></li>
<li><strong>Joke</strong></li>

</ul><a href='https://www.youtube.com/watch?v=bSsmD24gABc' style='font-weight: bold;'data-umami-event="Livestream-Past" data-umami-event-episode="428">Watch on YouTube</a><br>

<p><strong>About the show</strong></p>

<p>Sponsored by <strong>Posit Connect</strong>:  <a href="https://pythonbytes.fm/connect"><strong>pythonbytes.fm/connect</strong></a> </p>

<p><strong>Connect with the hosts</strong></p>

<ul>
<li>Michael: <a href="https://fosstodon.org/@mkennedy"><strong>@mkennedy@fosstodon.org</strong></a> <strong>/</strong> <a href="https://bsky.app/profile/mkennedy.codes?featured_on=pythonbytes"><strong>@mkennedy.codes</strong></a> <strong>(bsky)</strong></li>
<li>Brian: <a href="https://fosstodon.org/@brianokken"><strong>@brianokken@fosstodon.org</strong></a> <strong>/</strong> <a href="https://bsky.app/profile/brianokken.bsky.social?featured_on=pythonbytes"><strong>@brianokken.bsky.social</strong></a></li>
<li>Show: <a href="https://fosstodon.org/@pythonbytes"><strong>@pythonbytes@fosstodon.org</strong></a> <strong>/</strong> <a href="https://bsky.app/profile/pythonbytes.fm"><strong>@pythonbytes.fm</strong></a> <strong>(bsky)</strong></li>
</ul>

<p>Join us on YouTube at <a href="https://pythonbytes.fm/stream/live"><strong>pythonbytes.fm/live</strong></a> to be part of the audience. Usually <strong>Monday</strong> at 10am PT. Older video versions available there too.</p>

<p>Finally, if you want an artisanal, hand-crafted digest of every week of the show notes in email form? Add your name and email to <a href="https://pythonbytes.fm/friends-of-the-show">our friends of the show list</a>, we'll never share it. </p>

<p><strong>Brian #1:</strong> <a href="https://cbea.ms/git-commit/?featured_on=pythonbytes"><strong>How to Write a Git Commit Message</strong></a></p>

<ul>
<li>Chris Beams</li>
<li>7 rules of a great commit message
<ul>
<li>Separate subject from body with a blank line</li>
<li>Limit the subject line to 50 characters</li>
<li>Capitalize the subject line</li>
<li>Do not end the subject line with a period</li>
<li>Use the imperative mood in the subject line</li>
<li>Wrap the body at 72 characters</li>
<li>Use the body to explain what and why vs. how</li>
</ul></li>
<li>Article also includes
<ul>
<li>Why a good commit message matters</li>
<li>Discussion about each of the 7 rules</li>
<li>Cool hat tips to other articles on the subject
<ul>
<li>“<em>Keep in mind:</em> <a href="http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html?featured_on=pythonbytes"><em>This</em></a> <a href="https://www.git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project#_commit_guidelines"><em>has</em></a> <a href="https://github.com/torvalds/subsurface-for-dirk/blob/master/README.md#contributing"><em>all</em></a> <a href="http://who-t.blogspot.co.at/2009/12/on-commit-messages.html?featured_on=pythonbytes"><em>been</em></a> <a href="https://github.com/erlang/otp/wiki/writing-good-commit-messages?featured_on=pythonbytes"><em>said</em></a> <a href="https://github.com/spring-projects/spring-framework/blob/30bce7/CONTRIBUTING.md#format-commit-messages"><em>before</em></a><em>.”</em></li>
<li>Each word is a different link.</li>
</ul></li>
</ul></li>
</ul>

<p><strong>Michael #2:</strong> <a href="https://caddyserver.com?featured_on=pythonbytes"><strong>Caddy Web Server</strong></a></p>

<ul>
<li>via Fredrik Mellström</li>
<li>Like a more modern NGINX</li>
<li>Caddy automatically obtains and renews TLS certificates for all your sites.</li>
<li>Caddy's native configuration is a JSON document.</li>
<li>Even localhost and internal IPs are served with TLS using the intermediate of a fully-automated, self-managed CA that is automatically installed into most local trust stores.</li>
<li>Configure multiple Caddy instances with the same storage, and they will automatically coordinate certificate management as a fleet.</li>
<li>Production-grade static file server.</li>
</ul>

<p><strong>Brian #3:</strong> <strong>Some new PEPs approved</strong></p>

<ul>
<li><a href="https://peps.python.org/pep-0770/?featured_on=pythonbytes">PEP 770 – Improving measurability of Python packages with Software Bill-of-Materials</a>
<ul>
<li>Accepted for packaging</li>
<li>Author: Seth Larson, Sponsor Brett Cannon</li>
<li>“This PEP proposes using SBOM documents included in Python packages as a means to improve automated software measurability for Python packages.”</li>
</ul></li>
<li><a href="https://peps.python.org/pep-0750/?featured_on=pythonbytes">PEP 750 – Template Strings</a>
<ul>
<li>Accepted for Python 3.14</li>
<li>Author: Jim Baker, Guido van Rossum, Paul Everitt, Kaudai Aono, Lysandros Nikolaou, Dave Peck</li>
<li>“Templates provide developers with access to the string and its interpolated values <em>before</em> they are combined. This brings native flexible string processing to the Python language and enables safety checks, web templating, domain-specific languages, and more.”</li>
</ul></li>
</ul>

<p><strong>Michael #4:</strong> <a href="https://github.com/manzt/juv?featured_on=pythonbytes">juv</a></p>

<ul>
<li>A toolkit for reproducible Jupyter notebooks, powered by <a href="https://docs.astral.sh/uv/?featured_on=pythonbytes">uv</a>.</li>
<li><img src="https://paper.dropboxstatic.com/static/img/ace/emoji/1f5c2.png?version=8.0.0" alt="card index dividers" /> Create, manage, and run Jupyter notebooks with their dependencies</li>
<li><img src="https://paper.dropboxstatic.com/static/img/ace/emoji/1f4cc.png?version=8.0.0" alt="pushpin" /> Pin dependencies with <a href="https://peps.python.org/pep-0723?featured_on=pythonbytes">PEP 723 - inline script metadata</a></li>
<li><img src="https://paper.dropboxstatic.com/static/img/ace/emoji/1f680.png?version=8.0.0" alt="rocket" /> Launch ephemeral sessions for multiple front ends (e.g., JupyterLab, Notebook, NbClassic)</li>
<li><img src="https://paper.dropboxstatic.com/static/img/ace/emoji/26a1.png?version=8.0.0" alt="high voltage" /> Powered by <a href="https://docs.astral.sh/uv/?featured_on=pythonbytes">uv</a> for fast dependency management</li>
<li>Use uvx to run jupyterlab with ephemeral virtual environments and tracked dependencies.</li>
</ul>

<p><strong>Extras</strong> </p>

<p>Brian:</p>

<ul>
<li><a href="https://devguide.python.org/versions?featured_on=pythonbytes">Status of Python versions</a>
<ul>
<li>new-ish format</li>
<li>Use this all the time. Can’t remember if we’ve covered the new format yet.</li>
</ul></li>
<li>See also <a href="https://endoflife.date/python?featured_on=pythonbytes">Python endoflife.date</a>
<ul>
<li>Same dates, very visible encouragement to move on to Python 3.13 if you haven’t already.</li>
</ul></li>
</ul>

<p>Michael:</p>

<ul>
<li><a href="https://docs.python.org/release/3.13.3/whatsnew/changelog.html#python-3-13-3">Python 3.13.3 is out</a>.</li>
<li>.git-blame-ignore-revs <a href="https://bsky.app/profile/ysai.me/post/3lmdbyixxa22u?featured_on=pythonbytes">follow up</a></li>
</ul>

<p><strong>Joke:</strong> <a href="https://ifunny.co/picture/days-before-openai-days-after-openai-developer-coding-generates-codes-wBFS0jIKA?featured_on=pythonbytes">BGPT</a> (thanks Doug Farrell)</p>
]]></description>
            
            <podcast:transcript url="https://pythonbytes.fm/episodes/vtt_transcript/428/how-old-is-your-python.vtt" type="text/vtt"/>
            <itunes:image href="https://cdn.pythonbytes.fm/static/img/podcast-theme-img_1400.jpg"/>
        </item>
    </channel>
</rss>